// IdentityMap.idl : IDL source for IdentityMap.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (IdentityMap.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "..\Common\Connection.h";
import "..\Common\Config.h";
import "..\Common\GUIdefs.h";
	[
		object,
		uuid(C022EEAD-748A-11D3-A47B-E89C0BCE9720),
	
		helpstring("ISySalObject Interface"),
		pointer_default(unique)
	]
	interface ISySalObject : IUnknown
	{
		[helpstring("method SetName")] HRESULT SetName(ConnectionName name);
		[helpstring("method GetName")] HRESULT GetName(ConnectionName name);
		[helpstring("method SetConfig")] HRESULT SetConfig(SySalConfig *pConfig);
		[helpstring("method GetConfig")] HRESULT GetConfig(SySalConfig *pConfig);
		[helpstring("method EditConfig")] HRESULT EditConfig(SySalConfig *pConfig, HSySalHANDLE hWnd);
		[helpstring("method EnableMonitor")] HRESULT EnableMonitor(boolean bEnable);
		[helpstring("method GetNumberOfConnections")] HRESULT GetNumberOfConnections(int *pNumber);
		[helpstring("method SetConnection")] HRESULT SetConnection(int n, SySalConnection connection);
		[helpstring("method GetConnection")] HRESULT GetConnection(int n, SySalConnection *pConnection);
		[helpstring("method GetIcon")] HRESULT GetIcon(int n, HSySalHICON *pHICON);
		[helpstring("method GetClassName")] HRESULT GetClassName(ConnectionName name);
		[helpstring("method SyncExec")] HRESULT SyncExec();
		[helpstring("method AsyncExec")] HRESULT AsyncExec(HSySalHANDLE HNotifyStatusChangeEvent);
		[helpstring("method AsyncCheckStatus")] HRESULT AsyncCheckStatus(long *pStatus);
		[helpstring("method AsyncWait")] HRESULT AsyncWait();
		[helpstring("method AsyncPause")] HRESULT AsyncPause();
		[helpstring("method AsyncStop")] HRESULT AsyncStop();
		[helpstring("method AsyncResume")] HRESULT AsyncResume();
		[helpstring("method IsReady")] HRESULT IsReady(long *pWrongConn, long *pRetCode);
	};

	[
		object,
		uuid(D0FEF450-B910-4D5D-908C-9E1E64EA7FA1),
	
		helpstring("ISheetMap Interface"),
		pointer_default(unique)
	]
	interface ISheetMap : IUnknown
	{
		[helpstring("method Init")] HRESULT Init(BYTE *pData, HSySalHWND hWnd, HSySalHANDLE hNotifyStatusChangeEvent);
		[helpstring("method Dump")] HRESULT Dump(BYTE **ppData);
		[helpstring("method DirFixPoint")] HRESULT DirFixPoint(double X, double Y);
		[helpstring("method InvFixPoint")] HRESULT InvFixPoint(double X, double Y);
		[helpstring("method GetDirFixPoint")] HRESULT GetDirFixPoint(double *pX, double *pY);
		[helpstring("method GetInvFixPoint")] HRESULT GetInvFixPoint(double *pX, double *pY);
		[helpstring("method DirMapPoint")] HRESULT DirMapPoint(double X, double Y, double *pX, double *pY);
		[helpstring("method DirMapVector")] HRESULT DirMapVector(double X, double Y, double *pX, double *pY);
		[helpstring("method InvMapPoint")] HRESULT InvMapPoint(double X, double Y, double *pX, double *pY);
		[helpstring("method InvMapVector")] HRESULT InvMapVector(double X, double Y, double *pX, double *pY);
		[helpstring("method IsValid")] HRESULT IsValid(BOOL *pValid);
	};

[
	uuid(17F3B4B3-35D0-450B-BC8A-294D7868CA56),
	version(1.0),
	helpstring("IdentityMap 1.0 Type Library")
]
library IDENTITYMAPLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(20AF3AA0-F048-4EF7-A627-5B3947DE6A62),
		helpstring("IdentityMap Class")
	]
	coclass IdentityMap
	{
		[default] interface ISySalObject;
		interface ISheetMap;
	};
};
