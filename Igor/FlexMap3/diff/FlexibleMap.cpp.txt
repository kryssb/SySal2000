Comparing files FlexibleMap.cpp and D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP
***** FlexibleMap.cpp
const char MapExtString[] = "mapext:";
const char MapLabExtString[] = "maplabext:";

***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP
const char MapExtString[] = "mapext:";

*****

***** FlexibleMap.cpp

STDMETHODIMP CFlexibleMap::ReadLabels(BYTE *pData, HSySalHWND hWnd, HSySalHANDLE hNotifyStatusChangeEvent, int* Label)
{
//      return E_NOTIMPL;

***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP

STDMETHODIMP CFlexibleMap::ReadLabels(BYTE *pData, HSySalHWND hWnd, HSySalHANDLE hNotifyStatusChangeEvent)
{
        return E_NOTIMPL;
        }

STDMETHODIMP CFlexibleMap::Init(BYTE *pData, HSySalHWND hWnd, HSySalHANDLE hNotifyStatusChangeEvent)
{
        WaitForSingleObject(HStatusMutex, INFINITE);
        HStatusChangeEvent = (HANDLE)hNotifyStatusChangeEvent;
        AFX_MANAGE_STATE(AfxGetStaticModuleState())

        // TODO: Add your implementation code here
        bool Recovery = false;
        bool SameGrid = false;

*****

***** FlexibleMap.cpp
        IStage *iSt = 0;
        int Result=0;
        *Label=-1;
        char mess[128];
CameraSpec CAM;
        try
***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP
        IStage *iSt = 0;
        ISySalDataIO *iIO = 0;
        ISySalDataIO *iCo = 0;

        IO_MarkMap *pIOMap = 0;
        IO_MarkMap *pIORecMap = 0;
        IntMarkMap *pMap = 0;
        UINT ExtErrorInfo;
        UINT InitResult = IDCANCEL;
        UINT ReusePolicy = RP_NOREUSE;

        try
*****

***** FlexibleMap.cpp
                else throw 2;
// label position is given with respect to ReferenceCorner
//labextN: V xmin ymin xmax ymax Nbits Dmark
                //or
//N V xmin ymin xmax ymax Nbits Dmark

                //where N- number of label (used by caller, not here) V - is label version, x,y - coordinates of outermost mark
, Nbits number of bits
        // Dmark - expected mark diameter (better to give half or even less than real diameter)

float DX,DY,Dmark,X0,X1,Y0,Y1;
double MinDist=1e6,Z0;
double Dst;
int Nbits,Version,iN=-1;
char key[128];
float bitX0[128]; //x-position of bit =0
float bitX1[128]; //x-position of bit =1
float bitY0[128]; //y position of bit  =0
float bitY1[128]; //y position of bit  =1
int bitV[128]; //bit value;
sscanf(((const char*)pData), "%s %d %f %f %f %f %d %f",key,&Version,&X0,&Y0,&X1,&Y1,&Nbits,&Dmark);
//if(strstr(key,"labext")==NULL) {
//                                      MessageBox((HWND)hWnd, "The label string was not correctly formed!", "Formatting Error"
 MB_ICONERROR | MB_OK);
//                                      throw 3;
//                                      }
if(!Valid) {
                                        MessageBox((HWND)hWnd, "Sheet map is not yet scanned!", "Error", MB_ICONERROR | MB_OK);

                                        throw 3;
                                        }

for(int i=0;i<Map.Count;i++){
        if (Map.pMarks[i].Status != MARK_STATUS_FOUND) continue;
        Dst=hypot(X0-Map.pMarks[i].Nominal.X, Y0-Map.pMarks[i].Nominal.Y );
        if(Dst<MinDist) { MinDist=Dst; iN=i;}
}
//iN - index of nearest mark
//char mess[256];


Z0=Map.pMarks[iN].Z;

if(Z0<=0) throw 3;

switch(Version)
{
case 1:
 //    iSt->Stop(2);
         iSt->PosMove(2, Z0, F.ZSetSpeed, F.VertAcc);
         //calculate bit positions
         for(i=0;i<Nbits;i++) {
                 bitX0[i]=X0+i*(X1-X0)/(Nbits-1);
                 bitX1[i]=bitX0[i];
                 bitY0[i]=Y0;
                 bitY1[i]=Y1;
         }
        break;
        
default: return S_FALSE;
}
//now recognize grey level in given positions
                        iFG->SetLiveGrab();
    double StageX,StageY;
        iOb->GetSpecs(&CAM);
        BYTE* pImage;
//      BYTE* pImage = (BYTE *)GlobalAlloc(GMEM_FIXED, CAM.Width * CAM.Height);
        float Glevel0,Glevel1;
        int iDY,iDX,iXC,iYC,iDiam,iGroup;
        float fDY,fDX;

        ///////////////////////
                        X0=bitX0[0]; Y0=(bitY0[0]+bitY1[0])/2;
                if (DirFixPoint(X0, Y0) != S_OK || DirMapPoint(X0, Y0, &StageX, &StageY) != S_OK)
                {
                        MessageBox((HWND)hWnd,"Can't map label position!", "Error", MB_ICONERROR);
                        throw 3;
                };
//     iSt->Stop(0);
//     iSt->Stop(1);
            iSt->PosMove(0, StageX, F.LongDistSpeed, F.LongDistAcc);
            iSt->PosMove(1, StageY, F.LongDistSpeed, F.LongDistAcc);
                        int LimX, LimY;
                        float PX, PY, PZ;
                        do
                        {
***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP
                else throw 2;
                if (Slots[3].pUnknown)
                {
                        if (Slots[3].pUnknown->QueryInterface(IID_ISySalDataIO, (void **)&iIO) != S_OK) throw 3;
                        }
                else throw 3;
                if (Slots[4].pUnknown)
                {
                        if (Slots[4].pUnknown->QueryInterface(IID_ISySalDataIO, (void **)&iCo) != S_OK) throw 4;
                        };

                Recovery = false;
                if (F.RecoveryFileName[0])
                {
                        if (iIO->Read(hWnd, (BYTE *)&pIORecMap, &ExtErrorInfo, (UCHAR *)F.RecoveryFileName) == S_OK)
                        {
                                if ((pIORecMap->Hdr.Hdr.InfoType != (MAP_HEADER_BYTES | MAP_FULL_SECTION)) ||
                                        (pIORecMap->Hdr.Hdr.HeaderFormat != MAP_MARK_HEADER_TYPE)) 
                                {
                                        MessageBox((HWND)hWnd, "The Recovery File does not contain map information!", "I/O Erro
", MB_ICONERROR | MB_OK);
                                        throw 6;
                                        };
                                }                       
                        };

                if (strnicmp((const char *)pData, MapString, strlen(MapString)) == 0)
                {
                        if (!(pIOMap = ReadMapFromString((char *)pData + strlen(MapString))))
                        {
                                MessageBox((HWND)hWnd, "The map string was not correctly formed!", "Formatting Error", MB_ICONE
ROR | MB_OK);
                                throw 7;
                                }
                        }
                else if (strnicmp((const char *)pData, MapExtString, strlen(MapExtString)) == 0)
                {
                        if (!(pIOMap = ReadMapExtFromString((char *)pData + strlen(MapExtString))))
                        {
                                MessageBox((HWND)hWnd, "The map string was not correctly formed!", "Formatting Error", MB_ICONE
ROR | MB_OK);
                                throw 7;
                                }
                        }
                else if (iIO->Read(hWnd, (BYTE *)&pIOMap, &ExtErrorInfo, pData) != S_OK)
                {
                        CString Temp;
                        Temp.Format("Error reading Map Initialization data!\r\nError Code: %08X", ExtErrorInfo);
                        MessageBox((HWND)hWnd, Temp, "I/O Error", MB_ICONERROR | MB_OK);
                        throw 7;
                        };

                if ((pIOMap->Hdr.Hdr.InfoType != (MAP_HEADER_BYTES | MAP_FULL_SECTION)) ||
                        ((pIOMap->Hdr.Hdr.HeaderFormat != MAP_MARK_HEADER_TYPE) &&
                        (pIOMap->Hdr.Hdr.HeaderFormat != MAP_MARKEXT_HEADER_TYPE))) throw 8;
                if (pIOMap->Map.Count < 3) throw 9;
                int i, j;
                for (i = 0; i < pIOMap->Map.Count; i++)
                        for (j = i + 1; j < pIOMap->Map.Count; j++)
                                if (hypot(pIOMap->Map.pMarks[i].Nominal.X - pIOMap->Map.pMarks[j].Nominal.X,
                                        pIOMap->Map.pMarks[i].Nominal.Y - pIOMap->Map.pMarks[j].Nominal.Y) == 0.) throw 8;
                Valid = false;
                pMap = new IntMarkMap;
                pMap->Count = pIOMap->Map2.Count;
                pMap->Id = pIOMap->Hdr.Id;
                pMap->pMarks = 0;
                pMap->pMarks = new IntMark[pMap->Count];
                if (pIOMap->Hdr.Hdr.HeaderFormat == MAP_MARKEXT_HEADER_TYPE)
                {
                        pMap->ExtendedFormat = INTMARKMAP_FMT_SIDEEXTENTS;
                        pMap->PlateMinX = pIOMap->Map2.PlateMinX;
                        pMap->PlateMinY = pIOMap->Map2.PlateMinY;
                        pMap->PlateMaxX = pIOMap->Map2.PlateMaxX;
                        pMap->PlateMaxY = pIOMap->Map2.PlateMaxY;
                        }
                else
                {
                        pMap->ExtendedFormat = INTMARKMAP_FMT_BASE;
                        pMap->PlateMinX = pMap->PlateMaxX = 0.0f;
                        pMap->PlateMinY = pMap->PlateMaxY = 0.0f;
                        }
                if (pIOMap->Hdr.Hdr.HeaderFormat == MAP_MARKEXT_HEADER_TYPE)
                {
                        for (i = 0; i < pMap->Count; i++)
                        {
                                pMap->pMarks[i].Id = pIOMap->Map2.pMarks[i].Id;
                                pMap->pMarks[i].Nominal.X = pIOMap->Map2.pMarks[i].Nominal.X;
                                pMap->pMarks[i].Nominal.Y = pIOMap->Map2.pMarks[i].Nominal.Y;
                                pMap->pMarks[i].Stage.X = pIOMap->Map2.pMarks[i].Stage.X;
                                pMap->pMarks[i].Stage.Y = pIOMap->Map2.pMarks[i].Stage.Y;
                                pMap->pMarks[i].Z = 0.;
                                pMap->pMarks[i].Side = pIOMap->Map2.pMarks[i].Side;
                                pMap->pMarks[i].Status = (pIOMap->Map2.pMarks[i].Status == MARK_STATUS_NOTFOUND) ? MARK_STATUS_
OTFOUND : MARK_STATUS_NOTSEARCHED;
                                };
                        }
                else
                {
                        for (i = 0; i < pMap->Count; i++)
                        {
*****

***** FlexibleMap.cpp
                        {
                                
                                Sleep(500);
                                iSt->Stop(0);
                                iSt->Stop(1);

                                iSt->GetLimiter(0, &LimX);
                                iSt->GetLimiter(1, &LimY);
                                iSt->GetPos(0, &PX);
                                iSt->GetPos(1, &PY);
                                }
                        while (!LimX && !LimY && (fabs(PX - StageX) > F.HorizTolerance || 
                                fabs(PY - StageY) > F.HorizTolerance ));
                        iSt->Stop(0);
                        iSt->Stop(1);
////////////////////////////

        fDY=1.*(bitY1[1]-bitY0[0]);
        iDY=abs(int(fDY/CAM.PixelToMicronY));
    fDX= 1.*(bitX1[1]-bitX0[0]);
    iDX=abs(int(fDX/CAM.PixelToMicronX));

        for(int grp=0;grp<int((Nbits-1)/4)+1;grp++)
        {

                X0=bitX0[grp*4]+fDX*1.5; Y0=(bitY0[grp*4]+bitY1[grp*4])/2;
                if (DirFixPoint(X0, Y0) != S_OK || DirMapPoint(X0, Y0, &StageX, &StageY) != S_OK)
                {
                        MessageBox((HWND)hWnd,"Can't map label position!", "Error", MB_ICONERROR);
                        throw 3;
                };
            iSt->PosMove(0, StageX, F.ShortDistSpeed, F.ShortDistAcc);
            iSt->PosMove(1, StageY, F.ShortDistSpeed, F.ShortDistAcc);
//     iSt->Stop(0);
//     iSt->Stop(1);
//          iSt->PosMove(0, StageX, F.LongDistSpeed, F.LongDistAcc);
//          iSt->PosMove(1, StageY, F.LongDistSpeed, F.LongDistAcc);
                        int LimX, LimY;
                        float PX, PY, PZ;
                        do
                        {
//                              Sleep(500);
                                iSt->Stop(0);
                                iSt->Stop(1);
                                iSt->GetLimiter(0, &LimX);
                                iSt->GetLimiter(1, &LimY);
                                iSt->GetPos(0, &PX);
                                iSt->GetPos(1, &PY);
                                }
                        while (LimX==0 && LimY==0 && (fabs(PX - StageX) > F.HorizTolerance || 
                                fabs(PY - StageY) > F.HorizTolerance ));
                        iSt->Stop(0);
                        iSt->Stop(1);
                        Sleep(200);
                        iFG->FreezeFrame(&pImage);
                        Sleep(200);

                        for(int bn=0;bn<4;bn++)
                        {
                        if(grp*4+bn>=Nbits) continue;
                        iXC=CAM.Width/2+(-iDX-iDX/2+iDX*bn)*(CAM.PixelToMicronX/fabs(CAM.PixelToMicronX));
                        iYC=CAM.Height/2+iDY/2;
                        iDiam=abs(int(Dmark/CAM.PixelToMicronY));
                    Glevel1=CalculateAverageInCircle(pImage,CAM.Width,CAM.Height,iXC,iYC,iDiam);
                        iYC=CAM.Height/2-iDY/2;
                    Glevel0=CalculateAverageInCircle(pImage,CAM.Width,CAM.Height,iXC,iYC,iDiam);

                    if( Glevel1/Glevel0 > 3. ) bitV[grp*4+bn]=1;
                        else if( Glevel0/Glevel1 > 3. ) bitV[grp*4+bn]=0;
                        else bitV[grp*4+bn]=-1;
                        }
***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP
                        {
                                pMap->pMarks[i].Id = pIOMap->Map.pMarks[i].Id;
                                pMap->pMarks[i].Nominal.X = pIOMap->Map.pMarks[i].Nominal.X;
                                pMap->pMarks[i].Nominal.Y = pIOMap->Map.pMarks[i].Nominal.Y;
                                pMap->pMarks[i].Stage.X = pIOMap->Map.pMarks[i].Nominal.X;
                                pMap->pMarks[i].Stage.Y = pIOMap->Map.pMarks[i].Nominal.Y;
                                pMap->pMarks[i].Z = 0.;
                                pMap->pMarks[i].Status = (pIOMap->Map.pMarks[i].Status == MARK_STATUS_NOTFOUND) ? MARK_STATUS_N
TFOUND : MARK_STATUS_NOTSEARCHED;
                                pMap->pMarks[i].Side = 0;
                                };
                        }
*****

***** FlexibleMap.cpp

    }
for(int bn=0;bn<Nbits;bn++){
        if(bitV[bn]<0) { Result=-1; break; }
        if(bitV[bn]>0) Result+=(1<<bn);
}
*Label=Result;

        
}


        catch (...)
        {
                if (iFG) iFG->Release();
                if (iVP) iVP->Release();
                if (iVP2) iVP2->Release();
                if (iSt) iSt->Release();                
                if (iOb) iOb->Release();
                return  S_FALSE;
        };
        if (iFG) iFG->Release();
        if (iVP) iVP->Release();
        if (iVP2) iVP2->Release();
        if (iSt) iSt->Release();        
        if (iOb) iOb->Release();
        return S_OK;
}

STDMETHODIMP CFlexibleMap::Init(BYTE *pData, HSySalHWND hWnd, HSySalHANDLE hNotifyStatusChangeEvent)
{
        WaitForSingleObject(HStatusMutex, INFINITE);
        HStatusChangeEvent = (HANDLE)hNotifyStatusChangeEvent;
        AFX_MANAGE_STATE(AfxGetStaticModuleState())

        // TODO: Add your implementation code here
        bool Recovery = false;
        bool SameGrid = false;
        int Nlabels = 0;
        char *labexts= new char[6*64];

        IObjective *iOb = 0;            
        IFrameGrabber *iFG = 0;
        IVisionProcessor *iVP = 0;
        IVisionProcessor2 *iVP2 = 0;
        IStage *iSt = 0;
        ISySalDataIO *iIO = 0;
        ISySalDataIO *iCo = 0;

        IO_MarkMap *pIOMap = 0;
        IO_MarkMap *pIORecMap = 0;
        IntMarkMap *pMap = 0;
        UINT ExtErrorInfo;
        UINT InitResult = IDCANCEL;
        UINT ReusePolicy = RP_NOREUSE;

        try
        {
                if (Slots[0].pUnknown)
                {
                        if (Slots[0].pUnknown->QueryInterface(IID_IFrameGrabber, (void **)&iFG) != S_OK) throw 0;
                        if (Slots[0].pUnknown->QueryInterface(IID_IVisionProcessor, (void **)&iVP) != S_OK) throw 0;
                        if (Slots[0].pUnknown->QueryInterface(IID_IVisionProcessor, (void **)&iVP2) != S_OK) iVP2 = 0;
                        }
                else throw 0;
                if (Slots[1].pUnknown)
                {
                        if (Slots[1].pUnknown->QueryInterface(IID_IStage, (void **)&iSt) != S_OK) throw 1;
                        }
                else throw 1;
                if (Slots[2].pUnknown)
                {
                        if (Slots[2].pUnknown->QueryInterface(IID_IObjective, (void **)&iOb) != S_OK) throw 2;
                        }
                else throw 2;
                if (Slots[3].pUnknown)
                {
                        if (Slots[3].pUnknown->QueryInterface(IID_ISySalDataIO, (void **)&iIO) != S_OK) throw 3;
                        }
                else throw 3;
                if (Slots[4].pUnknown)
                {
                        if (Slots[4].pUnknown->QueryInterface(IID_ISySalDataIO, (void **)&iCo) != S_OK) throw 4;
                        };
***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP

                if (pIORecMap && (pIOMap->Map.Count == pIORecMap->Map.Count))
                {
                        for (i = 0; (i < pIOMap->Map.Count) && (pIOMap->Map.pMarks[i].Id == pIORecMap->Map.pMarks[i].Id); i++);

                        if (i == pIOMap->Map.Count)
                        {
                                Recovery = true;
                                for (i = 0; (i < pIOMap->Map.Count) && 
                                        (pIOMap->Map.pMarks[i].Nominal.X == pIORecMap->Map.pMarks[i].Nominal.X) && 
                                        (pIOMap->Map.pMarks[i].Nominal.Y == pIORecMap->Map.pMarks[i].Nominal.Y); i++);
                                if (i == pIOMap->Map.Count) SameGrid = true;
                                };
                        };
*****

***** FlexibleMap.cpp

                Recovery = false;
                if (F.RecoveryFileName[0])
                {
                        if (iIO->Read(hWnd, (BYTE *)&pIORecMap, &ExtErrorInfo, (UCHAR *)F.RecoveryFileName) == S_OK)
                        {
                                if ((pIORecMap->Hdr.Hdr.InfoType != (MAP_HEADER_BYTES | MAP_FULL_SECTION)) ||
                                        (pIORecMap->Hdr.Hdr.HeaderFormat != MAP_MARK_HEADER_TYPE)) 
                                {
                                        MessageBox((HWND)hWnd, "The Recovery File does not contain map information!", "I/O Erro
", MB_ICONERROR | MB_OK);
                                        throw 6;
                                        };
                                }                       
                        };
***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP

                CWnd W;
                W.Attach((HWND)hWnd);

                if (Recovery)
                {
                        CReusePolicy MyDlg(&W);
                        MyDlg.m_IsSameGrid = SameGrid;
                        if (MyDlg.DoModal() == IDOK) 
                        {
                                ReusePolicy = MyDlg.m_ReusePolicy;
                                if (ReusePolicy == RP_NOREUSE) Recovery = false;
                                }
                        else Recovery = false;

                        if (ReusePolicy == RP_REINTERPRETLOAD || ReusePolicy == RP_LOAD)
                        {
                                for (i = 0; i < pIORecMap->Map.Count; i++)
                                {
                                        pMap->pMarks[i].Stage.X = pIORecMap->Map.pMarks[i].Stage.X;
                                        pMap->pMarks[i].Stage.Y = pIORecMap->Map.pMarks[i].Stage.Y;
                                        pMap->pMarks[i].Status = pIORecMap->Map.pMarks[i].Status;
                                        };
                                }
                        else if (ReusePolicy == RP_REINTERPRET)
                        {
                                for (i = 0; i < pIORecMap->Map.Count; i++)
                                {
                                        pMap->pMarks[i].Nominal.X = pIORecMap->Map.pMarks[i].Nominal.X;
                                        pMap->pMarks[i].Nominal.Y = pIORecMap->Map.pMarks[i].Nominal.Y;
                                        pMap->pMarks[i].Status = (pIORecMap->Map.pMarks[i].Status == MARK_STATUS_NOTFOUND) ? MA
K_STATUS_NOTFOUND : MARK_STATUS_NOTSEARCHED;
                                        };
                                };
                        };
*****

***** FlexibleMap.cpp

                if (strnicmp((const char *)pData, MapString, strlen(MapString)) == 0)
                {
                        if (!(pIOMap = ReadMapFromString((char *)pData + strlen(MapString))))
                        {
                                MessageBox((HWND)hWnd, "The map string was not correctly formed!", "Formatting Error", MB_ICONE
ROR | MB_OK);
                                throw 7;
                                }
                        }
                else if (strnicmp((const char *)pData, MapExtString, strlen(MapExtString)) == 0)
                {
                        if (!(pIOMap = ReadMapExtFromString((char *)pData + strlen(MapExtString))))
                        {
                                MessageBox((HWND)hWnd, "The map string was not correctly formed!", "Formatting Error", MB_ICONE
ROR | MB_OK);
                                throw 7;
                                }
                        }
                else if (strnicmp((const char *)pData, MapLabExtString, strlen(MapLabExtString)) == 0)
                {
                        if (!(pIOMap = ReadMapLabExtFromString((char *)pData + strlen(MapLabExtString), labexts, &Nlabels) ))
                        {
                                MessageBox((HWND)hWnd, "The map string was not correctly formed!", "Formatting Error", MB_ICONE
ROR | MB_OK);
                                throw 7;
                                }
                        }
                else if (iIO->Read(hWnd, (BYTE *)&pIOMap, &ExtErrorInfo, pData) != S_OK)
                {
                        CString Temp;
                        Temp.Format("Error reading Map Initialization data!\r\nError Code: %08X", ExtErrorInfo);
                        MessageBox((HWND)hWnd, Temp, "I/O Error", MB_ICONERROR | MB_OK);
                        throw 7;
                        };

                if ((pIOMap->Hdr.Hdr.InfoType != (MAP_HEADER_BYTES | MAP_FULL_SECTION)) ||
                        ((pIOMap->Hdr.Hdr.HeaderFormat != MAP_MARK_HEADER_TYPE) &&
                        (pIOMap->Hdr.Hdr.HeaderFormat != MAP_MARKEXT_HEADER_TYPE))) throw 8;
                if (pIOMap->Map.Count < 3) throw 9;
                int i, j;
                for (i = 0; i < pIOMap->Map.Count; i++)
                        for (j = i + 1; j < pIOMap->Map.Count; j++)
                                if (hypot(pIOMap->Map.pMarks[i].Nominal.X - pIOMap->Map.pMarks[j].Nominal.X,
                                        pIOMap->Map.pMarks[i].Nominal.Y - pIOMap->Map.pMarks[j].Nominal.Y) == 0.) throw 8;
                Valid = false;
                pMap = new IntMarkMap;
                pMap->Count = pIOMap->Map2.Count;
                pMap->Id = pIOMap->Hdr.Id;
                pMap->pMarks = 0;
                pMap->pMarks = new IntMark[pMap->Count];
                if (pIOMap->Hdr.Hdr.HeaderFormat == MAP_MARKEXT_HEADER_TYPE)
                {
                        pMap->ExtendedFormat = INTMARKMAP_FMT_SIDEEXTENTS;
                        pMap->PlateMinX = pIOMap->Map2.PlateMinX;
                        pMap->PlateMinY = pIOMap->Map2.PlateMinY;
                        pMap->PlateMaxX = pIOMap->Map2.PlateMaxX;
                        pMap->PlateMaxY = pIOMap->Map2.PlateMaxY;
                        }
                else
                {
                        pMap->ExtendedFormat = INTMARKMAP_FMT_BASE;
                        pMap->PlateMinX = pMap->PlateMaxX = 0.0f;
                        pMap->PlateMinY = pMap->PlateMaxY = 0.0f;
                        }
                if (pIOMap->Hdr.Hdr.HeaderFormat == MAP_MARKEXT_HEADER_TYPE)
                {
                        for (i = 0; i < pMap->Count; i++)
                        {
                                pMap->pMarks[i].Id = pIOMap->Map2.pMarks[i].Id;
                                pMap->pMarks[i].Nominal.X = pIOMap->Map2.pMarks[i].Nominal.X;
                                pMap->pMarks[i].Nominal.Y = pIOMap->Map2.pMarks[i].Nominal.Y;
                                pMap->pMarks[i].Stage.X = pIOMap->Map2.pMarks[i].Stage.X;
                                pMap->pMarks[i].Stage.Y = pIOMap->Map2.pMarks[i].Stage.Y;
                                pMap->pMarks[i].Z = 0.;
                                pMap->pMarks[i].Side = pIOMap->Map2.pMarks[i].Side;
                                pMap->pMarks[i].Status = (pIOMap->Map2.pMarks[i].Status == MARK_STATUS_NOTFOUND) ? MARK_STATUS_
OTFOUND : MARK_STATUS_NOTSEARCHED;
                                };
***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP

                if (!Recovery || (ReusePolicy == RP_NOREUSE || ReusePolicy == RP_REINTERPRET || ReusePolicy == RP_REPOSITION))
                {
                        CString TempName = Name;
                        //WARNING CINITMAP RELEASES HSTATUSMUTEX!!!
                        CInitMap MyDlg(&hDef_Wnd, HStatusMutex, TempName, iFG, iVP, iVP2, iSt, iOb, iCo, &F, pMap, Recovery, &W
;
                        if ((InitResult = MyDlg.DoModal()) != IDOK) 
                        {
                                WaitForSingleObject(HStatusMutex, INFINITE);
                                hDef_Wnd = 0;
                                W.Detach();
                                ReleaseMutex(HStatusMutex);
                                throw 0;
                                };
                        WaitForSingleObject(HStatusMutex, INFINITE);
                        hDef_Wnd = 0;
                        W.Detach();
                        ReleaseMutex(HStatusMutex);
                        if (Recovery)
                        {
                                int i;
                                for (i = 0; (i < pMap->Count) && (pMap->pMarks[i].Status != MARK_STATUS_FOUND); i++);
                                if (i == pMap->Count) throw -1;
                                float DX = pMap->pMarks[i].Stage.X - pIORecMap->Map.pMarks[i].Stage.X;
                                float DY = pMap->pMarks[i].Stage.Y - pIORecMap->Map.pMarks[i].Stage.Y;
                                for (i = 0; i < pMap->Count; i++)
                                        if (pMap->pMarks[i].Status == MARK_STATUS_NOTSEARCHED)
                                        {
                                                pMap->pMarks[i].Stage.X = pIORecMap->Map.pMarks[i].Stage.X + DX;
                                                pMap->pMarks[i].Stage.Y = pIORecMap->Map.pMarks[i].Stage.Y + DY;
                                                pMap->pMarks[i].Status = MARK_STATUS_FOUND;
                                                };
                                };
                        if (F.RecoveryFileName[0] && !Recovery)
                        {
                                DeleteFile(F.RecoveryFileName);
                                int i;
                                for (i = 0; i < pMap->Count; i++)
                                {
                                        pIOMap->Map.pMarks[i].Nominal.X = pMap->pMarks[i].Nominal.X;
                                        pIOMap->Map.pMarks[i].Nominal.Y = pMap->pMarks[i].Nominal.Y;
                                        pIOMap->Map.pMarks[i].Stage.X = pMap->pMarks[i].Stage.X;
                                        pIOMap->Map.pMarks[i].Stage.Y = pMap->pMarks[i].Stage.Y;
                                        pIOMap->Map.pMarks[i].Status = pMap->pMarks[i].Status;
                                        };
/*
                                if (iIO->Write(hWnd, (BYTE *)pIOMap, &ExtErrorInfo, (UCHAR *)F.RecoveryFileName) != S_OK)
                                {
                                        CString Temp;
                                        Temp.Format("Error saving Recovery File!\r\nError Code: %08X\r\n\r\nNon-fatal error: Sh
et Map has been correctly initialized.", ExtErrorInfo);
                                        MessageBox((HWND)hWnd, Temp, "I/O Error", MB_ICONERROR | MB_OK);
                                        };
*/
                                };
*****

Resync Failed.  Files are too different.
***** FlexibleMap.cpp
                        }
                else
                {
                        for (i = 0; i < pMap->Count; i++)
                        {
                                pMap->pMarks[i].Id = pIOMap->Map.pMarks[i].Id;
                                pMap->pMarks[i].Nominal.X = pIOMap->Map.pMarks[i].Nominal.X;
                                pMap->pMarks[i].Nominal.Y = pIOMap->Map.pMarks[i].Nominal.Y;
                                pMap->pMarks[i].Stage.X = pIOMap->Map.pMarks[i].Nominal.X;
                                pMap->pMarks[i].Stage.Y = pIOMap->Map.pMarks[i].Nominal.Y;
                                pMap->pMarks[i].Z = 0.;
                                pMap->pMarks[i].Status = (pIOMap->Map.pMarks[i].Status == MARK_STATUS_NOTFOUND) ? MARK_STATUS_N
TFOUND : MARK_STATUS_NOTSEARCHED;
                                pMap->pMarks[i].Side = 0;
                                };
                        }

                if (pIORecMap && (pIOMap->Map.Count == pIORecMap->Map.Count))
                {
                        for (i = 0; (i < pIOMap->Map.Count) && (pIOMap->Map.pMarks[i].Id == pIORecMap->Map.pMarks[i].Id); i++);

                        if (i == pIOMap->Map.Count)
                        {
                                Recovery = true;
                                for (i = 0; (i < pIOMap->Map.Count) && 
                                        (pIOMap->Map.pMarks[i].Nominal.X == pIORecMap->Map.pMarks[i].Nominal.X) && 
                                        (pIOMap->Map.pMarks[i].Nominal.Y == pIORecMap->Map.pMarks[i].Nominal.Y); i++);
                                if (i == pIOMap->Map.Count) SameGrid = true;
                                };
                        };

                CWnd W;
                W.Attach((HWND)hWnd);

                if (Recovery)
                {
                        CReusePolicy MyDlg(&W);
                        MyDlg.m_IsSameGrid = SameGrid;
                        if (MyDlg.DoModal() == IDOK) 
                        {
                                ReusePolicy = MyDlg.m_ReusePolicy;
                                if (ReusePolicy == RP_NOREUSE) Recovery = false;
                                }
                        else Recovery = false;

                        if (ReusePolicy == RP_REINTERPRETLOAD || ReusePolicy == RP_LOAD)
                        {
                                for (i = 0; i < pIORecMap->Map.Count; i++)
                                {
                                        pMap->pMarks[i].Stage.X = pIORecMap->Map.pMarks[i].Stage.X;
                                        pMap->pMarks[i].Stage.Y = pIORecMap->Map.pMarks[i].Stage.Y;
                                        pMap->pMarks[i].Status = pIORecMap->Map.pMarks[i].Status;
                                        };
                                }
                        else if (ReusePolicy == RP_REINTERPRET)
                        {
                                for (i = 0; i < pIORecMap->Map.Count; i++)
                                {
                                        pMap->pMarks[i].Nominal.X = pIORecMap->Map.pMarks[i].Nominal.X;
                                        pMap->pMarks[i].Nominal.Y = pIORecMap->Map.pMarks[i].Nominal.Y;
                                        pMap->pMarks[i].Status = (pIORecMap->Map.pMarks[i].Status == MARK_STATUS_NOTFOUND) ? MA
K_STATUS_NOTFOUND : MARK_STATUS_NOTSEARCHED;
                                        };
                                };
                        };

                if (!Recovery || (ReusePolicy == RP_NOREUSE || ReusePolicy == RP_REINTERPRET || ReusePolicy == RP_REPOSITION))
                {
                        CString TempName = Name;
                        //WARNING CINITMAP RELEASES HSTATUSMUTEX!!!
                        CInitMap MyDlg(&hDef_Wnd, HStatusMutex, TempName, iFG, iVP, iVP2, iSt, iOb, iCo, &F, pMap, Recovery, &W
;
                        if ((InitResult = MyDlg.DoModal()) != IDOK) 
                        {
                                WaitForSingleObject(HStatusMutex, INFINITE);
                                hDef_Wnd = 0;
                                W.Detach();
                                ReleaseMutex(HStatusMutex);
                                throw 0;
                                };
                        WaitForSingleObject(HStatusMutex, INFINITE);
                        hDef_Wnd = 0;
                        W.Detach();
                        ReleaseMutex(HStatusMutex);
                        if (Recovery)
                        {
                                int i;
                                for (i = 0; (i < pMap->Count) && (pMap->pMarks[i].Status != MARK_STATUS_FOUND); i++);
                                if (i == pMap->Count) throw -1;
                                float DX = pMap->pMarks[i].Stage.X - pIORecMap->Map.pMarks[i].Stage.X;
                                float DY = pMap->pMarks[i].Stage.Y - pIORecMap->Map.pMarks[i].Stage.Y;
                                for (i = 0; i < pMap->Count; i++)
                                        if (pMap->pMarks[i].Status == MARK_STATUS_NOTSEARCHED)
                                        {
                                                pMap->pMarks[i].Stage.X = pIORecMap->Map.pMarks[i].Stage.X + DX;
                                                pMap->pMarks[i].Stage.Y = pIORecMap->Map.pMarks[i].Stage.Y + DY;
                                                pMap->pMarks[i].Status = MARK_STATUS_FOUND;
                                                };
                                };
                        if (F.RecoveryFileName[0] && !Recovery)
***** D:\SYSAL2\FLEXMAP3\FLEXIBLEMAP.CPP
                        }
                else ReleaseMutex(HStatusMutex);
                W.Detach();
                }
        catch (...)
        {
                if (iFG) iFG->Release();
                if (iVP) iVP->Release();
                if (iVP2) iVP2->Release();
                if (iSt) iSt->Release();                
                if (iOb) iOb->Release();
                if (iCo) iCo->Release();
                if (iIO) iIO->Release();
                if (pMap)
                {
                        if (pMap->pMarks) delete [] pMap->pMarks;
                        delete pMap;
                        };
                if (pIOMap) CoTaskMemFree(pIOMap);
                if (pIORecMap) CoTaskMemFree(pIORecMap);
                Valid = false;
                return (InitResult == IDABORT) ? E_ABORT : S_FALSE;
                };
        if (iFG) iFG->Release();
        if (iVP) iVP->Release();
        if (iVP2) iVP2->Release();
        if (iSt) iSt->Release();        
        if (iOb) iOb->Release();
        if (iCo) iCo->Release();
        if (pMap)
        {
                if (Map.pMarks) delete [] Map.pMarks;
                Map = *pMap;
                };
        if (pIOMap) CoTaskMemFree(pIOMap);
        if (pIORecMap) CoTaskMemFree(pIORecMap);
        Valid = true;
        return S_OK;
}

STDMETHODIMP CFlexibleMap::IsValid(BOOL *pValid)
{
        AFX_MANAGE_STATE(AfxGetStaticModuleState())

        // TODO: Add your implementation code here
        *pValid = Valid;
        return S_OK;
}

STDMETHODIMP CFlexibleMap::Dump(BYTE **ppData)
{
        //AFX_MANAGE_STATE(AfxGetStaticModuleState())

        // TODO: Add your implementation code here
        *ppData = 0;
        if (!Valid) return S_FALSE;
        IO_MarkMap *pIOMap = (IO_MarkMap *)CoTaskMemAlloc(sizeof(IO_MarkMap) + sizeof(MarkMap) * Map.Count);
        if (!pIOMap) return S_FALSE;
        pIOMap->Hdr.Hdr.InfoType = MAP_HEADER_BYTES | MAP_FULL_SECTION;
        pIOMap->Hdr.Hdr.HeaderFormat = MAP_MARK_HEADER_TYPE;
        pIOMap->Hdr.Id = Map.Id;
        pIOMap->Map.Count = Map.Count;
        pIOMap->Map.pMarks = (Mark *)((BYTE *)pIOMap + sizeof(IO_MarkMap));
        int i;
        for (i = 0; i < Map.Count; i++)
        {
                pIOMap->Map.pMarks[i].Id = Map.pMarks[i].Id;
                pIOMap->Map.pMarks[i].Nominal.X = Map.pMarks[i].Nominal.X;
                pIOMap->Map.pMarks[i].Nominal.Y = Map.pMarks[i].Nominal.Y;
                pIOMap->Map.pMarks[i].Stage.X = Map.pMarks[i].Stage.X;
                pIOMap->Map.pMarks[i].Stage.Y = Map.pMarks[i].Stage.Y;
                pIOMap->Map.pMarks[i].Status = Map.pMarks[i].Status;
                };
        *ppData = (BYTE *)pIOMap;
        return S_OK;
}

STDMETHODIMP CFlexibleMap::DirFixPoint(double X, double Y)
{
        //AFX_MANAGE_STATE(AfxGetStaticModuleState())

        // TODO: Add your implementation code here
        int Indices[3];
        IntMark::t_Pos Source[3], Dest[3];
        if (!FindNearestNominal(X, Y, Indices)) return E_INVALIDARG;
        int i;
        for (i = 0; i < 3; i++)
        {
                Source[i] = Map.pMarks[Indices[i]].Nominal;
                Dest[i] = Map.pMarks[Indices[i]].Stage;
                };
        Dir = AffineTransf(Source, Dest);
        Inv = AffineTransf(Dest, Source);
        DirFix.X = X;
        DirFix.Y = Y;
        Inv.Transform(X, Y, &X, &Y);
        InvFix.X = X;
        InvFix.Y = Y;
        return S_OK;
}
*****

