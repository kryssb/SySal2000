// ScanServer.idl : IDL source for ScanServer
//

// This file will be processed by the MIDL tool to
// produce the type library (ScanServer.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "..\Common\Connection.h";
import "..\Common\Config.h";
import "..\Common\GUIdefs.h";
	[
		object,
		uuid(C022EEAD-748A-11D3-A47B-E89C0BCE9720),
	
		helpstring("ISySalObject Interface"),
		pointer_default(unique)
	]
	interface ISySalObject : IUnknown
	{
		[helpstring("method SetName")] HRESULT SetName(ConnectionName name);
		[helpstring("method GetName")] HRESULT GetName(ConnectionName name);
		[helpstring("method SetConfig")] HRESULT SetConfig(SySalConfig *pConfig);
		[helpstring("method GetConfig")] HRESULT GetConfig(SySalConfig *pConfig);
		[helpstring("method EditConfig")] HRESULT EditConfig(SySalConfig *pConfig, HSySalHANDLE hWnd);
		[helpstring("method EnableMonitor")] HRESULT EnableMonitor(boolean bEnable);
		[helpstring("method GetNumberOfConnections")] HRESULT GetNumberOfConnections(int *pNumber);
		[helpstring("method SetConnection")] HRESULT SetConnection(int n, SySalConnection connection);
		[helpstring("method GetConnection")] HRESULT GetConnection(int n, SySalConnection *pConnection);
		[helpstring("method GetIcon")] HRESULT GetIcon(int n, HSySalHICON *pHICON);
		[helpstring("method GetClassName")] HRESULT GetClassName(ConnectionName name);
		[helpstring("method SyncExec")] HRESULT SyncExec();
		[helpstring("method AsyncExec")] HRESULT AsyncExec(HSySalHANDLE HNotifyStatusChangeEvent);
		[helpstring("method AsyncCheckStatus")] HRESULT AsyncCheckStatus(long *pStatus);
		[helpstring("method AsyncWait")] HRESULT AsyncWait();
		[helpstring("method AsyncPause")] HRESULT AsyncPause();
		[helpstring("method AsyncStop")] HRESULT AsyncStop();
		[helpstring("method AsyncResume")] HRESULT AsyncResume();
		[helpstring("method IsReady")] HRESULT IsReady(long *pWrongConn, long *pRetCode);
	};

	[
		object,
		uuid("32E3C1FF-0C60-45B7-B66F-36DB816276DD"),
		helpstring("IScanServer Interface"),
		pointer_default(unique)
	]
	interface IScanServer : IUnknown
	{
		[id(1), helpstring("method Connect")] HRESULT Connect();
		[id(2), helpstring("method Disconnect")] HRESULT Disconnect();
		[id(3), helpstring("method Send")] HRESULT Send([in] BYTE* pMessage);
		[id(4), helpstring("method Receive")] HRESULT Receive([in] BYTE* pMessageSpace);
	};

[
	uuid(62B20409-94B8-41A5-9445-AE463EF2960A),
	version(1.0),
	helpstring("ScanServer 1.0 Type Library")
]
library ScanServerLib
{
	importlib("stdole2.tlb");
	[
		uuid(A03AA408-1260-4A63-87C5-12949BF07C7E),
		helpstring("SySalScanServer Class")
	]
	coclass SySalScanServer
	{
		[default] interface ISySalObject;
		interface IScanServer;
	};
};
