	TITLE	D:\SySal2\SmartTracker5\SmartTrackerClass.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@DOIJ@CPropertyHelper?3?3GetProperty?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@EJEI@CPropertyHelper?3?3PutProperty?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FH@HFKE@CComClassFactory?3?5asked?5for?5non?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@EDCG@Smart?5Tracker?55?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MECO@?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02JBAA@?$CFf?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02DLJH@?$CFg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSmartTrackerClass@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetRawUnknown@CSmartTrackerClass@@QAEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEntries@CSmartTrackerClass@@SGPBU_ATL_INTMAP_ENTRY@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSmartTrackerClass@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ITracker3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ISySalObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ITracker2@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ITracker@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetName@CSmartTrackerClass@@UAGJQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetName@CSmartTrackerClass@@UAGJQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CEditConfig@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EnableMonitor@CSmartTrackerClass@@UAGJE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumberOfConnections@CSmartTrackerClass@@UAGJPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetConnection@CSmartTrackerClass@@UAGJHUSySalConnection@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetConnection@CSmartTrackerClass@@UAGJHPAUSySalConnection@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIcon@CSmartTrackerClass@@UAGJHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassNameA@CSmartTrackerClass@@UAGJQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SyncExec@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AsyncExec@CSmartTrackerClass@@UAGJJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AsyncCheckStatus@CSmartTrackerClass@@UAGJPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AsyncWait@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AsyncPause@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AsyncStop@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AsyncResume@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsReady@CSmartTrackerClass@@UAGJPAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StartFilling@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetCameraSpec@CSmartTrackerClass@@UAGJUCameraSpec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCameraSpec@CSmartTrackerClass@@UAGJPAUCameraSpec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutClusters@CSmartTrackerClass@@UAGJPAUCluster@@HM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTracks@CSmartTrackerClass@@UAGJPAUTrack@@PAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClusters@CSmartTrackerClass@@UAGJHPAUCluster@@PAHPAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PresetSlope@CSmartTrackerClass@@UAGJMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EnableSlopePresetting@CSmartTrackerClass@@UAGJE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSlopePresetStatus@CSmartTrackerClass@@UAGJPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFlatTracks@CSmartTrackerClass@@UAGJPAUFlatTrack@@PAHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFlatStrips@CSmartTrackerClass@@UAGJHPAUFlatStrip@@PAHPAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDirAndTol@CSmartTrackerClass@@IAEXMMMPAM00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PartialGetTracks2@CSmartTrackerClass@@IAEIAAUActivationRecord@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackerThreadHook@CSmartTrackerClass@@KGIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTracks2@CSmartTrackerClass@@UAGJPAUTrack2@@PAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitTrackerData@CSmartTrackerClass@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCell@CSmartTrackerClass@@IAEHMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack@@AAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack2@@AAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack2@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutData@CSmartTrackerClass@@SAXPAUSySalConfig@@PAUConfigData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutDataPreserve@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalAddRef@?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalRelease@?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeInfo@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeInfo@@@ATL@@QBEPAUITypeInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeInfo@@@ATL@@QAEPAPAUITypeInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UITypeInfo@@@ATL@@QAEPAUITypeInfo@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@?$CComPtr@UITypeInfo@@@ATL@@QAEPAUITypeInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeInfo2@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeInfo2@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeInfo2@@@ATL@@QAEPAPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@IUnknown@@QAGJPAPAUITypeInfo2@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComAutoCriticalSection@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CComAutoCriticalSection@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0H@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?AfxGetResourceHandle@@YGPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CComAutoCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComAutoCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComObjectRootBase@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_entries@?1??_GetEntries@CSmartTrackerClass@@SGPBU_ATL_INTMAP_ENTRY@ATL@@XZ@4QBU34@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c022eead_748a_11d3_a47b_e89c0bce9720
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7a9e779c_aa32_4565_8e69_5f1bc4e362b7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_67a71430_f2e4_42ae_8910_28279a7616d6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e416c46d_7f68_11d3_a47c_fa1e4afa2721
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Cache@CComObjectRootBase@ATL@@SGJPAXABU_GUID@@PAPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryFromResourceD@CComModule@ATL@@QAGJIHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AFX_MAINTAIN_STATE2@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?ConfigDataQDI@@3PAUQueryDataInfo@@A		; ConfigDataQDI
PUBLIC	?pHelpPath@CSmartTrackerClass@@2PADA		; CSmartTrackerClass::pHelpPath
_BSS	SEGMENT
?pHelpPath@CSmartTrackerClass@@2PADA DD 01H DUP (?)	; CSmartTrackerClass::pHelpPath
_BSS	ENDS
_DATA	SEGMENT
?ConfigDataQDI@@3PAUQueryDataInfo@@A DB 'MaxGrains', 00H ; ConfigDataQDI
	ORG $+54
	DB	01H
	ORG $+3
	DD	00H
	DB	'10000', 00H
	ORG $+58
	DB	'CellOverflow', 00H
	ORG $+51
	DB	01H
	ORG $+3
	DD	08H
	DB	'32', 00H
	ORG $+61
	DB	'LayerNum', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	04H
	DB	'20', 00H
	ORG $+61
	DB	'CellNumX', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0cH
	DB	'10', 00H
	ORG $+61
	DB	'CellNumY', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	010H
	DB	'10', 00H
	ORG $+61
	DB	'PixMin', 00H
	ORG $+57
	DB	01H
	ORG $+3
	DD	014H
	DB	'2', 00H
	ORG $+62
	DB	'PixMax', 00H
	ORG $+57
	DB	01H
	ORG $+3
	DD	018H
	DB	'64', 00H
	ORG $+61
	DB	'AlignTol', 00H
	ORG $+55
	DB	02H
	ORG $+3
	DD	01cH
	DB	'.7', 00H
	ORG $+61
	DB	'TrialCount', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	020H
	DB	'0', 00H
	ORG $+62
	DB	'NptMinV', 00H
	ORG $+56
	DB	02H
	ORG $+3
	DD	02e4H
	DB	'8.1', 00H
	ORG $+60
	DB	'NptMinH', 00H
	ORG $+56
	DB	02H
	ORG $+3
	DD	02e8H
	DB	'7', 00H
	ORG $+62
	DB	'NptMin01', 00H
	ORG $+55
	DB	02H
	ORG $+3
	DD	02ecH
	DB	'8', 00H
	ORG $+62
	DB	'MinSlope', 00H
	ORG $+55
	DB	02H
	ORG $+3
	DD	02f0H
	DB	'-.0005', 00H
	ORG $+57
	DB	'MaxSlope', 00H
	ORG $+55
	DB	02H
	ORG $+3
	DD	02f4H
	DB	'1', 00H
	ORG $+62
	DB	'Processors', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02f8H
	DB	'2', 00H
	ORG $+62
	DB	'MaxTrackingTime', 00H
	ORG $+48
	DB	01H
	ORG $+3
	DD	02fcH
	DB	'300', 00H
	ORG $+60
	DB	'ReplicaRadius', 00H
	ORG $+50
	DB	02H
	ORG $+3
	DD	0300H
	DB	'2', 00H
	ORG $+62
	DB	'ReplicaSampleDivider', 00H
	ORG $+43
	DB	01H
	ORG $+3
	DD	0304H
	DB	'8', 00H
	ORG $+62
	DB	'MinReplicas', 00H
	ORG $+52
	DB	01H
	ORG $+3
	DD	0308H
	DB	'40', 00H
	ORG $+61
	DB	'MaxReplicaSpread', 00H
	ORG $+47
	DB	02H
	ORG $+3
	DD	030cH
	DB	'1', 00H
	ORG $+62
	DB	'TTop0', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	024H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom0', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	028H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggers0', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger00', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	030H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger01', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	034H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger02', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	038H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger03', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	03cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger04', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	040H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger05', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	044H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger06', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	048H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger07', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	04cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTop1', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	050H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom1', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	054H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger1', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	058H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger10', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	05cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger11', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	060H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger12', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	064H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger13', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	068H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger14', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	06cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger15', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	070H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger16', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	074H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger17', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	078H
	DB	'-1', 00H
	ORG $+61
	DB	'TTop2', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	07cH
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom2', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	080H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger2', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	084H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger20', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	088H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger21', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	08cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger22', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	090H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger23', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	094H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger24', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	098H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger25', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	09cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger26', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0a0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger27', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0a4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTop3', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	0a8H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom3', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0acH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger3', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	0b0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger30', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0b4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger31', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0b8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger32', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0bcH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger33', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0c0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger34', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0c4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger35', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0c8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger36', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0ccH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger37', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0d0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTop4', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	0d4H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom4', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0d8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger4', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	0dcH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger40', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0e0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger41', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0e4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger42', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0e8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger43', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0ecH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger44', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0f0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger45', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0f4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger46', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0f8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger47', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0fcH
	DB	'-1', 00H
	ORG $+61
	DB	'TTop5', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	0100H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom5', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0104H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger5', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	0108H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger50', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	010cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger51', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0110H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger52', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0114H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger53', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0118H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger54', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	011cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger55', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0120H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger56', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0124H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger57', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0128H
	DB	'-1', 00H
	ORG $+61
	DB	'TTop6', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	012cH
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom6', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0130H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger6', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	0134H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger60', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0138H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger61', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	013cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger62', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0140H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger63', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0144H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger64', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0148H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger65', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	014cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger66', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0150H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger67', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0154H
	DB	'-1', 00H
	ORG $+61
	DB	'TTop7', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	0158H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom7', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	015cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger7', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	0160H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger70', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0164H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger71', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0168H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger72', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	016cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger73', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0170H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger74', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0174H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger75', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0178H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger76', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	017cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger77', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0180H
	DB	'-1', 00H
	ORG $+61
	DB	'TTop8', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	0184H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom8', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0188H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger8', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	018cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger80', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0190H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger81', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0194H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger82', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0198H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger83', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	019cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger84', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01a0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger85', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01a4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger86', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01a8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger87', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01acH
	DB	'-1', 00H
	ORG $+61
	DB	'TTop9', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	01b0H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottom9', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	01b4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger9', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	01b8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger90', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01bcH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger91', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01c0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger92', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01c4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger93', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01c8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger94', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01ccH
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger95', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01d0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger96', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01d4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTrigger97', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01d8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTopA', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	01dcH
	DB	'-1', 00H
	ORG $+61
	DB	'TBottomA', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	01e0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	01e4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA0', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01e8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA1', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01ecH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA2', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01f0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA3', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01f4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA4', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01f8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA5', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	01fcH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA6', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0200H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerA7', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0204H
	DB	'-1', 00H
	ORG $+61
	DB	'TTopB', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	0208H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottomB', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	020cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	0210H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB0', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0214H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB1', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0218H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB2', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	021cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB3', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0220H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB4', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0224H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB5', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0228H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB6', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	022cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerB7', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0230H
	DB	'-1', 00H
	ORG $+61
	DB	'TTopC', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	0234H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottomC', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0238H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	023cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC0', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0240H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC1', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0244H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC2', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0248H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC3', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	024cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC4', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0250H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC5', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0254H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC6', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0258H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerC7', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	025cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTopD', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	0260H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottomD', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0264H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	0268H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD0', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	026cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD1', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0270H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD2', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0274H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD3', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0278H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD4', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	027cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD5', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0280H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD6', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0284H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerD7', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0288H
	DB	'-1', 00H
	ORG $+61
	DB	'TTopE', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	028cH
	DB	'-1', 00H
	ORG $+61
	DB	'TBottomE', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	0290H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	0294H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE0', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	0298H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE1', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	029cH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE2', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02a0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE3', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02a4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE4', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02a8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE5', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02acH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE6', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02b0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerE7', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02b4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTopF', 00H
	ORG $+58
	DB	01H
	ORG $+3
	DD	02b8H
	DB	'-1', 00H
	ORG $+61
	DB	'TBottomF', 00H
	ORG $+55
	DB	01H
	ORG $+3
	DD	02bcH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF', 00H
	ORG $+54
	DB	01H
	ORG $+3
	DD	02c0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF0', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02c4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF1', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02c8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF2', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02ccH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF3', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02d0H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF4', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02d4H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF5', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02d8H
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF6', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02dcH
	DB	'-1', 00H
	ORG $+61
	DB	'TTriggerF7', 00H
	ORG $+53
	DB	01H
	ORG $+3
	DD	02e0H
	DB	'-1', 00H
	ORG $+61
_DATA	ENDS
PUBLIC	?SetName@CSmartTrackerClass@@UAGJQAD@Z		; CSmartTrackerClass::SetName
EXTRN	__imp__strncpy:NEAR
;	COMDAT ?SetName@CSmartTrackerClass@@UAGJQAD@Z
_TEXT	SEGMENT
_name$ = 12
_this$ = 8
?SetName@CSmartTrackerClass@@UAGJQAD@Z PROC NEAR	; CSmartTrackerClass::SetName, COMDAT

; 237  : 	// TODO: Add your implementation code here
; 238  : 	strncpy(Name, name, SYSAL_MAX_CONN_NAME_LEN);

	mov	ecx, DWORD PTR _this$[esp-4]
	mov	eax, DWORD PTR _name$[esp-4]
	push	64					; 00000040H
	add	ecx, 32					; 00000020H
	push	eax
	push	ecx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH

; 239  : 	return S_OK;

	xor	eax, eax

; 240  : }

	ret	8
?SetName@CSmartTrackerClass@@UAGJQAD@Z ENDP		; CSmartTrackerClass::SetName
_TEXT	ENDS
PUBLIC	?GetName@CSmartTrackerClass@@UAGJQAD@Z		; CSmartTrackerClass::GetName
;	COMDAT ?GetName@CSmartTrackerClass@@UAGJQAD@Z
_TEXT	SEGMENT
_name$ = 12
_this$ = 8
?GetName@CSmartTrackerClass@@UAGJQAD@Z PROC NEAR	; CSmartTrackerClass::GetName, COMDAT

; 244  : 	// TODO: Add your implementation code here
; 245  : 	strncpy(name, Name, SYSAL_MAX_CONN_NAME_LEN);

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR _name$[esp-4]
	add	eax, 32					; 00000020H
	push	64					; 00000040H
	push	eax
	push	ecx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH

; 246  : 	return S_OK;

	xor	eax, eax

; 247  : }

	ret	8
?GetName@CSmartTrackerClass@@UAGJQAD@Z ENDP		; CSmartTrackerClass::GetName
_TEXT	ENDS
PUBLIC	?SetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z ; CSmartTrackerClass::SetConfig
PUBLIC	?TrackerThreadHook@CSmartTrackerClass@@KGIPAX@Z	; CSmartTrackerClass::TrackerThreadHook
PUBLIC	?GetData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX_N@Z ; GetData
EXTRN	__imp__CreateEventA@16:NEAR
EXTRN	__imp___beginthreadex:NEAR
EXTRN	__imp__SetEvent@4:NEAR
EXTRN	__imp__ResetEvent@4:NEAR
EXTRN	__imp__WaitForSingleObject@8:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	__imp__GlobalAlloc@8:NEAR
EXTRN	__imp__GlobalFree@4:NEAR
;	COMDAT ?SetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z
_TEXT	SEGMENT
_pConfig$ = 12
_this$ = 8
_dummy$78686 = 8
?SetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z PROC NEAR ; CSmartTrackerClass::SetConfig, COMDAT

; 250  : {

	push	ebx
	push	esi

; 251  : 	// TODO: Add your implementation code here
; 252  : 	OkToRun = false;
; 253  : 	if (GetData(*pConfig, ConfigDataN, ConfigDataQDI, &T, false) != ConfigDataN) return S_FALSE;

	mov	eax, DWORD PTR _pConfig$[esp+4]
	push	edi
	mov	edi, DWORD PTR _this$[esp+8]
	push	0
	lea	esi, DWORD PTR [edi+132]
	mov	BYTE PTR [edi+984], 0
	push	esi
	push	OFFSET FLAT:?ConfigDataQDI@@3PAUQueryDataInfo@@A ; ConfigDataQDI
	push	196					; 000000c4H
	push	eax
	call	?GetData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX_N@Z ; GetData
	add	esp, 20					; 00000014H
	cmp	eax, 196				; 000000c4H
	je	SHORT $L78656
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx

; 292  : }

	ret	8
$L78656:

; 254  : 	if (T.GrainSpace) GlobalFree(T.GrainSpace);

	mov	eax, DWORD PTR [edi+916]
	mov	ebx, DWORD PTR __imp__GlobalFree@4
	test	eax, eax
	je	SHORT $L78658
	push	eax
	call	ebx
$L78658:

; 255  : 	if (!(T.GrainSpace = (IntGrain *)GlobalAlloc(GMEM_FIXED, sizeof(IntGrain) * T.MaxGrains)))

	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR __imp__GlobalAlloc@8
	lea	ecx, DWORD PTR [eax+eax*4]
	shl	ecx, 2
	push	ecx
	push	0
	call	esi
	test	eax, eax
	mov	DWORD PTR [edi+916], eax
	jne	SHORT $L78661
	pop	edi
	pop	esi

; 256  : 		return S_FALSE;

	mov	eax, 1
	pop	ebx

; 292  : }

	ret	8
$L78661:

; 257  : 	if (T.ZLayer) GlobalFree(T.ZLayer);

	mov	eax, DWORD PTR [edi+920]
	test	eax, eax
	je	SHORT $L78663
	push	eax
	call	ebx
$L78663:

; 258  : 	if (!(T.ZLayer = (float *)GlobalAlloc(GMEM_FIXED, sizeof(float) * T.LayerNum)))

	mov	edx, DWORD PTR [edi+136]
	shl	edx, 2
	push	edx
	push	0
	call	esi
	test	eax, eax
	mov	DWORD PTR [edi+920], eax
	jne	SHORT $L78666
	pop	edi
	pop	esi

; 259  :    		return S_FALSE;

	mov	eax, 1
	pop	ebx

; 292  : }

	ret	8
$L78666:

; 260  : 	if (T.LayerGrains) GlobalFree(T.LayerGrains);

	mov	eax, DWORD PTR [edi+924]
	test	eax, eax
	je	SHORT $L78668
	push	eax
	call	ebx
$L78668:

; 261  : 	if (!(T.LayerGrains = (IntGrain **)GlobalAlloc(GMEM_FIXED, sizeof(IntGrain *) * T.LayerNum)))

	mov	eax, DWORD PTR [edi+136]
	shl	eax, 2
	push	eax
	push	0
	call	esi
	test	eax, eax
	mov	DWORD PTR [edi+924], eax
	jne	SHORT $L78671
	pop	edi
	pop	esi

; 262  :    		return S_FALSE;

	mov	eax, 1
	pop	ebx

; 292  : }

	ret	8
$L78671:

; 263  : 	T.CellsInLayer = T.CellNumX * T.CellNumY;

	mov	ecx, DWORD PTR [edi+148]
	imul	ecx, DWORD PTR [edi+144]
	mov	DWORD PTR [edi+932], ecx

; 264  : 	if (T.CellSpace) GlobalFree(T.CellSpace);

	mov	eax, DWORD PTR [edi+928]
	test	eax, eax
	je	SHORT $L78673
	push	eax
	call	ebx
$L78673:

; 265  : 	if (!(T.CellSpace = (Cell *)GlobalAlloc(GMEM_FIXED, sizeof(Cell) * (T.CellsInLayer)*(T.LayerNum))))

	mov	edx, DWORD PTR [edi+932]
	imul	edx, DWORD PTR [edi+136]
	shl	edx, 3
	push	edx
	push	0
	call	esi
	test	eax, eax
	mov	DWORD PTR [edi+928], eax
	jne	SHORT $L78676
	pop	edi
	pop	esi

; 266  :    		return S_FALSE;

	mov	eax, 1
	pop	ebx

; 292  : }

	ret	8
$L78676:

; 267  : 	SetEvent(HTerminate);

	mov	eax, DWORD PTR [edi+992]
	push	ebp
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	mov	ebp, DWORD PTR __imp__WaitForSingleObject@8
	mov	ebx, DWORD PTR __imp__CloseHandle@4
	lea	esi, DWORD PTR [edi+1064]
	mov	DWORD PTR 8+[esp+12], 7
$L78679:

; 268  : 	int i;
; 269  : 	for (i = 1; i < MAX_PROCESSORS; i++)
; 270  : 		if (ThreadInfo[i].HThread)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $L78680

; 271  : 		{
; 272  : 			WaitForSingleObject(ThreadInfo[i].HThread, INFINITE);

	push	-1
	push	eax
	call	ebp

; 273  : 			CloseHandle(ThreadInfo[i].HThread);

	mov	ecx, DWORD PTR [esi]
	push	ecx
	call	ebx

; 274  : 			CloseHandle(ThreadInfo[i].HFinished);

	mov	edx, DWORD PTR [esi-4]
	push	edx
	call	ebx

; 275  : 			ThreadInfo[i].HThread = 0;

	mov	DWORD PTR [esi], 0

; 276  : 			ThreadInfo[i].HFinished = 0;

	mov	DWORD PTR [esi-4], 0
$L78680:
	mov	eax, DWORD PTR 8+[esp+12]
	add	esi, 40					; 00000028H
	dec	eax
	mov	DWORD PTR 8+[esp+12], eax
	jne	SHORT $L78679

; 277  : 			};
; 278  : 	ResetEvent(HTerminate);

	mov	eax, DWORD PTR [edi+992]
	mov	esi, DWORD PTR __imp__ResetEvent@4
	push	eax
	call	esi

; 279  : 	ResetEvent(HStart);

	mov	ecx, DWORD PTR [edi+988]
	push	ecx
	call	esi

; 280  : 	ResetEvent(HReset);

	mov	edx, DWORD PTR [edi+996]
	push	edx
	call	esi

; 281  : 	ThreadInfo[0].ThreadIndex = 0;

	mov	DWORD PTR [edi+1004], 0

; 282  : 	for (i = 1; i < T.Processors; i++)

	mov	eax, DWORD PTR [edi+892]
	mov	ebp, 1
	cmp	eax, ebp
	jle	SHORT $L78685

; 283  : 	{
; 284  : 		unsigned dummy;
; 285  : 		ThreadInfo[i].HFinished = CreateEvent(NULL, FALSE, FALSE, NULL);
; 286  : 		ThreadInfo[i].pThis = this;

	lea	ebx, DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi+1040]
$L78683:
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	mov	DWORD PTR [esi+20], eax

; 287  : 		ThreadInfo[i].ThreadIndex = i;
; 288  : 		ThreadInfo[i].HThread = (HANDLE)_beginthreadex(NULL, 0, TrackerThreadHook, ThreadInfo + i, 0, &dummy);

	lea	eax, DWORD PTR _dummy$78686[esp+12]
	push	eax
	push	0
	push	esi
	push	OFFSET FLAT:?TrackerThreadHook@CSmartTrackerClass@@KGIPAX@Z ; CSmartTrackerClass::TrackerThreadHook
	push	0
	mov	DWORD PTR [esi], ebx
	push	0
	mov	DWORD PTR [esi+4], ebp
	call	DWORD PTR __imp___beginthreadex
	add	esp, 24					; 00000018H
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR [edi+892]
	inc	ebp
	add	esi, 40					; 00000028H
	cmp	ebp, eax
	jl	SHORT $L78683
$L78685:

; 289  : 		}
; 290  : 	OkToRun = true;

	mov	BYTE PTR [edi+984], 1
	pop	ebp
	pop	edi
	pop	esi

; 291  : 	return S_OK;

	xor	eax, eax
	pop	ebx

; 292  : }

	ret	8
?SetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z ENDP ; CSmartTrackerClass::SetConfig
_TEXT	ENDS
PUBLIC	?GetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z ; CSmartTrackerClass::GetConfig
PUBLIC	?PutData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z ; PutData
;	COMDAT ?GetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z
_TEXT	SEGMENT
_pConfig$ = 12
_this$ = 8
?GetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z PROC NEAR ; CSmartTrackerClass::GetConfig, COMDAT

; 296  : 	// TODO: Add your implementation code here
; 297  : 
; 298  : 	if (::PutData(*pConfig, ConfigDataN, ConfigDataQDI, &T) != ConfigDataN) return S_FALSE;

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR _pConfig$[esp-4]
	add	eax, 132				; 00000084H
	push	eax
	push	OFFSET FLAT:?ConfigDataQDI@@3PAUQueryDataInfo@@A ; ConfigDataQDI
	push	196					; 000000c4H
	push	ecx
	call	?PutData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z ; PutData
	add	esp, 16					; 00000010H
	xor	edx, edx
	cmp	eax, 196				; 000000c4H
	setne	dl
	mov	eax, edx

; 299  : 	return S_OK;	
; 300  : }

	ret	8
?GetConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@@Z ENDP ; CSmartTrackerClass::GetConfig
_TEXT	ENDS
PUBLIC	?EditConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@J@Z ; CSmartTrackerClass::EditConfig
PUBLIC	??1CEditConfig@@UAE@XZ				; CEditConfig::~CEditConfig
PUBLIC	??1AFX_MAINTAIN_STATE2@@QAE@XZ			; AFX_MAINTAIN_STATE2::~AFX_MAINTAIN_STATE2
EXTRN	??1CListCtrl@@UAE@XZ:NEAR			; CListCtrl::~CListCtrl
EXTRN	??0CEditConfig@@QAE@PAVCSmartTrackerClass@@PAVCWnd@@@Z:NEAR ; CEditConfig::CEditConfig
EXTRN	?AfxGetStaticModuleState@@YGPAVAFX_MODULE_STATE@@XZ:NEAR ; AfxGetStaticModuleState
EXTRN	??0AFX_MAINTAIN_STATE2@@QAE@PAVAFX_MODULE_STATE@@@Z:NEAR ; AFX_MAINTAIN_STATE2::AFX_MAINTAIN_STATE2
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??1CString@@QAE@XZ:NEAR				; CString::~CString
EXTRN	??1CWnd@@UAE@XZ:NEAR				; CWnd::~CWnd
EXTRN	??0CWnd@@QAE@XZ:NEAR				; CWnd::CWnd
EXTRN	?Attach@CWnd@@QAEHPAUHWND__@@@Z:NEAR		; CWnd::Attach
EXTRN	?Detach@CWnd@@QAEPAUHWND__@@XZ:NEAR		; CWnd::Detach
EXTRN	?DoModal@CDialog@@UAEHXZ:NEAR			; CDialog::DoModal
EXTRN	??1CDialog@@UAE@XZ:NEAR				; CDialog::~CDialog
;	COMDAT xdata$x
; File D:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE\afxwin1.inl
xdata$x	SEGMENT
$T80112	DD	019930520H
	DD	07H
	DD	FLAT:$T80115
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T80115	DD	0ffffffffH
	DD	FLAT:$L80088
	DD	00H
	DD	FLAT:$L80089
	DD	01H
	DD	FLAT:$L80090
	DD	01H
	DD	FLAT:$L80092
	DD	03H
	DD	FLAT:$L80093
	DD	01H
	DD	FLAT:$L80101
	DD	05H
	DD	FLAT:$L80102
xdata$x	ENDS
;	COMDAT ?EditConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@J@Z
_TEXT	SEGMENT
__$EHRec$ = -12
_pConfig$ = 12
_hWnd$ = 16
_this$ = 8
__ctlState$ = -1044
_Owner$ = -1036
_MyDlg$ = -972
?EditConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@J@Z PROC NEAR ; CSmartTrackerClass::EditConfig, COMDAT

; 303  : {

	push	-1
	push	$L80113
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 1032				; 00000408H
	push	esi

; 304  : 	// TODO: Add your implementation code here
; 305  : 	AFX_MANAGE_STATE(AfxGetStaticModuleState())

	call	?AfxGetStaticModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetStaticModuleState
	push	eax
	lea	ecx, DWORD PTR __ctlState$[esp+1052]
	call	??0AFX_MAINTAIN_STATE2@@QAE@PAVAFX_MODULE_STATE@@@Z ; AFX_MAINTAIN_STATE2::AFX_MAINTAIN_STATE2

; 306  : 	CWnd Owner;

	lea	ecx, DWORD PTR _Owner$[esp+1048]
	mov	DWORD PTR __$EHRec$[esp+1056], 0
	call	??0CWnd@@QAE@XZ				; CWnd::CWnd

; 307  : 	Owner.Attach((HWND)hWnd);

	mov	eax, DWORD PTR _hWnd$[esp+1044]
	lea	ecx, DWORD PTR _Owner$[esp+1048]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1060], 1
	call	?Attach@CWnd@@QAEHPAUHWND__@@@Z		; CWnd::Attach

; 308  : 	CEditConfig MyDlg(this, &Owner);

	lea	ecx, DWORD PTR _Owner$[esp+1048]
	mov	edx, DWORD PTR _this$[esp+1044]
	push	ecx
	add	edx, -4					; fffffffcH
	lea	ecx, DWORD PTR _MyDlg$[esp+1052]
	push	edx
	call	??0CEditConfig@@QAE@PAVCSmartTrackerClass@@PAVCWnd@@@Z ; CEditConfig::CEditConfig

; 309  : 
; 310  : 	GetData(*pConfig, ConfigDataN, ConfigDataQDI, &MyDlg.C, true);

	mov	esi, DWORD PTR _pConfig$[esp+1044]
	lea	eax, DWORD PTR _MyDlg$[esp+1144]
	push	1
	push	eax
	push	OFFSET FLAT:?ConfigDataQDI@@3PAUQueryDataInfo@@A ; ConfigDataQDI
	push	196					; 000000c4H
	push	esi
	mov	BYTE PTR __$EHRec$[esp+1076], 2
	call	?GetData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX_N@Z ; GetData
	add	esp, 20					; 00000014H

; 311  : 
; 312  : 	if (MyDlg.DoModal() == IDOK)

	lea	ecx, DWORD PTR _MyDlg$[esp+1048]
	call	?DoModal@CDialog@@UAEHXZ		; CDialog::DoModal
	cmp	eax, 1
	jne	SHORT $L78705

; 313  : 	{
; 314  : 		::PutData(*pConfig, ConfigDataN, ConfigDataQDI, &MyDlg.C);

	lea	ecx, DWORD PTR _MyDlg$[esp+1144]
	push	ecx
	push	OFFSET FLAT:?ConfigDataQDI@@3PAUQueryDataInfo@@A ; ConfigDataQDI
	push	196					; 000000c4H
	push	esi
	call	?PutData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z ; PutData
	add	esp, 16					; 00000010H

; 315  : 		Owner.Detach();

	lea	ecx, DWORD PTR _Owner$[esp+1048]
	call	?Detach@CWnd@@QAEPAUHWND__@@XZ		; CWnd::Detach

; 316  : 		return S_OK;

	lea	ecx, DWORD PTR _MyDlg$[esp+2000]
	mov	BYTE PTR __$EHRec$[esp+1056], 4
	call	??1CString@@QAE@XZ			; CString::~CString
	lea	ecx, DWORD PTR _MyDlg$[esp+1928]
	mov	BYTE PTR __$EHRec$[esp+1056], 3
	call	??1CListCtrl@@UAE@XZ			; CListCtrl::~CListCtrl
	lea	ecx, DWORD PTR _MyDlg$[esp+1048]
	mov	BYTE PTR __$EHRec$[esp+1056], 1
	call	??1CDialog@@UAE@XZ			; CDialog::~CDialog
	lea	ecx, DWORD PTR _Owner$[esp+1048]
	mov	BYTE PTR __$EHRec$[esp+1056], 0
	call	??1CWnd@@UAE@XZ				; CWnd::~CWnd
	mov	edx, DWORD PTR __ctlState$[esp+1052]
	mov	eax, DWORD PTR __ctlState$[esp+1048]
	mov	DWORD PTR [edx+4], eax
	xor	eax, eax
	jmp	SHORT $L78700
$L78705:

; 317  : 		};
; 318  : 	Owner.Detach();

	lea	ecx, DWORD PTR _Owner$[esp+1048]
	call	?Detach@CWnd@@QAEPAUHWND__@@XZ		; CWnd::Detach

; 319  : 	return S_FALSE;

	lea	ecx, DWORD PTR _MyDlg$[esp+2000]
	mov	BYTE PTR __$EHRec$[esp+1056], 6
	call	??1CString@@QAE@XZ			; CString::~CString
	lea	ecx, DWORD PTR _MyDlg$[esp+1928]
	mov	BYTE PTR __$EHRec$[esp+1056], 5
	call	??1CListCtrl@@UAE@XZ			; CListCtrl::~CListCtrl
	lea	ecx, DWORD PTR _MyDlg$[esp+1048]
	mov	BYTE PTR __$EHRec$[esp+1056], 1
	call	??1CDialog@@UAE@XZ			; CDialog::~CDialog
	lea	ecx, DWORD PTR _Owner$[esp+1048]
	mov	BYTE PTR __$EHRec$[esp+1056], 0
	call	??1CWnd@@UAE@XZ				; CWnd::~CWnd
	mov	ecx, DWORD PTR __ctlState$[esp+1052]
	mov	edx, DWORD PTR __ctlState$[esp+1048]
	mov	eax, 1
	mov	DWORD PTR [ecx+4], edx
$L78700:

; 320  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+1048]
	pop	esi
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 1044				; 00000414H
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L80088:
	lea	ecx, DWORD PTR __ctlState$[ebp]
	jmp	??1AFX_MAINTAIN_STATE2@@QAE@XZ		; AFX_MAINTAIN_STATE2::~AFX_MAINTAIN_STATE2
$L80089:
	lea	ecx, DWORD PTR _Owner$[ebp]
	jmp	??1CWnd@@UAE@XZ				; CWnd::~CWnd
$L80090:
	lea	ecx, DWORD PTR _MyDlg$[ebp]
	jmp	??1CEditConfig@@UAE@XZ			; CEditConfig::~CEditConfig
$L80092:
	lea	ecx, DWORD PTR _MyDlg$[ebp]
	jmp	??1CDialog@@UAE@XZ			; CDialog::~CDialog
$L80093:
	lea	ecx, DWORD PTR _MyDlg$[ebp+880]
	jmp	??1CListCtrl@@UAE@XZ			; CListCtrl::~CListCtrl
$L80101:
	lea	ecx, DWORD PTR _MyDlg$[ebp]
	jmp	??1CDialog@@UAE@XZ			; CDialog::~CDialog
$L80102:
	lea	ecx, DWORD PTR _MyDlg$[ebp+880]
	jmp	??1CListCtrl@@UAE@XZ			; CListCtrl::~CListCtrl
$L80113:
	mov	eax, OFFSET FLAT:$T80112
	jmp	___CxxFrameHandler
text$x	ENDS
?EditConfig@CSmartTrackerClass@@UAGJPAUSySalConfig@@J@Z ENDP ; CSmartTrackerClass::EditConfig
;	COMDAT ??1AFX_MAINTAIN_STATE2@@QAE@XZ
_TEXT	SEGMENT
??1AFX_MAINTAIN_STATE2@@QAE@XZ PROC NEAR		; AFX_MAINTAIN_STATE2::~AFX_MAINTAIN_STATE2, COMDAT

; 41   : 	{  m_pThreadState->m_pModuleState = m_pPrevModuleState; }

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
	ret	0
??1AFX_MAINTAIN_STATE2@@QAE@XZ ENDP			; AFX_MAINTAIN_STATE2::~AFX_MAINTAIN_STATE2
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T80127	DD	019930520H
	DD	02H
	DD	FLAT:$T80129
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T80129	DD	0ffffffffH
	DD	FLAT:$L80123
	DD	00H
	DD	FLAT:$L80124
xdata$x	ENDS
;	COMDAT ??1CEditConfig@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1CEditConfig@@UAE@XZ PROC NEAR			; CEditConfig::~CEditConfig, COMDAT
	push	-1
	push	$L80128
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	lea	ecx, DWORD PTR [esi+952]
	mov	DWORD PTR __$EHRec$[esp+28], 1
	call	??1CString@@QAE@XZ			; CString::~CString
	lea	ecx, DWORD PTR [esi+880]
	mov	BYTE PTR __$EHRec$[esp+28], 0
	call	??1CListCtrl@@UAE@XZ			; CListCtrl::~CListCtrl
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	call	??1CDialog@@UAE@XZ			; CDialog::~CDialog
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	pop	esi
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L80123:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDialog@@UAE@XZ			; CDialog::~CDialog
$L80124:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 880				; 00000370H
	jmp	??1CListCtrl@@UAE@XZ			; CListCtrl::~CListCtrl
$L80128:
	mov	eax, OFFSET FLAT:$T80127
	jmp	___CxxFrameHandler
text$x	ENDS
??1CEditConfig@@UAE@XZ ENDP				; CEditConfig::~CEditConfig
PUBLIC	?EnableMonitor@CSmartTrackerClass@@UAGJE@Z	; CSmartTrackerClass::EnableMonitor
;	COMDAT ?EnableMonitor@CSmartTrackerClass@@UAGJE@Z
_TEXT	SEGMENT
_bEnable$ = 12
?EnableMonitor@CSmartTrackerClass@@UAGJE@Z PROC NEAR	; CSmartTrackerClass::EnableMonitor, COMDAT

; 324  : 	// TODO: Add your implementation code here
; 325  : 
; 326  : 	return (bEnable) ? S_FALSE : S_OK;

	mov	cl, BYTE PTR _bEnable$[esp-4]
	xor	eax, eax
	test	cl, cl
	setne	al

; 327  : }

	ret	8
?EnableMonitor@CSmartTrackerClass@@UAGJE@Z ENDP		; CSmartTrackerClass::EnableMonitor
_TEXT	ENDS
PUBLIC	?GetNumberOfConnections@CSmartTrackerClass@@UAGJPAH@Z ; CSmartTrackerClass::GetNumberOfConnections
;	COMDAT ?GetNumberOfConnections@CSmartTrackerClass@@UAGJPAH@Z
_TEXT	SEGMENT
_pNumber$ = 12
?GetNumberOfConnections@CSmartTrackerClass@@UAGJPAH@Z PROC NEAR ; CSmartTrackerClass::GetNumberOfConnections, COMDAT

; 331  : 	// TODO: Add your implementation code here
; 332  : 
; 333  : 	*pNumber = 0;

	mov	eax, DWORD PTR _pNumber$[esp-4]
	mov	DWORD PTR [eax], 0

; 334  : 	return S_OK;

	xor	eax, eax

; 335  : }

	ret	8
?GetNumberOfConnections@CSmartTrackerClass@@UAGJPAH@Z ENDP ; CSmartTrackerClass::GetNumberOfConnections
_TEXT	ENDS
PUBLIC	?SetConnection@CSmartTrackerClass@@UAGJHUSySalConnection@@@Z ; CSmartTrackerClass::SetConnection
;	COMDAT ?SetConnection@CSmartTrackerClass@@UAGJHUSySalConnection@@@Z
_TEXT	SEGMENT
?SetConnection@CSmartTrackerClass@@UAGJHUSySalConnection@@@Z PROC NEAR ; CSmartTrackerClass::SetConnection, COMDAT

; 339  : 	// TODO: Add your implementation code here
; 340  : 
; 341  : 	return E_NOTIMPL;

	mov	eax, -2147467263			; 80004001H

; 342  : }

	ret	80					; 00000050H
?SetConnection@CSmartTrackerClass@@UAGJHUSySalConnection@@@Z ENDP ; CSmartTrackerClass::SetConnection
_TEXT	ENDS
PUBLIC	?GetConnection@CSmartTrackerClass@@UAGJHPAUSySalConnection@@@Z ; CSmartTrackerClass::GetConnection
;	COMDAT ?GetConnection@CSmartTrackerClass@@UAGJHPAUSySalConnection@@@Z
_TEXT	SEGMENT
?GetConnection@CSmartTrackerClass@@UAGJHPAUSySalConnection@@@Z PROC NEAR ; CSmartTrackerClass::GetConnection, COMDAT

; 346  : 	// TODO: Add your implementation code here
; 347  : 
; 348  : 	return E_NOTIMPL;

	mov	eax, -2147467263			; 80004001H

; 349  : }

	ret	12					; 0000000cH
?GetConnection@CSmartTrackerClass@@UAGJHPAUSySalConnection@@@Z ENDP ; CSmartTrackerClass::GetConnection
_TEXT	ENDS
PUBLIC	?GetIcon@CSmartTrackerClass@@UAGJHPAJ@Z		; CSmartTrackerClass::GetIcon
EXTRN	?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:NEAR ; AfxGetModuleState
EXTRN	__imp__LoadImageA@24:NEAR
;	COMDAT xdata$x
; File D:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE\afxwin1.inl
xdata$x	SEGMENT
$T80160	DD	019930520H
	DD	01H
	DD	FLAT:$T80163
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T80163	DD	0ffffffffH
	DD	FLAT:$L80144
xdata$x	ENDS
;	COMDAT ?GetIcon@CSmartTrackerClass@@UAGJHPAJ@Z
_TEXT	SEGMENT
__$EHRec$ = -12
_n$ = 12
_pHICON$ = 16
__ctlState$ = -20
?GetIcon@CSmartTrackerClass@@UAGJHPAJ@Z PROC NEAR	; CSmartTrackerClass::GetIcon, COMDAT

; 352  : {

	push	-1
	push	$L80161
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8

; 353  : 	// TODO: Add your implementation code here
; 354  : 	AFX_MANAGE_STATE(AfxGetStaticModuleState())

	call	?AfxGetStaticModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetStaticModuleState
	push	eax
	lea	ecx, DWORD PTR __ctlState$[esp+24]
	call	??0AFX_MAINTAIN_STATE2@@QAE@PAVAFX_MODULE_STATE@@@Z ; AFX_MAINTAIN_STATE2::AFX_MAINTAIN_STATE2

; 355  : 
; 356  : 	HANDLE HTemp = 0;
; 357  : 	switch (n)
; 358  : 	{

	mov	eax, DWORD PTR _n$[esp+16]
	mov	DWORD PTR __$EHRec$[esp+28], 0
	sub	eax, 0
	je	SHORT $L78746
	dec	eax
	je	SHORT $L78750

; 364  : 
; 365  : 		default:	return E_INVALIDARG;

	mov	eax, DWORD PTR __ctlState$[esp+24]
	mov	ecx, DWORD PTR __ctlState$[esp+20]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, -2147024809			; 80070057H

; 369  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	ret	12					; 0000000cH
$L78750:

; 360  : 					break;
; 361  : 
; 362  : 		case 1:		HTemp = LoadImage(AfxGetResourceHandle(), MAKEINTRESOURCE(IDI_ICON64), IMAGE_ICON, 64, 64, LR_SHARED);

	call	?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState
	mov	eax, DWORD PTR [eax+12]
	push	32768					; 00008000H
	push	64					; 00000040H
	push	64					; 00000040H
	push	1
	push	202					; 000000caH

; 363  : 					break;

	jmp	SHORT $L80162
$L78746:

; 359  : 		case 0:		HTemp = LoadImage(AfxGetResourceHandle(), MAKEINTRESOURCE(IDI_ICON32), IMAGE_ICON, 32, 32, LR_SHARED);

	call	?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState
	mov	eax, DWORD PTR [eax+12]
	push	32768					; 00008000H
	push	32					; 00000020H
	push	32					; 00000020H
	push	1
	push	201					; 000000c9H
$L80162:
	push	eax
	call	DWORD PTR __imp__LoadImageA@24

; 366  : 		};
; 367  : 	*pHICON = (HSySalHICON)HTemp;

	mov	edx, DWORD PTR _pHICON$[esp+16]

; 368  : 	return S_OK;	

	mov	ecx, DWORD PTR __ctlState$[esp+20]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR __ctlState$[esp+24]
	mov	DWORD PTR [eax+4], ecx

; 369  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	xor	eax, eax
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L80144:
	lea	ecx, DWORD PTR __ctlState$[ebp]
	jmp	??1AFX_MAINTAIN_STATE2@@QAE@XZ		; AFX_MAINTAIN_STATE2::~AFX_MAINTAIN_STATE2
$L80161:
	mov	eax, OFFSET FLAT:$T80160
	jmp	___CxxFrameHandler
text$x	ENDS
?GetIcon@CSmartTrackerClass@@UAGJHPAJ@Z ENDP		; CSmartTrackerClass::GetIcon
PUBLIC	?GetClassNameA@CSmartTrackerClass@@UAGJQAD@Z	; CSmartTrackerClass::GetClassNameA
PUBLIC	??_C@_0BA@EDCG@Smart?5Tracker?55?$AA@		; `string'
;	COMDAT ??_C@_0BA@EDCG@Smart?5Tracker?55?$AA@
; File D:\SySal2\SmartTracker5\SmartTrackerClass.cpp
_DATA	SEGMENT
??_C@_0BA@EDCG@Smart?5Tracker?55?$AA@ DB 'Smart Tracker 5', 00H ; `string'
_DATA	ENDS
;	COMDAT ?GetClassNameA@CSmartTrackerClass@@UAGJQAD@Z
_TEXT	SEGMENT
_name$ = 12
?GetClassNameA@CSmartTrackerClass@@UAGJQAD@Z PROC NEAR	; CSmartTrackerClass::GetClassNameA, COMDAT

; 373  : 	// TODO: Add your implementation code here
; 374  : 	
; 375  : 	strncpy(name, "Smart Tracker 5", SYSAL_MAX_CONN_NAME_LEN);

	mov	eax, DWORD PTR _name$[esp-4]
	push	64					; 00000040H
	push	OFFSET FLAT:??_C@_0BA@EDCG@Smart?5Tracker?55?$AA@ ; `string'
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH

; 376  : 	return S_OK;

	xor	eax, eax

; 377  : }

	ret	8
?GetClassNameA@CSmartTrackerClass@@UAGJQAD@Z ENDP	; CSmartTrackerClass::GetClassNameA
_TEXT	ENDS
PUBLIC	?SyncExec@CSmartTrackerClass@@UAGJXZ		; CSmartTrackerClass::SyncExec
;	COMDAT ?SyncExec@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT
?SyncExec@CSmartTrackerClass@@UAGJXZ PROC NEAR		; CSmartTrackerClass::SyncExec, COMDAT

; 381  : 	// TODO: Add your implementation code here
; 382  : 
; 383  : 	return E_NOTIMPL;

	mov	eax, -2147467263			; 80004001H

; 384  : }

	ret	4
?SyncExec@CSmartTrackerClass@@UAGJXZ ENDP		; CSmartTrackerClass::SyncExec
_TEXT	ENDS
PUBLIC	?AsyncExec@CSmartTrackerClass@@UAGJJ@Z		; CSmartTrackerClass::AsyncExec
;	COMDAT ?AsyncExec@CSmartTrackerClass@@UAGJJ@Z
_TEXT	SEGMENT
_HNotifyStatusChangeEvent$ = 12
_this$ = 8
?AsyncExec@CSmartTrackerClass@@UAGJJ@Z PROC NEAR	; CSmartTrackerClass::AsyncExec, COMDAT

; 388  : 	// TODO: Add your implementation code here
; 389  : 
; 390  : 	HStatusChangeEvent = (HANDLE)HNotifyStatusChangeEvent;

	mov	eax, DWORD PTR _HNotifyStatusChangeEvent$[esp-4]
	mov	ecx, DWORD PTR _this$[esp-4]

; 391  : 	if (HStatusChangeEvent) SetEvent(HStatusChangeEvent);

	test	eax, eax
	mov	DWORD PTR [ecx+96], eax
	je	SHORT $L80172
	push	eax
	call	DWORD PTR __imp__SetEvent@4
$L80172:

; 392  : 	return E_NOTIMPL;

	mov	eax, -2147467263			; 80004001H

; 393  : }

	ret	8
?AsyncExec@CSmartTrackerClass@@UAGJJ@Z ENDP		; CSmartTrackerClass::AsyncExec
_TEXT	ENDS
PUBLIC	?AsyncCheckStatus@CSmartTrackerClass@@UAGJPAJ@Z	; CSmartTrackerClass::AsyncCheckStatus
;	COMDAT ?AsyncCheckStatus@CSmartTrackerClass@@UAGJPAJ@Z
_TEXT	SEGMENT
_pStatus$ = 12
?AsyncCheckStatus@CSmartTrackerClass@@UAGJPAJ@Z PROC NEAR ; CSmartTrackerClass::AsyncCheckStatus, COMDAT

; 397  : 	// TODO: Add your implementation code here
; 398  : 	
; 399  : 	*pStatus = SYSAL_ASYNC_STATUS_IDLE;

	mov	eax, DWORD PTR _pStatus$[esp-4]
	mov	DWORD PTR [eax], 0

; 400  : 	return S_OK;

	xor	eax, eax

; 401  : }

	ret	8
?AsyncCheckStatus@CSmartTrackerClass@@UAGJPAJ@Z ENDP	; CSmartTrackerClass::AsyncCheckStatus
_TEXT	ENDS
PUBLIC	?AsyncWait@CSmartTrackerClass@@UAGJXZ		; CSmartTrackerClass::AsyncWait
;	COMDAT ?AsyncWait@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT
?AsyncWait@CSmartTrackerClass@@UAGJXZ PROC NEAR		; CSmartTrackerClass::AsyncWait, COMDAT

; 405  : 	// TODO: Add your implementation code here
; 406  : 
; 407  : 	return S_OK;

	xor	eax, eax

; 408  : }

	ret	4
?AsyncWait@CSmartTrackerClass@@UAGJXZ ENDP		; CSmartTrackerClass::AsyncWait
_TEXT	ENDS
PUBLIC	?AsyncPause@CSmartTrackerClass@@UAGJXZ		; CSmartTrackerClass::AsyncPause
;	COMDAT ?AsyncPause@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?AsyncPause@CSmartTrackerClass@@UAGJXZ PROC NEAR	; CSmartTrackerClass::AsyncPause, COMDAT

; 412  : 	// TODO: Add your implementation code here
; 413  : 
; 414  : 	if (HStatusChangeEvent) SetEvent(HStatusChangeEvent);

	mov	eax, DWORD PTR _this$[esp-4]
	mov	eax, DWORD PTR [eax+96]
	test	eax, eax
	je	SHORT $L80179
	push	eax
	call	DWORD PTR __imp__SetEvent@4
$L80179:

; 415  : 	return S_OK;

	xor	eax, eax

; 416  : }

	ret	4
?AsyncPause@CSmartTrackerClass@@UAGJXZ ENDP		; CSmartTrackerClass::AsyncPause
_TEXT	ENDS
PUBLIC	?AsyncStop@CSmartTrackerClass@@UAGJXZ		; CSmartTrackerClass::AsyncStop
;	COMDAT ?AsyncStop@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?AsyncStop@CSmartTrackerClass@@UAGJXZ PROC NEAR		; CSmartTrackerClass::AsyncStop, COMDAT

; 419  : {

	push	esi

; 420  : 	// TODO: Add your implementation code here
; 421  : 
; 422  : 	if (HStatusChangeEvent) 

	mov	esi, DWORD PTR _this$[esp]
	mov	eax, DWORD PTR [esi+96]
	test	eax, eax
	je	SHORT $L80182

; 423  : 	{
; 424  : 		SetEvent(HStatusChangeEvent);

	push	eax
	call	DWORD PTR __imp__SetEvent@4

; 425  : 		HStatusChangeEvent = 0;

	mov	DWORD PTR [esi+96], 0
$L80182:

; 426  : 		};
; 427  : 	return S_OK;

	xor	eax, eax
	pop	esi

; 428  : }

	ret	4
?AsyncStop@CSmartTrackerClass@@UAGJXZ ENDP		; CSmartTrackerClass::AsyncStop
_TEXT	ENDS
PUBLIC	?AsyncResume@CSmartTrackerClass@@UAGJXZ		; CSmartTrackerClass::AsyncResume
;	COMDAT ?AsyncResume@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?AsyncResume@CSmartTrackerClass@@UAGJXZ PROC NEAR	; CSmartTrackerClass::AsyncResume, COMDAT

; 432  : 	// TODO: Add your implementation code here
; 433  : 
; 434  : 	if (HStatusChangeEvent) SetEvent(HStatusChangeEvent);

	mov	eax, DWORD PTR _this$[esp-4]
	mov	eax, DWORD PTR [eax+96]
	test	eax, eax
	je	SHORT $L80185
	push	eax
	call	DWORD PTR __imp__SetEvent@4
$L80185:

; 435  : 	return S_OK;

	xor	eax, eax

; 436  : }

	ret	4
?AsyncResume@CSmartTrackerClass@@UAGJXZ ENDP		; CSmartTrackerClass::AsyncResume
_TEXT	ENDS
PUBLIC	?IsReady@CSmartTrackerClass@@UAGJPAJ0@Z		; CSmartTrackerClass::IsReady
;	COMDAT ?IsReady@CSmartTrackerClass@@UAGJPAJ0@Z
_TEXT	SEGMENT
_pWrongConn$ = 12
_pRetCode$ = 16
?IsReady@CSmartTrackerClass@@UAGJPAJ0@Z PROC NEAR	; CSmartTrackerClass::IsReady, COMDAT

; 440  : 	// TODO: Add your implementation code here
; 441  : 
; 442  : 	*pWrongConn = -1;

	mov	eax, DWORD PTR _pWrongConn$[esp-4]

; 443  : 	*pRetCode = SYSAL_READYSTATUS_READY;

	mov	ecx, DWORD PTR _pRetCode$[esp-4]
	mov	DWORD PTR [eax], -1
	mov	DWORD PTR [ecx], 0

; 444  : 	return S_OK;

	xor	eax, eax

; 445  : }

	ret	12					; 0000000cH
?IsReady@CSmartTrackerClass@@UAGJPAJ0@Z ENDP		; CSmartTrackerClass::IsReady
_TEXT	ENDS
PUBLIC	?StartFilling@CSmartTrackerClass@@UAGJXZ	; CSmartTrackerClass::StartFilling
EXTRN	__fltused:NEAR
;	COMDAT ?StartFilling@CSmartTrackerClass@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?StartFilling@CSmartTrackerClass@@UAGJXZ PROC NEAR	; CSmartTrackerClass::StartFilling, COMDAT

; 449  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 450  : 
; 451  : 	// TODO: Add your implementation code here
; 452  : 	if (!OkToRun) return S_FALSE;

	mov	eax, DWORD PTR _this$[esp-4]
	xor	ecx, ecx
	cmp	BYTE PTR [eax+988], cl
	jne	SHORT $L78810
	mov	eax, 1

; 457  : }

	ret	4
$L78810:

; 453  : 	T.Layer = 0;

	mov	DWORD PTR [eax+976], ecx

; 454  : 	T.NumGrains = 0;

	mov	DWORD PTR [eax+972], ecx

; 455  : 	T.DispX = T.DispY = 0.0f;

	mov	DWORD PTR [eax+984], ecx
	mov	DWORD PTR [eax+980], ecx

; 456  : 	return S_OK;

	xor	eax, eax

; 457  : }

	ret	4
?StartFilling@CSmartTrackerClass@@UAGJXZ ENDP		; CSmartTrackerClass::StartFilling
_TEXT	ENDS
PUBLIC	__real@4@00000000000000000000
PUBLIC	?SetCameraSpec@CSmartTrackerClass@@UAGJUCameraSpec@@@Z ; CSmartTrackerClass::SetCameraSpec
;	COMDAT __real@4@00000000000000000000
; File D:\SySal2\SmartTracker5\SmartTrackerClass.cpp
CONST	SEGMENT
__real@4@00000000000000000000 DD 000000000r	; 0
CONST	ENDS
;	COMDAT ?SetCameraSpec@CSmartTrackerClass@@UAGJUCameraSpec@@@Z
_TEXT	SEGMENT
_Spec$ = 12
_this$ = 8
?SetCameraSpec@CSmartTrackerClass@@UAGJUCameraSpec@@@Z PROC NEAR ; CSmartTrackerClass::SetCameraSpec, COMDAT

; 463  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 464  : 
; 465  : 	// TODO: Add your implementation code here
; 466  : 	if (Spec.PixelToMicronX != 0.f && Spec.PixelToMicronY != 0.f &&
; 467  : 		Spec.Height > 0 && Spec.Width > 0 && Spec.WinHeight > 0 && Spec.WinWidth > 0)

	fld	DWORD PTR _Spec$[esp+20]
	fcomp	DWORD PTR __real@4@00000000000000000000
	sub	esp, 8
	push	ebx
	push	ebp
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	$L78817
	fld	DWORD PTR _Spec$[esp+40]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	$L78817
	mov	eax, DWORD PTR _Spec$[esp+16]
	xor	ebx, ebx
	cmp	eax, ebx
	jbe	$L78817
	cmp	DWORD PTR _Spec$[esp+12], ebx
	jbe	$L78817
	cmp	DWORD PTR _Spec$[esp+32], ebx
	jbe	$L78817
	mov	ebp, DWORD PTR _Spec$[esp+28]
	cmp	ebp, ebx
	jbe	$L78817

; 468  : 	{
; 469  : 		CamSpec = Spec;
; 470  : 		T.PixelToMicronX = Spec.PixelToMicronX;
; 471  : 		T.PixelToMicronY = Spec.PixelToMicronY;
; 472  : 		if (T.PixelToMicronX > 0)

	fld	DWORD PTR _Spec$[esp+36]
	mov	edx, DWORD PTR _this$[esp+12]
	mov	eax, DWORD PTR _Spec$[esp+36]
	fcomp	DWORD PTR __real@4@00000000000000000000
	push	esi
	push	edi
	lea	edi, DWORD PTR [edx+104]
	mov	ecx, 8
	lea	esi, DWORD PTR _Spec$[esp+20]
	mov	DWORD PTR [edx+964], eax
	rep movsd
	fnstsw	ax
	mov	ecx, DWORD PTR _Spec$[esp+48]
	pop	edi
	test	ah, 65					; 00000041H

; 473  : 		{	T.Win.Xmin = Spec.OffX;

	mov	eax, DWORD PTR _Spec$[esp+24]
	mov	DWORD PTR [edx+968], ecx
	pop	esi
	jne	SHORT $L78818
	mov	DWORD PTR -8+[esp+16], eax
	mov	DWORD PTR -8+[esp+20], ebx
	fild	QWORD PTR -8+[esp+16]

; 474  : 			T.Win.Xmax = Spec.OffX + Spec.WinWidth;

	add	eax, ebp
	mov	DWORD PTR -8+[esp+20], ebx
	mov	DWORD PTR -8+[esp+16], eax
	fstp	DWORD PTR [edx+940]
	fild	QWORD PTR -8+[esp+16]
	fstp	DWORD PTR [edx+944]

; 475  : 			}
; 476  : 		else

	jmp	SHORT $L78819
$L78818:

; 477  : 		{	T.Win.Xmax = Spec.OffX;

	mov	DWORD PTR -8+[esp+16], eax
	mov	DWORD PTR -8+[esp+20], ebx
	fild	QWORD PTR -8+[esp+16]

; 478  : 			T.Win.Xmin = Spec.OffX + Spec.WinWidth;

	add	eax, ebp
	mov	DWORD PTR -8+[esp+20], ebx
	mov	DWORD PTR -8+[esp+16], eax
	fstp	DWORD PTR [edx+944]
	fild	QWORD PTR -8+[esp+16]
	fstp	DWORD PTR [edx+940]
$L78819:

; 479  : 			};
; 480  : 		if (T.PixelToMicronY > 0)

	fld	DWORD PTR _Spec$[esp+40]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H

; 481  : 		{  T.Win.Ymin = Spec.OffY;

	mov	eax, DWORD PTR _Spec$[esp+24]
	jne	SHORT $L78820

; 482  : 			T.Win.Ymax = Spec.OffY + Spec.WinHeight;

	mov	ecx, DWORD PTR _Spec$[esp+32]
	mov	DWORD PTR -8+[esp+16], eax
	mov	DWORD PTR -8+[esp+20], ebx
	add	eax, ecx
	fild	QWORD PTR -8+[esp+16]
	mov	DWORD PTR -8+[esp+16], eax
	mov	DWORD PTR -8+[esp+20], ebx
	fstp	DWORD PTR [edx+948]
	fild	QWORD PTR -8+[esp+16]
	fstp	DWORD PTR [edx+952]

; 483  : 			}
; 484  : 		else

	jmp	SHORT $L78821
$L78820:

; 485  : 		{	T.Win.Ymax = Spec.OffY;
; 486  : 			T.Win.Ymin = Spec.OffY + Spec.WinHeight;

	mov	ecx, DWORD PTR _Spec$[esp+32]
	mov	DWORD PTR -8+[esp+16], eax
	mov	DWORD PTR -8+[esp+20], ebx
	add	eax, ecx
	fild	QWORD PTR -8+[esp+16]
	mov	DWORD PTR -8+[esp+16], eax
	mov	DWORD PTR -8+[esp+20], ebx
	fstp	DWORD PTR [edx+952]
	fild	QWORD PTR -8+[esp+16]
	fstp	DWORD PTR [edx+948]
$L78821:

; 487  : 			};
; 488  : 		T.Win.Xmin *= T.PixelToMicronX;

	fld	DWORD PTR _Spec$[esp+36]
	fmul	DWORD PTR [edx+940]
	pop	ebp

; 489  : 		T.Win.Xmax *= T.PixelToMicronX;
; 490  : 		T.Win.Ymin *= T.PixelToMicronY;
; 491  : 		T.Win.Ymax *= T.PixelToMicronY;
; 492  : 		T.DxCell = ((T.Win.Xmax - T.Win.Xmin)/(float)(T.CellNumX));
; 493  : 		T.DyCell = ((T.Win.Ymax - T.Win.Ymin)/(float)(T.CellNumY));
; 494  : 		return S_OK;

	xor	eax, eax
	pop	ebx
	fst	DWORD PTR [edx+940]
	fld	DWORD PTR _Spec$[esp+28]
	fmul	DWORD PTR [edx+944]
	fst	DWORD PTR [edx+944]
	fld	DWORD PTR _Spec$[esp+32]
	fmul	DWORD PTR [edx+948]
	fst	DWORD PTR -8+[esp+8]
	fstp	DWORD PTR [edx+948]
	fld	DWORD PTR _Spec$[esp+32]
	fmul	DWORD PTR [edx+952]
	fst	DWORD PTR 8+[esp+4]
	fstp	DWORD PTR [edx+952]
	fsub	ST(0), ST(1)
	fidiv	DWORD PTR [edx+148]
	fstp	DWORD PTR [edx+956]
	fstp	ST(0)
	fld	DWORD PTR 8+[esp+4]
	fsub	DWORD PTR -8+[esp+8]
	fidiv	DWORD PTR [edx+152]
	fstp	DWORD PTR [edx+960]

; 497  : }

	add	esp, 8
	ret	36					; 00000024H
$L78817:
	pop	ebp

; 495  : 		};
; 496  : 	return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	pop	ebx

; 497  : }

	add	esp, 8
	ret	36					; 00000024H
?SetCameraSpec@CSmartTrackerClass@@UAGJUCameraSpec@@@Z ENDP ; CSmartTrackerClass::SetCameraSpec
_TEXT	ENDS
PUBLIC	?GetCameraSpec@CSmartTrackerClass@@UAGJPAUCameraSpec@@@Z ; CSmartTrackerClass::GetCameraSpec
;	COMDAT ?GetCameraSpec@CSmartTrackerClass@@UAGJPAUCameraSpec@@@Z
_TEXT	SEGMENT
_pSpec$ = 12
_this$ = 8
?GetCameraSpec@CSmartTrackerClass@@UAGJPAUCameraSpec@@@Z PROC NEAR ; CSmartTrackerClass::GetCameraSpec, COMDAT

; 501  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 502  : 
; 503  : 	// TODO: Add your implementation code here
; 504  : 	*pSpec = CamSpec;

	mov	eax, DWORD PTR _this$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR _pSpec$[esp+4]
	lea	esi, DWORD PTR [eax+104]
	mov	ecx, 8
	rep movsd
	pop	edi

; 505  : 	return S_OK;

	xor	eax, eax
	pop	esi

; 506  : }

	ret	8
?GetCameraSpec@CSmartTrackerClass@@UAGJPAUCameraSpec@@@Z ENDP ; CSmartTrackerClass::GetCameraSpec
_TEXT	ENDS
PUBLIC	__real@4@3fff8000000000000000
PUBLIC	?PutClusters@CSmartTrackerClass@@UAGJPAUCluster@@HM@Z ; CSmartTrackerClass::PutClusters
EXTRN	__ftol:NEAR
;	COMDAT __real@4@3fff8000000000000000
; File D:\SySal2\SmartTracker5\SmartTrackerClass.cpp
CONST	SEGMENT
__real@4@3fff8000000000000000 DD 03f800000r	; 1
CONST	ENDS
;	COMDAT ?PutClusters@CSmartTrackerClass@@UAGJPAUCluster@@HM@Z
_TEXT	SEGMENT
_CellsInLayer$ = 8
_CellSpace$ = -56
_Layer$ = -64
_CellOverflow$ = -12
_CurrentGCounter$ = -84
_MaxGrains$ = -36
_CurrDispX$ = -80
_CurrDispY$ = -76
_CurrDispSigmaX$ = -44
_CurrDispSigmaY$ = -40
_DispX$ = -72
_DispY$ = -68
_CX$ = -52
_CY$ = -4
_DX$ = 12
_ReplicaCount$ = -60
_ReplicaDivider$ = -8
_DividerCount$ = -48
_ReplicaRadius$ = -32
$T80206 = -52
$T80207 = 12
$T80215 = -40
$T80216 = 12
_pClusters$ = 12
_CountOfClusters$ = 16
_Z$ = 20
_this$ = 8
_Nc$ = 20
_PixMin$ = -28
_PixMax$ = -24
_PixelToMicronX$ = -16
_PixelToMicronY$ = -20
?PutClusters@CSmartTrackerClass@@UAGJPAUCluster@@HM@Z PROC NEAR ; CSmartTrackerClass::PutClusters, COMDAT

; 509  : {

	sub	esp, 84					; 00000054H
	push	ebx
	push	ebp
	push	esi

; 510  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 511  : 
; 512  : 	// TODO: Add your implementation code here
; 513  : 	int Nc;
; 514  : 	int Icell;
; 515  : 	IntCluster *PClus;
; 516  : 	Cell *PCell;
; 517  : 	IntGrain *PGrain, *PGrainEnd;
; 518  : 	int PixMin = T.PixMin;

	mov	esi, DWORD PTR _this$[esp+92]
	push	edi

; 519  : 	int PixMax = T.PixMax;
; 520  : 	float PixelToMicronX = T.PixelToMicronX;
; 521  : 	float PixelToMicronY = T.PixelToMicronY;
; 522  : 	float PixelToMicronXY = fabs(PixelToMicronX * PixelToMicronY);
; 523  : 	float PixelToMicronX3Y = PixelToMicronXY * PixelToMicronX * PixelToMicronX;
; 524  : 	float PixelToMicronY3X = PixelToMicronXY * PixelToMicronY * PixelToMicronY;
; 525  : 	float PixelToMicronX2Y2 = PixelToMicronXY * PixelToMicronXY;
; 526  : 	int CellsInLayer = T.CellsInLayer;
; 527  : 	Cell *CellSpace = T.CellSpace;
; 528  : 	int Layer = T.Layer;
; 529  : 	int CellOverflow = T.CellOverflow;
; 530  : 	int CurrentGCounter = T.NumGrains;
; 531  : 	int MaxGrains = T.MaxGrains;
; 532  : 	float CurrDispX = 0.0f;

	mov	DWORD PTR _CurrDispX$[esp+100], 0
	mov	edi, DWORD PTR [esi+144]

; 533  : 	float CurrDispY = 0.0f;
; 534  : 	float CurrDispSigmaX = 0.0f;
; 535  : 	float CurrDispSigmaY = 0.0f;
; 536  : 	float DispX = T.DispX;
; 537  : 	float DispY = T.DispY;
; 538  : 	float CX, CY, DX, DY;
; 539  : 	int ReplicaCount = 0;
; 540  : 	int ReplicaDivider = T.ReplicaSampleDivider;

	mov	ebx, DWORD PTR [esi+908]
	mov	eax, DWORD PTR [esi+156]
	mov	DWORD PTR _CellOverflow$[esp+100], edi
	mov	edi, DWORD PTR [esi+972]
	mov	ecx, DWORD PTR [esi+160]
	mov	edx, DWORD PTR [esi+964]
	mov	DWORD PTR _CurrentGCounter$[esp+100], edi
	mov	edi, DWORD PTR [esi+136]
	mov	DWORD PTR _ReplicaDivider$[esp+100], ebx

; 541  : 	int DividerCount;
; 542  : 	float ReplicaRadius = T.ReplicaRadius;

	mov	ebx, DWORD PTR [esi+904]
	mov	DWORD PTR _MaxGrains$[esp+100], edi
	mov	edi, DWORD PTR [esi+980]
	mov	DWORD PTR _PixMin$[esp+100], eax
	mov	eax, DWORD PTR [esi+968]
	mov	DWORD PTR _DispX$[esp+100], edi
	mov	edi, DWORD PTR [esi+984]
	mov	DWORD PTR _ReplicaRadius$[esp+100], ebx

; 543  : 
; 544  : 	if (!OkToRun) return S_FALSE;

	mov	bl, BYTE PTR [esi+988]
	mov	DWORD PTR _PixMax$[esp+100], ecx
	mov	ecx, DWORD PTR [esi+936]
	mov	DWORD PTR _PixelToMicronX$[esp+100], edx
	mov	edx, DWORD PTR [esi+976]
	mov	DWORD PTR _PixelToMicronY$[esp+100], eax
	mov	eax, DWORD PTR [esi+932]
	mov	DWORD PTR _DispY$[esp+100], edi
	xor	edi, edi
	mov	DWORD PTR _CellsInLayer$[esp+96], ecx
	test	bl, bl
	mov	DWORD PTR _CellSpace$[esp+100], eax
	mov	DWORD PTR _Layer$[esp+100], edx
	mov	DWORD PTR _CurrDispY$[esp+100], 0
	mov	DWORD PTR _CurrDispSigmaX$[esp+100], 0
	mov	DWORD PTR _CurrDispSigmaY$[esp+100], 0
	mov	DWORD PTR _ReplicaCount$[esp+100], edi
	jne	SHORT $L78871
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx

; 697  : }

	add	esp, 84					; 00000054H
	ret	16					; 00000010H
$L78871:

; 545  : 
; 546  : 	if (Layer >= T.LayerNum) return S_FALSE;

	cmp	edx, DWORD PTR [esi+140]
	jl	SHORT $L78873
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx

; 697  : }

	add	esp, 84					; 00000054H
	ret	16					; 00000010H
$L78873:

; 547  : 	T.ZLayer[Layer] = Z;

	mov	ebx, DWORD PTR [esi+924]

; 548  : 	for (Icell = 0; Icell < CellsInLayer; Icell++)

	cmp	ecx, edi
	fld	DWORD PTR _Z$[esp+96]
	fstp	DWORD PTR [ebx+edx*4]
	jle	SHORT $L78877
	mov	ebx, edx
	imul	ebx, ecx
	lea	eax, DWORD PTR [eax+ebx*8]
$L78875:

; 549  : 	{	((Cell *)CellSpace)[Layer*CellsInLayer+Icell].FirstC = 0;

	mov	DWORD PTR [eax], edi

; 550  : 		((Cell *)CellSpace)[Layer*CellsInLayer+Icell].Free = 0;

	mov	DWORD PTR [eax+4], edi
	add	eax, 8
	dec	ecx
	jne	SHORT $L78875
$L78877:

; 551  : 		};
; 552  : 
; 553  : 	if (T.ReplicaRadius > 0.0f && Layer > 0)

	fld	DWORD PTR [esi+904]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L78880
	cmp	edx, edi
	jle	$L78880

; 554  : 	{
; 555  : 		for (Nc = DividerCount = 0; (Nc < CountOfClusters) && (CurrentGCounter < MaxGrains); Nc++)

	mov	eax, DWORD PTR _CountOfClusters$[esp+96]
	mov	DWORD PTR _DividerCount$[esp+100], edi
	cmp	eax, edi
	mov	DWORD PTR _Nc$[esp+96], edi
	jle	$L78883
	mov	ecx, DWORD PTR _pClusters$[esp+96]
	lea	edi, DWORD PTR [ecx+4]
$L78881:
	mov	edx, DWORD PTR _MaxGrains$[esp+100]
	mov	eax, DWORD PTR _CurrentGCounter$[esp+100]
	cmp	eax, edx
	jge	$L78883

; 556  : 		{	
; 557  : 			PClus = (IntCluster *)(pClusters + Nc);
; 558  : 			if ((PClus->Area >= PixMin) && (PClus->Area <= PixMax))

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR _PixMin$[esp+100]
	cmp	eax, ecx
	jl	$L78882
	cmp	eax, DWORD PTR _PixMax$[esp+100]
	jg	$L78882

; 559  : 			{	
; 560  : 				Icell = GetCell(PClus->X *= PixelToMicronX, PClus->Y *= PixelToMicronY);

	fld	DWORD PTR _PixelToMicronY$[esp+100]
	fmul	DWORD PTR [edi]
	lea	ebp, DWORD PTR [edi-4]
	fst	DWORD PTR [edi]
	fstp	DWORD PTR $T80207[esp+96]
	fld	DWORD PTR _PixelToMicronX$[esp+100]
	fmul	DWORD PTR [ebp]
	fst	DWORD PTR [ebp]
	fst	DWORD PTR $T80206[esp+100]
	fcomp	DWORD PTR [esi+940]
	fnstsw	ax
	test	ah, 1
	jne	$L78882
	fld	DWORD PTR $T80206[esp+100]
	fcomp	DWORD PTR [esi+944]
	fnstsw	ax
	test	ah, 1
	je	$L78882
	fld	DWORD PTR $T80207[esp+96]
	fcomp	DWORD PTR [esi+948]
	fnstsw	ax
	test	ah, 1
	jne	$L78882
	fld	DWORD PTR $T80207[esp+96]
	fcomp	DWORD PTR [esi+952]
	fnstsw	ax
	test	ah, 1
	je	$L78882
	fld	DWORD PTR $T80207[esp+96]
	fsub	DWORD PTR [esi+948]
	fdiv	DWORD PTR [esi+960]
	call	__ftol
	fld	DWORD PTR $T80206[esp+100]
	fsub	DWORD PTR [esi+940]
	mov	ebx, eax
	imul	ebx, DWORD PTR [esi+148]
	fdiv	DWORD PTR [esi+956]
	call	__ftol
	add	ebx, eax
	js	$L78882
	cmp	ebx, DWORD PTR [esi+936]
	jge	$L78882

; 561  : 				if (Icell >= 0)
; 562  : 				{	
; 563  : 					PCell = (Cell *)(CellSpace+(Layer*CellsInLayer+Icell));

	mov	eax, DWORD PTR _Layer$[esp+100]
	mov	ecx, DWORD PTR _CellSpace$[esp+100]
	imul	eax, DWORD PTR _CellsInLayer$[esp+96]
	add	eax, ebx

; 564  : 					PCell->Free++;

	mov	edx, DWORD PTR [ecx+eax*8+4]
	lea	eax, DWORD PTR [ecx+eax*8]

; 565  : 					CurrentGCounter++;

	mov	ecx, DWORD PTR _CurrentGCounter$[esp+100]
	inc	edx
	inc	ecx
	mov	DWORD PTR [eax+4], edx

; 566  : 					PClus->NextFree = PCell->FirstC;

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _CurrentGCounter$[esp+100], ecx

; 567  : 					PCell->FirstC = PClus;
; 568  : 					if (++DividerCount == ReplicaDivider)

	mov	ecx, DWORD PTR _DividerCount$[esp+100]
	mov	DWORD PTR [edi+8], edx
	mov	edx, DWORD PTR _ReplicaDivider$[esp+100]
	inc	ecx
	cmp	ecx, edx
	mov	DWORD PTR [eax], ebp
	mov	DWORD PTR _DividerCount$[esp+100], ecx
	jne	$L78882

; 569  : 					{
; 570  : 						DividerCount = 0;
; 571  : 						PCell -= CellsInLayer;

	mov	ecx, DWORD PTR _CellsInLayer$[esp+96]
	mov	DWORD PTR _DividerCount$[esp+100], 0

; 572  : 						CX = PClus->X + DispX;

	fld	DWORD PTR _DispX$[esp+100]
	fadd	DWORD PTR [ebp]
	neg	ecx
	lea	eax, DWORD PTR [eax+ecx*8]
	fstp	DWORD PTR _CX$[esp+100]

; 573  : 						CY = PClus->Y + DispY;						
; 574  : 						IntGrain *pRep = PCell->FirstG;

	mov	ecx, DWORD PTR [eax]

; 575  : 						IntGrain *pEnd = pRep + PCell->Free;

	mov	eax, DWORD PTR [eax+4]
	fld	DWORD PTR _DispY$[esp+100]
	fadd	DWORD PTR [edi]
	lea	edx, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [ecx+edx*4]
	fstp	DWORD PTR _CY$[esp+100]

; 576  : 						while (pRep < pEnd)

	cmp	ecx, edx
	jae	SHORT $L78882
$L78892:

; 577  : 						{
; 578  : 							if (fabs(DX = (pRep->Xcm - CX)) < ReplicaRadius && fabs(DY = (pRep->Ycm - CY)) < ReplicaRadius) 

	fld	DWORD PTR [ecx]
	fsub	DWORD PTR _CX$[esp+100]
	fst	DWORD PTR _DX$[esp+96]
	fabs
	fld	DWORD PTR _ReplicaRadius$[esp+100]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L78894
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _CY$[esp+100]
	fld	ST(0)
	fabs
	fld	DWORD PTR _ReplicaRadius$[esp+100]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L80225
	fstp	ST(0)
$L78894:

; 585  : 								break;
; 586  : 								}
; 587  : 							pRep++;

	add	ecx, 20					; 00000014H
	cmp	ecx, edx
	jb	SHORT $L78892

; 577  : 						{
; 578  : 							if (fabs(DX = (pRep->Xcm - CX)) < ReplicaRadius && fabs(DY = (pRep->Ycm - CY)) < ReplicaRadius) 

	jmp	SHORT $L78882
$L80225:

; 579  : 							{
; 580  : 								CurrDispX += DX;

	fld	DWORD PTR _DX$[esp+96]
	fadd	DWORD PTR _CurrDispX$[esp+100]

; 581  : 								CurrDispSigmaX += DX * DX;
; 582  : 								CurrDispY += DY;
; 583  : 								CurrDispSigmaY += DY * DY;
; 584  : 								ReplicaCount++;

	inc	DWORD PTR _ReplicaCount$[esp+100]
	fstp	DWORD PTR _CurrDispX$[esp+100]
	fld	DWORD PTR _DX$[esp+96]
	fmul	DWORD PTR _DX$[esp+96]
	fadd	DWORD PTR _CurrDispSigmaX$[esp+100]
	fstp	DWORD PTR _CurrDispSigmaX$[esp+100]
	fld	ST(0)
	fadd	DWORD PTR _CurrDispY$[esp+100]
	fstp	DWORD PTR _CurrDispY$[esp+100]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fadd	DWORD PTR _CurrDispSigmaY$[esp+100]
	fstp	DWORD PTR _CurrDispSigmaY$[esp+100]
	fstp	ST(0)
$L78882:
	mov	eax, DWORD PTR _Nc$[esp+96]
	mov	ecx, DWORD PTR _CountOfClusters$[esp+96]
	inc	eax
	add	edi, 40					; 00000028H
	cmp	eax, ecx
	mov	DWORD PTR _Nc$[esp+96], eax
	jl	$L78881
$L78883:

; 588  : 							}
; 589  : 						}
; 590  : 					};
; 591  : 				};
; 592  : 			};		
; 593  : 		if (ReplicaCount >= T.MinReplicas)

	mov	eax, DWORD PTR _ReplicaCount$[esp+100]
	mov	ecx, DWORD PTR [esi+912]
	cmp	eax, ecx
	jl	$L78902

; 594  : 		{
; 595  : 			float r2 = 1.0f / (ReplicaCount * ReplicaCount);

	mov	ecx, eax
	imul	ecx, eax
	mov	DWORD PTR 16+[esp+96], ecx
	fild	DWORD PTR 16+[esp+96]
	fdivr	DWORD PTR __real@4@3fff8000000000000000

; 596  : 			CurrDispSigmaX = (ReplicaCount * CurrDispSigmaX - CurrDispX * CurrDispX) * r2;
; 597  : 			CurrDispSigmaY = (ReplicaCount * CurrDispSigmaY - CurrDispY * CurrDispY) * r2;
; 598  : 			float maxspread2 = T.MaxReplicaSpread * T.MaxReplicaSpread;

	fld	DWORD PTR [esi+916]
	fld	ST(0)
	fmulp	ST(1), ST(0)

; 696  : 	return S_OK;

	fild	DWORD PTR _ReplicaCount$[esp+100]
	fst	DWORD PTR 16+[esp+96]
	fmul	DWORD PTR _CurrDispSigmaX$[esp+100]
	fld	DWORD PTR _CurrDispX$[esp+100]
	fmul	DWORD PTR _CurrDispX$[esp+100]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 1
	je	$L80236
	fld	DWORD PTR 16+[esp+96]
	fmul	DWORD PTR _CurrDispSigmaY$[esp+100]
	fld	DWORD PTR _CurrDispY$[esp+100]
	fmul	DWORD PTR _CurrDispY$[esp+100]
	fsubp	ST(1), ST(0)
	fmul	ST(0), ST(2)
	fcomp	ST(1)
	fnstsw	ax
	fstp	ST(0)
	test	ah, 1
	fstp	ST(0)
	je	$L78902
	fld	DWORD PTR _CurrDispX$[esp+100]
	fdiv	DWORD PTR 16+[esp+96]
	fadd	DWORD PTR _DispX$[esp+100]
	fst	DWORD PTR _DispX$[esp+100]
	fstp	DWORD PTR [esi+980]
	fld	DWORD PTR _CurrDispY$[esp+100]
	fdiv	DWORD PTR 16+[esp+96]
	fadd	DWORD PTR _DispY$[esp+100]
	fst	DWORD PTR _DispY$[esp+100]
	fstp	DWORD PTR [esi+984]
	jmp	$L78902
$L78880:

; 600  : 			{
; 601  : 				T.DispX = (DispX += CurrDispX / ReplicaCount);
; 602  : 				T.DispY = (DispY += CurrDispY / ReplicaCount);
; 603  : 				}
; 604  : 			}
; 605  : 		}
; 606  : 	else
; 607  : 	{
; 608  : 		for (Nc = 0; (Nc < CountOfClusters) && (CurrentGCounter < MaxGrains); Nc++)

	mov	eax, DWORD PTR _CountOfClusters$[esp+96]
	mov	DWORD PTR _Nc$[esp+96], edi
	cmp	eax, edi
	jle	$L78902
	mov	edx, DWORD PTR _pClusters$[esp+96]
	lea	ebp, DWORD PTR [edx+4]
$L78900:
	mov	eax, DWORD PTR _MaxGrains$[esp+100]
	mov	ecx, DWORD PTR _CurrentGCounter$[esp+100]
	cmp	ecx, eax
	jge	$L78902

; 609  : 		{	
; 610  : 			PClus = (IntCluster *)(pClusters + Nc);
; 611  : 			if ((PClus->Area >= PixMin) && (PClus->Area <= PixMax))

	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR _PixMin$[esp+100]
	cmp	eax, ecx
	jl	$L78901
	cmp	eax, DWORD PTR _PixMax$[esp+100]
	jg	$L78901

; 612  : 			{	
; 613  : 				Icell = GetCell(PClus->X *= PixelToMicronX, PClus->Y *= PixelToMicronY);

	fld	DWORD PTR _PixelToMicronY$[esp+100]
	fmul	DWORD PTR [ebp]
	lea	ebx, DWORD PTR [ebp-4]
	fst	DWORD PTR [ebp]
	fstp	DWORD PTR $T80216[esp+96]
	fld	DWORD PTR _PixelToMicronX$[esp+100]
	fmul	DWORD PTR [ebx]
	fst	DWORD PTR [ebx]
	fst	DWORD PTR $T80215[esp+100]
	fcomp	DWORD PTR [esi+940]
	fnstsw	ax
	test	ah, 1
	jne	$L78901
	fld	DWORD PTR $T80215[esp+100]
	fcomp	DWORD PTR [esi+944]
	fnstsw	ax
	test	ah, 1
	je	$L78901
	fld	DWORD PTR $T80216[esp+96]
	fcomp	DWORD PTR [esi+948]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L78901
	fld	DWORD PTR $T80216[esp+96]
	fcomp	DWORD PTR [esi+952]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L78901
	fld	DWORD PTR $T80216[esp+96]
	fsub	DWORD PTR [esi+948]
	fdiv	DWORD PTR [esi+960]
	call	__ftol
	fld	DWORD PTR $T80215[esp+100]
	fsub	DWORD PTR [esi+940]
	mov	edi, eax
	imul	edi, DWORD PTR [esi+148]
	fdiv	DWORD PTR [esi+956]
	call	__ftol
	add	edi, eax
	js	SHORT $L78901
	cmp	edi, DWORD PTR [esi+936]
	jge	SHORT $L78901

; 614  : 				if (Icell >= 0)
; 615  : 				{	
; 616  : 					PCell = (Cell *)(CellSpace+(Layer*CellsInLayer+Icell));

	mov	ecx, DWORD PTR _Layer$[esp+100]
	mov	edx, DWORD PTR _CellSpace$[esp+100]
	imul	ecx, DWORD PTR _CellsInLayer$[esp+96]
	add	ecx, edi
	lea	eax, DWORD PTR [edx+ecx*8]

; 617  : 					PCell->Free++;
; 618  : 					CurrentGCounter++;

	mov	ecx, DWORD PTR _CurrentGCounter$[esp+100]
	mov	edx, DWORD PTR [eax+4]
	inc	edx
	inc	ecx
	mov	DWORD PTR _CurrentGCounter$[esp+100], ecx

; 619  : 					PClus->NextFree = PCell->FirstC;

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [ebp+8], ecx

; 620  : 					PCell->FirstC = PClus;

	mov	DWORD PTR [eax], ebx
$L78901:
	mov	eax, DWORD PTR _Nc$[esp+96]
	mov	ecx, DWORD PTR _CountOfClusters$[esp+96]
	inc	eax
	add	ebp, 40					; 00000028H
	cmp	eax, ecx
	mov	DWORD PTR _Nc$[esp+96], eax
	jl	$L78900

; 600  : 			{
; 601  : 				T.DispX = (DispX += CurrDispX / ReplicaCount);
; 602  : 				T.DispY = (DispY += CurrDispY / ReplicaCount);
; 603  : 				}
; 604  : 			}
; 605  : 		}
; 606  : 	else
; 607  : 	{
; 608  : 		for (Nc = 0; (Nc < CountOfClusters) && (CurrentGCounter < MaxGrains); Nc++)

	jmp	SHORT $L78902
$L80236:

; 599  : 			if (CurrDispSigmaX < maxspread2 && CurrDispSigmaY < maxspread2)

	fstp	ST(0)

; 600  : 			{
; 601  : 				T.DispX = (DispX += CurrDispX / ReplicaCount);
; 602  : 				T.DispY = (DispY += CurrDispY / ReplicaCount);
; 603  : 				}
; 604  : 			}
; 605  : 		}
; 606  : 	else
; 607  : 	{
; 608  : 		for (Nc = 0; (Nc < CountOfClusters) && (CurrentGCounter < MaxGrains); Nc++)

	fstp	ST(0)
$L78902:

; 621  : 					};
; 622  : 				};
; 623  : 			};
; 624  : 		};
; 625  : 
; 626  : 	T.LayerGrains[Layer] = PGrain = T.GrainSpace + T.NumGrains;

	mov	eax, DWORD PTR [esi+972]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [esi+920]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+928]
	mov	edx, DWORD PTR _Layer$[esp+100]
	mov	DWORD PTR [eax+edx*4], ecx

; 627  : 	PGrainEnd = T.GrainSpace + MaxGrains;

	mov	eax, DWORD PTR _MaxGrains$[esp+100]

; 628  : 
; 629  : 	if (T.ReplicaRadius > 0.0f && Layer > 0)

	fld	DWORD PTR [esi+904]
	fcomp	DWORD PTR __real@4@00000000000000000000
	mov	edi, DWORD PTR [esi+920]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	ebx, DWORD PTR [edi+eax*4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L78907
	test	edx, edx
	jle	$L78907

; 630  : 	{
; 631  : 		for (Icell = 0; (Icell < CellsInLayer) && (PGrain < PGrainEnd); Icell ++)

	mov	eax, DWORD PTR _CellsInLayer$[esp+96]
	xor	edi, edi
	test	eax, eax
	jle	$L78922
$L78908:
	cmp	ecx, ebx
	jae	$L80232

; 632  : 		{	
; 633  : 			PCell = (Cell *)(CellSpace+(Layer*CellsInLayer+Icell));

	mov	edx, DWORD PTR _Layer$[esp+100]
	mov	eax, DWORD PTR _CellSpace$[esp+100]
	imul	edx, DWORD PTR _CellsInLayer$[esp+96]
	add	edx, edi
	lea	edx, DWORD PTR [eax+edx*8]

; 634  : 			if (PCell->Free)

	mov	eax, DWORD PTR [edx+4]
	test	eax, eax
	je	SHORT $L78918

; 635  : 			{	
; 636  : 				if (PCell->Free < CellOverflow)

	cmp	eax, DWORD PTR _CellOverflow$[esp+100]
	jge	SHORT $L78913

; 637  : 				{	
; 638  : 					PClus = PCell->FirstC;

	mov	eax, DWORD PTR [edx]

; 639  : 					PCell->FirstG = PGrain;

	mov	DWORD PTR [edx], ecx
$L78914:

; 640  : 					do
; 641  : 					{	
; 642  : 						PGrain->Xcm = PClus->X + DispX;

	fld	DWORD PTR _DispX$[esp+100]
	fadd	DWORD PTR [eax]

; 643  : 						PGrain->Ycm = PClus->Y + DispY;
; 644  : 						PGrain->Area = PClus->Area;
; 645  : 						PClus = PClus->NextFree;
; 646  : 						}
; 647  : 					while (((++PGrain) < PGrainEnd) && (PClus));

	add	ecx, 20					; 00000014H
	cmp	ecx, ebx
	fstp	DWORD PTR [ecx-20]
	fld	DWORD PTR _DispY$[esp+100]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx-16]
	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx-12], ebp
	mov	eax, DWORD PTR [eax+12]
	jae	SHORT $L78918
	test	eax, eax
	jne	SHORT $L78914

; 648  : 					}
; 649  : 				else

	jmp	SHORT $L78918
$L78913:

; 650  : 				{	
; 651  : 					PCell->Free = 0;

	mov	DWORD PTR [edx+4], 0

; 652  : 					PCell->FirstG = 0;

	mov	DWORD PTR [edx], 0
$L78918:

; 653  : 					};
; 654  : 				};
; 655  : 			T.NumGrains += PCell->Free;

	mov	edx, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [esi+972]
	mov	eax, DWORD PTR _CellsInLayer$[esp+96]
	add	ebp, edx
	inc	edi
	mov	DWORD PTR [esi+972], ebp
	cmp	edi, eax
	jl	SHORT $L78908

; 656  : 			};		
; 657  : 		}
; 658  : 	else

	jmp	SHORT $L78922
$L78907:

; 659  : 	{
; 660  : 		for (Icell = 0; (Icell < CellsInLayer) && (PGrain < PGrainEnd); Icell ++)

	mov	eax, DWORD PTR _CellsInLayer$[esp+96]
	xor	edi, edi
	test	eax, eax
	jle	SHORT $L78922
$L78920:
	cmp	ecx, ebx
	jae	SHORT $L80232

; 661  : 		{	
; 662  : 			PCell = (Cell *)(CellSpace+(Layer*CellsInLayer+Icell));

	mov	eax, DWORD PTR _Layer$[esp+100]
	mov	edx, DWORD PTR _CellSpace$[esp+100]
	imul	eax, DWORD PTR _CellsInLayer$[esp+96]
	add	eax, edi
	lea	edx, DWORD PTR [edx+eax*8]

; 663  : 			if (PCell->Free)

	mov	eax, DWORD PTR [edx+4]
	test	eax, eax
	je	SHORT $L78930

; 664  : 			{	
; 665  : 				if (PCell->Free < CellOverflow)

	cmp	eax, DWORD PTR _CellOverflow$[esp+100]
	jge	SHORT $L78925

; 666  : 				{	
; 667  : 					PClus = PCell->FirstC;

	mov	eax, DWORD PTR [edx]

; 668  : 					PCell->FirstG = PGrain;

	mov	DWORD PTR [edx], ecx
$L78926:

; 669  : 					do
; 670  : 					{	
; 671  : 						PGrain->Xcm = PClus->X;

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp

; 672  : 						PGrain->Ycm = PClus->Y;

	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp

; 673  : 						PGrain->Area = PClus->Area;

	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], ebp

; 674  : 						PClus = PClus->NextFree;

	mov	eax, DWORD PTR [eax+12]

; 675  : 						}
; 676  : 					while (((++PGrain) < PGrainEnd) && (PClus));

	add	ecx, 20					; 00000014H
	cmp	ecx, ebx
	jae	SHORT $L78930
	test	eax, eax
	jne	SHORT $L78926

; 677  : 					}
; 678  : 				else

	jmp	SHORT $L78930
$L78925:

; 679  : 				{	
; 680  : 					PCell->Free = 0;

	mov	DWORD PTR [edx+4], 0

; 681  : 					PCell->FirstG = 0;

	mov	DWORD PTR [edx], 0
$L78930:

; 682  : 					};
; 683  : 				};
; 684  : 			T.NumGrains += PCell->Free;

	mov	eax, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [esi+972]
	add	ebp, eax
	mov	eax, DWORD PTR _CellsInLayer$[esp+96]
	inc	edi
	mov	DWORD PTR [esi+972], ebp
	cmp	edi, eax
	jl	SHORT $L78920
$L78922:

; 685  : 			};
; 686  : 		}
; 687  : /*
; 688  : 	{
; 689  : 		FILE *f = fopen("c:\\acq\\tk.txt", "at");
; 690  : 		fprintf(f, "%d %f %f %d %f %f\n", T.Layer, T.DispX, T.DispY, ReplicaCount, CurrDispSigmaX, CurrDispSigmaY);
; 691  : 		fclose(f);
; 692  : 		}
; 693  : */
; 694  : 	if (PGrain >= PGrainEnd) return S_FALSE;

	cmp	ecx, ebx
	jb	SHORT $L78931
$L80232:
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx

; 697  : }

	add	esp, 84					; 00000054H
	ret	16					; 00000010H
$L78931:

; 695  : 	T.Layer++;

	mov	eax, DWORD PTR [esi+976]
	pop	edi
	inc	eax
	mov	DWORD PTR [esi+976], eax
	pop	esi
	pop	ebp

; 696  : 	return S_OK;

	xor	eax, eax
	pop	ebx

; 697  : }

	add	esp, 84					; 00000054H
	ret	16					; 00000010H
?PutClusters@CSmartTrackerClass@@UAGJPAUCluster@@HM@Z ENDP ; CSmartTrackerClass::PutClusters
_TEXT	ENDS
PUBLIC	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
PUBLIC	?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack@@AAH@Z ; CSmartTrackerClass::InsertNewTrack
PUBLIC	?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack@@@Z ; CSmartTrackerClass::FinalizeTracks
PUBLIC	__real@4@4002a000000000000000
PUBLIC	?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z	; Cell::FindGrain
PUBLIC	?GetTracks@CSmartTrackerClass@@UAGJPAUTrack@@PAHHH@Z ; CSmartTrackerClass::GetTracks
EXTRN	__imp__hypot:NEAR
EXTRN	__imp__free:NEAR
EXTRN	__imp__malloc:NEAR
;	COMDAT __real@4@4002a000000000000000
; File D:\SySal2\SmartTracker5\SmartTrackerClass.cpp
CONST	SEGMENT
__real@4@4002a000000000000000 DD 041200000r	; 10
CONST	ENDS
;	COMDAT ?GetTracks@CSmartTrackerClass@@UAGJPAUTrack@@PAHHH@Z
_TEXT	SEGMENT
_pSpace$ = 12
_pMaxNumber$ = 16
_StartLayer$ = 20
_EndLayer$ = 24
_this$ = 8
_nx$ = -172
_ny$ = -220
_itr$ = -144
_NTracks$ = -164
_ZLayer$ = -260
_tz$ = -228
_CellsInLayer$ = -88
_CellSpace$ = -252
_MaxSlope$ = -100
_iix$ = -132
_minix$ = -160
_maxix$ = -208
_miniy$ = -224
_maxiy$ = -156
_Slope2$ = -152
_SlopeX$ = -288
_SlopeY$ = -284
_ExpX$ = -256
_ExpY$ = -292
_DirX$ = -268
_DirY$ = -280
_dirtol$ = -272
_ir$ = -192
_idz$ = -180
_pTempGrains$ = -264
_avgdz$ = -176
_tsl$ = -116
_tinf$ = -92
_td$ = -104
_tr$78990 = -64
_tp$78993 = -212
_bp$78994 = -108
_pT$79006 = -248
_pTE$79007 = -112
_gt$79011 = -84
_pB$79019 = -232
_pBE$79020 = -96
_gb$79024 = -20
_pTrg$79034 = -292
_seqlength$79038 = -276
_topv$79047 = -244
_bottomv$79048 = -204
?GetTracks@CSmartTrackerClass@@UAGJPAUTrack@@PAHHH@Z PROC NEAR ; CSmartTrackerClass::GetTracks, COMDAT

; 700  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 292				; 00000124H
	push	ebx

; 701  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 702  : 
; 703  : 	// TODO: Add your implementation code here
; 704  : 
; 705  : 	int nx, ny;
; 706  : 	int lay;
; 707  : 	int itr, ibr;
; 708  : 	int NTracks = 0;
; 709  : 	float *ZLayer = T.ZLayer;

	mov	ebx, DWORD PTR _this$[ebp]
	push	esi
	push	edi

; 710  : 	float tz;
; 711  : 	int CellsInLayer = T.CellsInLayer;

	mov	eax, DWORD PTR [ebx+936]

; 712  : 	Cell *CellSpace = T.CellSpace;

	mov	ecx, DWORD PTR [ebx+932]
	mov	edi, DWORD PTR [ebx+924]
	mov	DWORD PTR _CellsInLayer$[esp+304], eax

; 713  : 	float MaxSlope = T.MaxSlope;
; 714  : 	float MinSlope = T.MinSlope;
; 715  : 
; 716  : 	int ix, iy, iix, iiy, eix, eiy;
; 717  : 	int minix, maxix, miniy, maxiy;
; 718  : 	float Slope2;
; 719  : 	float SlopeX, SlopeY, ExpX, ExpY, DirX, DirY;
; 720  : 	float dirtol;
; 721  : 	int it, ib, ir;
; 722  : 	float idz;
; 723  : 
; 724  : 	nx = T.CellNumX;

	mov	eax, DWORD PTR [ebx+148]
	mov	edx, DWORD PTR [ebx+892]
	mov	DWORD PTR _CellSpace$[esp+304], ecx

; 725  : 	ny = T.CellNumY;

	mov	ecx, DWORD PTR [ebx+152]
	mov	DWORD PTR _nx$[esp+304], eax

; 726  : 
; 727  : 	if (*pMaxNumber <= 0)

	mov	eax, DWORD PTR _pMaxNumber$[ebp]
	mov	DWORD PTR _ny$[esp+304], ecx
	mov	DWORD PTR _NTracks$[esp+304], 0
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ZLayer$[esp+304], edi
	test	ecx, ecx
	mov	DWORD PTR _MaxSlope$[esp+304], edx
	jg	SHORT $L78975

; 728  : 	{
; 729  : 		*pMaxNumber = 0;

	mov	DWORD PTR [eax], 0

; 878  : 	return S_OK;

	xor	eax, eax

; 879  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$L78975:

; 730  : 		return S_OK;
; 731  : 		}
; 732  : 
; 733  : 	if (EndLayer >= T.Layer) EndLayer = T.Layer - 1;

	mov	eax, DWORD PTR [ebx+976]
	mov	esi, DWORD PTR _EndLayer$[ebp]
	cmp	esi, eax
	jl	SHORT $L78977
	dec	eax
	mov	DWORD PTR _EndLayer$[ebp], eax
	mov	esi, eax
$L78977:

; 734  : 
; 735  : 	IntGrain **pTempGrains = (IntGrain **)malloc(sizeof(IntGrain *) * (EndLayer + 1));

	lea	eax, DWORD PTR [esi+1]
	lea	edx, DWORD PTR [eax*4]
	push	edx
	call	DWORD PTR __imp__malloc
	mov	DWORD PTR _pTempGrains$[esp+308], eax

; 736  : 
; 737  : 	float avgdz = (ZLayer[StartLayer] - ZLayer[EndLayer]) / (EndLayer - StartLayer);

	mov	eax, DWORD PTR _StartLayer$[ebp]

; 738  : 			
; 739  : 	float tsl = 10.0f * (T.NptMinV - T.NptMin01) / (T.NptMin01 - T.NptMinH);
; 740  : 	float tinf = (float)(T.NptMinH);
; 741  : 	float td = (float)(T.NptMinV - T.NptMinH);
; 742  : 
; 743  : 	for (itr = 0; itr < T.TrialCount; itr++)

	mov	ecx, DWORD PTR [ebx+168]
	add	esp, 4
	fld	DWORD PTR [edi+eax*4]
	fsub	DWORD PTR [edi+esi*4]
	sub	esi, eax
	mov	DWORD PTR _itr$[esp+304], 0
	mov	DWORD PTR -216+[esp+304], esi
	fidiv	DWORD PTR -216+[esp+304]
	test	ecx, ecx
	fstp	DWORD PTR _avgdz$[esp+304]
	fld	DWORD PTR [ebx+876]
	fsub	DWORD PTR [ebx+884]
	fmul	DWORD PTR __real@4@4002a000000000000000
	fld	DWORD PTR [ebx+884]
	fsub	DWORD PTR [ebx+880]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _tsl$[esp+304]
	fld	DWORD PTR [ebx+880]
	fstp	DWORD PTR _tinf$[esp+304]
	fld	DWORD PTR [ebx+876]
	fsub	DWORD PTR [ebx+880]
	fstp	DWORD PTR _td$[esp+304]
	jle	$L78989
	lea	esi, DWORD PTR [ebx+172]
	mov	DWORD PTR -216+[esp+304], esi
	jmp	SHORT $L78987
$L80325:

; 734  : 
; 735  : 	IntGrain **pTempGrains = (IntGrain **)malloc(sizeof(IntGrain *) * (EndLayer + 1));

	mov	eax, DWORD PTR _StartLayer$[ebp]
$L78987:

; 744  : 	{
; 745  : 		Trial tr = T.Trials[itr];

	mov	ecx, 11					; 0000000bH
	lea	edi, DWORD PTR _tr$78990[esp+304]
	rep movsd

; 746  : 		if (tr.TopLayer < StartLayer || tr.BottomLayer > EndLayer) continue;

	mov	ecx, DWORD PTR _tr$78990[esp+304]
	cmp	ecx, eax
	jl	$L78988
	mov	edx, DWORD PTR _tr$78990[esp+308]
	mov	eax, DWORD PTR _EndLayer$[ebp]
	cmp	edx, eax
	jg	$L78988

; 747  : 		Cell *tp = CellsInLayer * tr.TopLayer + CellSpace;

	mov	esi, DWORD PTR _CellsInLayer$[esp+304]
	mov	edi, ecx
	imul	edi, esi
	mov	eax, DWORD PTR _CellSpace$[esp+304]
	lea	edi, DWORD PTR [eax+edi*8]
	mov	DWORD PTR _tp$78993[esp+304], edi

; 748  : 		Cell *bp = CellsInLayer * tr.BottomLayer + CellSpace;

	mov	edi, edx
	imul	edi, esi

; 749  : 		tz = ZLayer[tr.TopLayer];

	mov	esi, DWORD PTR _ZLayer$[esp+304]
	lea	eax, DWORD PTR [eax+edi*8]
	fld	DWORD PTR [esi+ecx*4]
	mov	DWORD PTR _bp$78994[esp+304], eax
	fst	DWORD PTR _tz$[esp+304]

; 750  : 		idz = 1.0f / (tz - ZLayer[tr.BottomLayer]);

	fsub	DWORD PTR [esi+edx*4]

; 751  : 
; 752  : 		for (ix = 0; ix < nx; ix++)

	mov	edx, DWORD PTR _nx$[esp+304]
	test	edx, edx
	fdivr	DWORD PTR __real@4@3fff8000000000000000
	fstp	DWORD PTR _idz$[esp+304]
	jle	$L78988
	mov	edi, DWORD PTR _tp$78993[esp+304]
	mov	eax, 1
	mov	DWORD PTR -124+[esp+304], eax
	mov	DWORD PTR -212+[esp+304], edi
$L78995:

; 753  : 		{
; 754  : 			minix = ix - 1; if (minix < 0) minix = 0;

	lea	ecx, DWORD PTR [eax-2]
	test	ecx, ecx
	mov	DWORD PTR _minix$[esp+304], ecx
	jge	SHORT $L78998
	mov	DWORD PTR _minix$[esp+304], 0
$L78998:

; 755  : 			maxix = ix + 1; if (maxix >= nx) maxix = nx - 1;

	cmp	eax, edx
	mov	DWORD PTR _maxix$[esp+304], eax
	jl	SHORT $L78999
	lea	ecx, DWORD PTR [edx-1]
	mov	DWORD PTR _maxix$[esp+304], ecx
$L78999:

; 756  : 			for (iy = 0; iy < ny; iy++)

	mov	esi, DWORD PTR _ny$[esp+304]
	test	esi, esi
	jle	$L78996
	mov	ecx, 1
	mov	DWORD PTR -140+[esp+304], edi
	mov	DWORD PTR -128+[esp+304], ecx
$L79000:

; 757  : 			{
; 758  : 				miniy = iy - 1; if (miniy < 0) miniy = 0;

	lea	eax, DWORD PTR [ecx-2]
	test	eax, eax
	mov	DWORD PTR _miniy$[esp+304], eax
	jge	SHORT $L79003
	mov	DWORD PTR _miniy$[esp+304], 0
	mov	eax, DWORD PTR _miniy$[esp+304]
$L79003:

; 759  : 				maxiy = iy + 1; if (maxiy >= ny) maxiy = ny - 1;

	cmp	ecx, esi
	mov	DWORD PTR _maxiy$[esp+304], ecx
	jl	SHORT $L79004
	dec	esi
	mov	DWORD PTR _maxiy$[esp+304], esi
$L79004:

; 760  : 				Cell &ct = tp[iy * nx + ix];
; 761  : 				IntGrain *pT = ct.FirstG;

	mov	esi, DWORD PTR [edi]

; 762  : 				IntGrain *pTE = ct.FirstG + ct.Free;

	mov	edi, DWORD PTR [edi+4]
	mov	DWORD PTR _pT$79006[esp+304], esi
	lea	edi, DWORD PTR [edi+edi*4]
	lea	edi, DWORD PTR [esi+edi*4]

; 763  : 				for (;pT < pTE; pT++)

	cmp	esi, edi
	mov	DWORD PTR _pTE$79007[esp+304], edi
	jae	$L80322
	jmp	SHORT $L79008
$L80321:
	mov	esi, DWORD PTR _pT$79006[esp+304]
$L79008:

; 764  : 				{
; 765  : 					IntGrain gt = *pT;

	mov	ecx, 5
	lea	edi, DWORD PTR _gt$79011[esp+304]
	rep movsd

; 766  : 					for (iix = minix; iix <= maxix; iix++)

	mov	ecx, DWORD PTR _minix$[esp+304]
	mov	edi, DWORD PTR _maxix$[esp+304]
	mov	esi, ecx
	mov	DWORD PTR _iix$[esp+304], ecx
	cmp	esi, edi
	jg	$L79009
$L79012:

; 767  : 						for (iiy = miniy; iiy <= maxiy; iiy++)

	mov	esi, DWORD PTR _maxiy$[esp+304]
	cmp	eax, esi
	jg	$L79013
	imul	eax, edx
	mov	edi, DWORD PTR _miniy$[esp+304]
	add	eax, ecx
	mov	ecx, DWORD PTR _bp$78994[esp+304]
	lea	ecx, DWORD PTR [ecx+eax*8]
	mov	eax, esi
	sub	eax, edi
	mov	DWORD PTR -136+[esp+304], ecx
	inc	eax
	mov	DWORD PTR -120+[esp+304], eax
$L79015:

; 768  : 						{
; 769  : 							Cell &cb = bp[iiy * nx + iix];
; 770  : 							IntGrain *pB = cb.FirstG;
; 771  : 							IntGrain *pBE = cb.FirstG + cb.Free;

	mov	edi, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR _pB$79019[esp+304], esi
	lea	edi, DWORD PTR [edi+edi*4]
	lea	edi, DWORD PTR [esi+edi*4]

; 772  : 							for (;pB < pBE; pB++)

	cmp	esi, edi
	mov	DWORD PTR _pBE$79020[esp+304], edi
	jae	$L79016
	jmp	SHORT $L79021
$L80304:
	mov	esi, DWORD PTR _pB$79019[esp+304]
$L79021:

; 773  : 							{
; 774  : 								IntGrain gb = *pB;
; 775  : 								SlopeX = idz * (gt.Xcm - gb.Xcm);

	fld	DWORD PTR _gt$79011[esp+304]
	mov	ecx, 5
	lea	edi, DWORD PTR _gb$79024[esp+304]
	rep movsd
	fsub	DWORD PTR _gb$79024[esp+304]
	fmul	DWORD PTR _idz$[esp+304]
	fst	DWORD PTR _SlopeX$[esp+304]

; 776  : 								SlopeY = idz * (gt.Ycm - gb.Ycm);

	fld	DWORD PTR _gt$79011[esp+308]
	fsub	DWORD PTR _gb$79024[esp+308]
	fmul	DWORD PTR _idz$[esp+304]
	fst	DWORD PTR _SlopeY$[esp+304]

; 777  : 								Slope2 = hypot(SlopeX, SlopeY);

	fstp	QWORD PTR -152+[esp+304]
	mov	esi, DWORD PTR -152+[esp+308]
	mov	edi, DWORD PTR -152+[esp+304]
	fstp	QWORD PTR -192+[esp+304]
	mov	edx, DWORD PTR -192+[esp+308]
	mov	eax, DWORD PTR -192+[esp+304]
	push	esi
	push	edi
	push	edx
	push	eax
	call	DWORD PTR __imp__hypot
	fst	DWORD PTR _Slope2$[esp+320]

; 778  : 								if (Slope2 < MaxSlope)

	fcomp	DWORD PTR _MaxSlope$[esp+320]
	add	esp, 16					; 00000010H
	fnstsw	ax
	test	ah, 1
	je	$L79022

; 779  : 								{
; 780  : 									GetDirAndTol(SlopeX, SlopeY, avgdz, &DirX, &DirY, &dirtol);

	mov	ecx, DWORD PTR -192+[esp+308]
	mov	edx, DWORD PTR -192+[esp+304]
	push	esi
	push	edi
	push	ecx
	push	edx
	call	DWORD PTR __imp__hypot
	fcom	DWORD PTR __real@4@00000000000000000000
	add	esp, 16					; 00000010H
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L80254
	mov	eax, DWORD PTR [ebx+164]
	mov	DWORD PTR _DirX$[esp+304], 1065353216	; 3f800000H
	fstp	ST(0)
	mov	DWORD PTR _DirY$[esp+304], 0
	mov	DWORD PTR _dirtol$[esp+304], eax
	jmp	SHORT $L80255
$L80254:
	fld	DWORD PTR _SlopeX$[esp+304]
	fdiv	ST(0), ST(1)
	sub	esp, 8
	sub	esp, 8
	fstp	DWORD PTR _DirX$[esp+320]
	fld	DWORD PTR _SlopeY$[esp+320]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR _DirY$[esp+320]
	fmul	DWORD PTR _avgdz$[esp+320]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [ebx+164]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__hypot
	fstp	DWORD PTR _dirtol$[esp+320]
	add	esp, 16					; 00000010H
$L80255:

; 781  : 									for (ir = 0; ir < tr.TriggerCount; ir++)

	mov	eax, DWORD PTR _tr$78990[esp+312]
	mov	DWORD PTR _ir$[esp+304], 0
	test	eax, eax
	jle	$L79022
	lea	ecx, DWORD PTR _tr$78990[esp+316]
	mov	DWORD PTR -168+[esp+304], ecx
$L79026:

; 782  : 									{
; 783  : 										int TriggerLayer = tr.Triggers[ir];

	mov	edx, DWORD PTR -168+[esp+304]

; 784  : 										float ldz = (tz - ZLayer[TriggerLayer]) * idz;

	mov	eax, DWORD PTR _ZLayer$[esp+304]
	fld	DWORD PTR _tz$[esp+304]
	mov	esi, DWORD PTR [edx]
	fsub	DWORD PTR [eax+esi*4]
	fmul	DWORD PTR _idz$[esp+304]

; 785  : 										float cdz = 1.0f - ldz;

	fld	DWORD PTR __real@4@3fff8000000000000000
	fsub	ST(0), ST(1)

; 786  : 										ExpX = ldz * gb.Xcm + cdz * gt.Xcm;

	fld	ST(1)
	fmul	DWORD PTR _gb$79024[esp+304]
	fld	ST(1)
	fmul	DWORD PTR _gt$79011[esp+304]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _ExpX$[esp+304]

; 787  : 										ExpY = ldz * gb.Ycm + cdz * gt.Ycm;

	fxch	ST(1)
	fmul	DWORD PTR _gb$79024[esp+308]
	fxch	ST(1)
	fmul	DWORD PTR _gt$79011[esp+308]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _ExpY$[esp+304]

; 788  : 										eix = (int)((ExpX - T.Win.Xmin) / T.DxCell);

	fld	DWORD PTR _ExpX$[esp+304]
	fsub	DWORD PTR [ebx+940]
	fdiv	DWORD PTR [ebx+956]
	call	__ftol

; 789  : 										eiy = (int)((ExpY - T.Win.Ymin) / T.DyCell);

	fld	DWORD PTR _ExpY$[esp+304]
	fsub	DWORD PTR [ebx+948]
	mov	edi, eax
	fdiv	DWORD PTR [ebx+960]
	call	__ftol

; 790  : 										IntGrain *pTrg = CellSpace[(TriggerLayer * ny + eiy) * nx + eix].FindGrain(ExpX, ExpY, DirX, DirY, dirtol, T.AlignTol);

	mov	ecx, DWORD PTR [ebx+164]
	mov	edx, DWORD PTR _dirtol$[esp+304]
	push	ecx
	mov	ecx, DWORD PTR _DirY$[esp+308]
	push	edx
	mov	edx, DWORD PTR _DirX$[esp+312]
	push	ecx
	mov	ecx, DWORD PTR _ExpY$[esp+316]
	push	edx
	push	ecx
	mov	ecx, esi
	mov	edx, DWORD PTR _ExpX$[esp+324]
	imul	ecx, DWORD PTR _ny$[esp+324]
	add	ecx, eax
	push	edx
	imul	ecx, DWORD PTR _nx$[esp+328]
	mov	edx, DWORD PTR _CellSpace$[esp+328]
	add	ecx, edi
	lea	ecx, DWORD PTR [edx+ecx*8]
	call	?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z ; Cell::FindGrain

; 791  : 										if (pTrg)

	test	eax, eax
	mov	DWORD PTR _pTrg$79034[esp+304], eax
	je	$L79027

; 792  : 										{
; 793  : 											memset(pTempGrains, 0, T.Layer * sizeof(Grain *));

	mov	ecx, DWORD PTR [ebx+976]
	mov	edi, DWORD PTR _pTempGrains$[esp+304]
	shl	ecx, 2
	mov	edx, ecx
	xor	eax, eax
	shr	ecx, 2
	rep stosd
	mov	ecx, edx

; 794  : 											float dz;
; 795  : 											int seqlength = 3;
; 796  : 
; 797  : 											pTempGrains[tr.TopLayer] = pT;
; 798  : 											pTempGrains[tr.BottomLayer] = pB;

	mov	edx, DWORD PTR _tr$78990[esp+308]
	and	ecx, 3
	mov	DWORD PTR _seqlength$79038[esp+304], 3
	rep stosb
	mov	ecx, DWORD PTR _pTempGrains$[esp+304]
	mov	edi, DWORD PTR _tr$78990[esp+304]
	mov	eax, DWORD PTR _pT$79006[esp+304]
	mov	DWORD PTR [ecx+edi*4], eax
	mov	eax, DWORD PTR _pB$79019[esp+304]
	mov	DWORD PTR [ecx+edx*4], eax

; 799  : 											pTempGrains[TriggerLayer] = pTrg;

	mov	edx, DWORD PTR _pTrg$79034[esp+304]

; 800  : 
; 801  : 											for (lay = tr.TopLayer + 1; lay < TriggerLayer; lay++)

	inc	edi
	mov	DWORD PTR [ecx+esi*4], edx
	cmp	edi, esi
	jge	$L79041
	lea	eax, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR -256+[esp+304], eax
	mov	eax, DWORD PTR _ZLayer$[esp+304]
	sub	eax, ecx
	mov	DWORD PTR -292+[esp+304], eax
	jmp	SHORT $L79039
$L80313:
	mov	eax, DWORD PTR -292+[esp+304]
$L79039:

; 802  : 											{
; 803  : 												dz = ZLayer[lay] - tz;
; 804  : 												ExpX = dz * SlopeX + gt.Xcm;
; 805  : 												ExpY = dz * SlopeY + gt.Ycm;
; 806  : 												if (pTempGrains[lay] = FindGrain(ExpX, ExpY, CellSpace + lay * T.CellsInLayer, DirX, DirY, dirtol)) seqlength++;

	mov	edx, DWORD PTR _dirtol$[esp+304]
	mov	ecx, DWORD PTR -256+[esp+304]
	push	edx

; 878  : 	return S_OK;

	mov	edx, DWORD PTR [ebx+936]
	fld	DWORD PTR [eax+ecx]
	imul	edx, edi
	fsub	DWORD PTR _tz$[esp+308]
	fld	ST(0)
	fmul	DWORD PTR _SlopeY$[esp+308]
	fadd	DWORD PTR _gt$79011[esp+312]
	mov	eax, DWORD PTR _DirY$[esp+308]
	mov	ecx, DWORD PTR _DirX$[esp+308]
	push	eax
	mov	eax, DWORD PTR _CellSpace$[esp+312]
	push	ecx
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, ebx
	fmul	DWORD PTR _SlopeX$[esp+328]
	fadd	DWORD PTR _gt$79011[esp+328]
	fstp	DWORD PTR [esp]
	call	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
	mov	edx, DWORD PTR -256+[esp+304]
	test	eax, eax
	mov	DWORD PTR [edx], eax
	je	SHORT $L79040
	inc	DWORD PTR _seqlength$79038[esp+304]
$L79040:
	mov	ecx, DWORD PTR -256+[esp+304]
	inc	edi
	add	ecx, 4
	cmp	edi, esi
	mov	DWORD PTR -256+[esp+304], ecx
	jl	SHORT $L80313

; 800  : 
; 801  : 											for (lay = tr.TopLayer + 1; lay < TriggerLayer; lay++)

	mov	ecx, DWORD PTR _pTempGrains$[esp+304]
$L79041:

; 807  : 												};
; 808  : 											for (lay = TriggerLayer + 1; lay < tr.BottomLayer; lay++)

	mov	eax, DWORD PTR _tr$78990[esp+308]
	lea	edi, DWORD PTR [esi+1]
	cmp	edi, eax
	jge	SHORT $L79045
	mov	eax, DWORD PTR _ZLayer$[esp+304]
	lea	esi, DWORD PTR [ecx+edi*4]
	sub	eax, ecx
	mov	DWORD PTR -292+[esp+304], eax
	jmp	SHORT $L79043
$L80319:
	mov	eax, DWORD PTR -292+[esp+304]
$L79043:

; 809  : 											{
; 810  : 												dz = ZLayer[lay] - tz;

	fld	DWORD PTR [esi+eax]

; 811  : 												ExpX = dz * SlopeX + gt.Xcm;
; 812  : 												ExpY = dz * SlopeY + gt.Ycm;
; 813  : 												if (pTempGrains[lay] = FindGrain(ExpX, ExpY, CellSpace + lay * T.CellsInLayer, DirX, DirY, dirtol)) seqlength++;

	mov	eax, DWORD PTR _dirtol$[esp+304]
	mov	ecx, DWORD PTR _DirY$[esp+304]
	fsub	DWORD PTR _tz$[esp+304]
	push	eax

; 878  : 	return S_OK;

	mov	eax, DWORD PTR [ebx+936]
	imul	eax, edi
	fld	ST(0)
	fmul	DWORD PTR _SlopeY$[esp+308]
	fadd	DWORD PTR _gt$79011[esp+312]
	mov	edx, DWORD PTR _DirX$[esp+308]
	push	ecx
	mov	ecx, DWORD PTR _CellSpace$[esp+312]
	push	edx
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, ebx
	fmul	DWORD PTR _SlopeX$[esp+328]
	fadd	DWORD PTR _gt$79011[esp+328]
	fstp	DWORD PTR [esp]
	call	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
	test	eax, eax
	mov	DWORD PTR [esi], eax
	je	SHORT $L79044
	inc	DWORD PTR _seqlength$79038[esp+304]
$L79044:
	mov	eax, DWORD PTR _tr$78990[esp+308]
	inc	edi
	add	esi, 4
	cmp	edi, eax
	jl	SHORT $L80319

; 807  : 												};
; 808  : 											for (lay = TriggerLayer + 1; lay < tr.BottomLayer; lay++)

	mov	ecx, DWORD PTR _pTempGrains$[esp+304]
$L79045:

; 814  : 												};
; 815  : 											Vector topv, bottomv;
; 816  : 											topv.X = pT->Xcm;

	mov	eax, DWORD PTR _pT$79006[esp+304]
	mov	edx, DWORD PTR [eax]

; 817  : 											topv.Y = pT->Ycm;

	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _topv$79047[esp+304], edx

; 818  : 											topv.Z = tz;

	mov	edx, DWORD PTR _tz$[esp+304]
	mov	DWORD PTR _topv$79047[esp+308], eax

; 819  : 											bottomv.X = pB->Xcm;

	mov	eax, DWORD PTR _pB$79019[esp+304]
	mov	DWORD PTR _topv$79047[esp+312], edx
	mov	edx, DWORD PTR [eax]

; 820  : 											bottomv.Y = pB->Ycm;

	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _bottomv$79048[esp+304], edx

; 821  : 											bottomv.Z = ZLayer[tr.BottomLayer];

	mov	edx, DWORD PTR _ZLayer$[esp+304]
	mov	DWORD PTR _bottomv$79048[esp+308], eax
	mov	eax, DWORD PTR _tr$78990[esp+308]
	fld	DWORD PTR [edx+eax*4]

; 822  : 											for (lay = (int)tr.TopLayer - 1; lay >= 0; lay--)

	mov	edx, DWORD PTR _tr$78990[esp+304]
	fstp	DWORD PTR _bottomv$79048[esp+312]
	lea	edi, DWORD PTR [edx-1]
	test	edi, edi
	jl	$L79052
	mov	eax, DWORD PTR _ZLayer$[esp+304]
	sub	ecx, eax
	lea	esi, DWORD PTR [eax+edi*4]
	mov	DWORD PTR -292+[esp+304], ecx
$L79050:

; 823  : 											{
; 824  : 												dz = (bottomv.Z - topv.Z);

	fld	DWORD PTR _bottomv$79048[esp+312]
	fsub	DWORD PTR _topv$79047[esp+312]

; 825  : 												SlopeX = (bottomv.X - topv.X) / dz;

	fld	DWORD PTR _bottomv$79048[esp+304]
	fsub	DWORD PTR _topv$79047[esp+304]

; 826  : 												SlopeY = (bottomv.Y - topv.Y) / dz;
; 827  : 												GetDirAndTol(SlopeX, SlopeY, avgdz, &DirX, &DirY, &dirtol);

	sub	esp, 8
	fdiv	ST(0), ST(1)
	sub	esp, 8
	fstp	DWORD PTR _SlopeX$[esp+320]
	fld	DWORD PTR _bottomv$79048[esp+324]
	fsub	DWORD PTR _topv$79047[esp+324]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR _SlopeY$[esp+320]
	fstp	ST(0)
	fld	DWORD PTR _SlopeY$[esp+320]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR _SlopeX$[esp+320]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__hypot
	fcom	DWORD PTR __real@4@00000000000000000000
	add	esp, 16					; 00000010H
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L80266
	mov	eax, DWORD PTR [ebx+164]
	mov	DWORD PTR _DirX$[esp+304], 1065353216	; 3f800000H
	fstp	ST(0)
	mov	DWORD PTR _DirY$[esp+304], 0
	mov	DWORD PTR _dirtol$[esp+304], eax
	jmp	SHORT $L80267
$L80266:
	fld	DWORD PTR _SlopeX$[esp+304]
	fdiv	ST(0), ST(1)
	sub	esp, 8
	sub	esp, 8
	fstp	DWORD PTR _DirX$[esp+320]
	fld	DWORD PTR _SlopeY$[esp+320]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR _DirY$[esp+320]
	fmul	DWORD PTR _avgdz$[esp+320]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [ebx+164]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__hypot
	fstp	DWORD PTR _dirtol$[esp+320]
	add	esp, 16					; 00000010H
$L80267:

; 828  : 												dz = ZLayer[lay] - topv.Z;
; 829  : 												ExpX = dz * SlopeX + topv.X;
; 830  : 												ExpY = dz * SlopeY + topv.Y;
; 831  : 												if (pTempGrains[lay] = FindGrain(ExpX, ExpY, CellSpace + lay * T.CellsInLayer, DirX, DirY, dirtol))

	mov	ecx, DWORD PTR _dirtol$[esp+304]
	mov	edx, DWORD PTR _DirY$[esp+304]
	fld	DWORD PTR [esi]
	fsub	DWORD PTR _topv$79047[esp+312]
	push	ecx

; 878  : 	return S_OK;

	mov	ecx, DWORD PTR [ebx+936]
	imul	ecx, edi
	fld	ST(0)
	fmul	DWORD PTR _SlopeY$[esp+308]
	fadd	DWORD PTR _topv$79047[esp+312]
	mov	eax, DWORD PTR _DirX$[esp+308]
	push	edx
	mov	edx, DWORD PTR _CellSpace$[esp+312]
	push	eax
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, ebx
	fmul	DWORD PTR _SlopeX$[esp+328]
	fadd	DWORD PTR _topv$79047[esp+328]
	fstp	DWORD PTR [esp]
	call	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
	mov	ecx, DWORD PTR -292+[esp+304]
	test	eax, eax
	mov	DWORD PTR [ecx+esi], eax
	je	SHORT $L79051
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _topv$79047[esp+308], eax
	mov	eax, DWORD PTR _seqlength$79038[esp+304]
	mov	DWORD PTR _topv$79047[esp+304], edx
	inc	eax
	mov	DWORD PTR _topv$79047[esp+312], ecx
	mov	DWORD PTR _seqlength$79038[esp+304], eax
$L79051:
	dec	edi
	sub	esi, 4
	test	edi, edi
	jge	$L79050

; 822  : 											for (lay = (int)tr.TopLayer - 1; lay >= 0; lay--)

	mov	ecx, DWORD PTR _pTempGrains$[esp+304]
$L79052:

; 832  : 												{
; 833  : 													topv.X = pTempGrains[lay]->Xcm;
; 834  : 													topv.Y = pTempGrains[lay]->Ycm;
; 835  : 													topv.Z = ZLayer[lay];
; 836  : 													seqlength++;
; 837  : 													}
; 838  : 												};
; 839  : 											for (lay = (int)tr.BottomLayer + 1; lay <= EndLayer; lay++)

	mov	edx, DWORD PTR _tr$78990[esp+308]
	mov	eax, DWORD PTR _EndLayer$[ebp]
	lea	edi, DWORD PTR [edx+1]
	cmp	edi, eax
	jg	$L79057
	mov	eax, DWORD PTR _ZLayer$[esp+304]
	sub	ecx, eax
	lea	esi, DWORD PTR [eax+edi*4]
	mov	DWORD PTR -292+[esp+304], ecx
$L79055:

; 840  : 											{
; 841  : 												dz = (bottomv.Z - topv.Z);

	fld	DWORD PTR _bottomv$79048[esp+312]
	fsub	DWORD PTR _topv$79047[esp+312]

; 842  : 												SlopeX = (bottomv.X - topv.X) / dz;

	fld	DWORD PTR _bottomv$79048[esp+304]
	fsub	DWORD PTR _topv$79047[esp+304]

; 843  : 												SlopeY = (bottomv.Y - topv.Y) / dz;
; 844  : 												GetDirAndTol(SlopeX, SlopeY, avgdz, &DirX, &DirY, &dirtol);

	sub	esp, 8
	fdiv	ST(0), ST(1)
	sub	esp, 8
	fstp	DWORD PTR _SlopeX$[esp+320]
	fld	DWORD PTR _bottomv$79048[esp+324]
	fsub	DWORD PTR _topv$79047[esp+324]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR _SlopeY$[esp+320]
	fstp	ST(0)
	fld	DWORD PTR _SlopeY$[esp+320]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR _SlopeX$[esp+320]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__hypot
	fcom	DWORD PTR __real@4@00000000000000000000
	add	esp, 16					; 00000010H
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L80272
	mov	eax, DWORD PTR [ebx+164]
	mov	DWORD PTR _DirX$[esp+304], 1065353216	; 3f800000H
	fstp	ST(0)
	mov	DWORD PTR _DirY$[esp+304], 0
	mov	DWORD PTR _dirtol$[esp+304], eax
	jmp	SHORT $L80273
$L80272:
	fld	DWORD PTR _SlopeX$[esp+304]
	fdiv	ST(0), ST(1)
	sub	esp, 8
	sub	esp, 8
	fstp	DWORD PTR _DirX$[esp+320]
	fld	DWORD PTR _SlopeY$[esp+320]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR _DirY$[esp+320]
	fmul	DWORD PTR _avgdz$[esp+320]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [ebx+164]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__hypot
	fstp	DWORD PTR _dirtol$[esp+320]
	add	esp, 16					; 00000010H
$L80273:

; 845  : 												dz = ZLayer[lay] - topv.Z;
; 846  : 												ExpX = dz * SlopeX + topv.X;
; 847  : 												ExpY = dz * SlopeY + topv.Y;
; 848  : 												if (pTempGrains[lay] = FindGrain(ExpX, ExpY, CellSpace + lay * T.CellsInLayer, DirX, DirY, dirtol))

	mov	ecx, DWORD PTR _dirtol$[esp+304]
	mov	edx, DWORD PTR _DirY$[esp+304]
	fld	DWORD PTR [esi]
	fsub	DWORD PTR _topv$79047[esp+312]
	push	ecx

; 878  : 	return S_OK;

	mov	ecx, DWORD PTR [ebx+936]
	imul	ecx, edi
	fld	ST(0)
	fmul	DWORD PTR _SlopeY$[esp+308]
	fadd	DWORD PTR _topv$79047[esp+312]
	mov	eax, DWORD PTR _DirX$[esp+308]
	push	edx
	mov	edx, DWORD PTR _CellSpace$[esp+312]
	push	eax
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, ebx
	fmul	DWORD PTR _SlopeX$[esp+328]
	fadd	DWORD PTR _topv$79047[esp+328]
	fstp	DWORD PTR [esp]
	call	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
	mov	ecx, DWORD PTR -292+[esp+304]
	test	eax, eax
	mov	DWORD PTR [esi+ecx], eax
	je	SHORT $L79056
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _bottomv$79048[esp+308], eax
	mov	eax, DWORD PTR _seqlength$79038[esp+304]
	mov	DWORD PTR _bottomv$79048[esp+304], edx
	inc	eax
	mov	DWORD PTR _bottomv$79048[esp+312], ecx
	mov	DWORD PTR _seqlength$79038[esp+304], eax
$L79056:
	mov	eax, DWORD PTR _EndLayer$[ebp]
	inc	edi
	add	esi, 4
	cmp	edi, eax
	jle	$L79055

; 832  : 												{
; 833  : 													topv.X = pTempGrains[lay]->Xcm;
; 834  : 													topv.Y = pTempGrains[lay]->Ycm;
; 835  : 													topv.Z = ZLayer[lay];
; 836  : 													seqlength++;
; 837  : 													}
; 838  : 												};
; 839  : 											for (lay = (int)tr.BottomLayer + 1; lay <= EndLayer; lay++)

	mov	ecx, DWORD PTR _pTempGrains$[esp+304]
$L79057:

; 849  : 												{
; 850  : 													bottomv.X = pTempGrains[lay]->Xcm;
; 851  : 													bottomv.Y = pTempGrains[lay]->Ycm;
; 852  : 													bottomv.Z = ZLayer[lay];
; 853  : 													seqlength++;
; 854  : 													}
; 855  : 												};
; 856  : 											if ((float)seqlength > (tinf + td / (1.0f + tsl * Slope2)))

	fild	DWORD PTR _seqlength$79038[esp+304]
	fld	DWORD PTR _Slope2$[esp+304]
	fmul	DWORD PTR _tsl$[esp+304]
	fadd	DWORD PTR __real@4@3fff8000000000000000
	fdivr	DWORD PTR _td$[esp+304]
	fadd	DWORD PTR _tinf$[esp+304]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L80287
$L79027:

; 781  : 									for (ir = 0; ir < tr.TriggerCount; ir++)

	mov	eax, DWORD PTR _ir$[esp+304]
	mov	edx, DWORD PTR -168+[esp+304]
	mov	ecx, DWORD PTR _tr$78990[esp+312]
	inc	eax
	add	edx, 4
	cmp	eax, ecx
	mov	DWORD PTR _ir$[esp+304], eax
	mov	DWORD PTR -168+[esp+304], edx
	jl	$L79026

; 849  : 												{
; 850  : 													bottomv.X = pTempGrains[lay]->Xcm;
; 851  : 													bottomv.Y = pTempGrains[lay]->Ycm;
; 852  : 													bottomv.Z = ZLayer[lay];
; 853  : 													seqlength++;
; 854  : 													}
; 855  : 												};
; 856  : 											if ((float)seqlength > (tinf + td / (1.0f + tsl * Slope2)))

	jmp	SHORT $L79022
$L80287:

; 857  : 											{
; 858  : 												InsertNewTrack(pTempGrains, EndLayer + 1, seqlength, pSpace, NTracks);

	mov	esi, DWORD PTR _pSpace$[ebp]
	mov	eax, DWORD PTR _seqlength$79038[esp+304]
	lea	edx, DWORD PTR _NTracks$[esp+304]
	push	edx
	mov	edx, DWORD PTR _EndLayer$[ebp]
	push	esi
	push	eax
	lea	eax, DWORD PTR [edx+1]
	push	eax
	push	ecx
	mov	ecx, ebx
	call	?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack@@AAH@Z ; CSmartTrackerClass::InsertNewTrack

; 859  : 												if (NTracks >= *pMaxNumber)

	mov	edi, DWORD PTR _pMaxNumber$[ebp]
	mov	eax, DWORD PTR _NTracks$[esp+304]
	cmp	eax, DWORD PTR [edi]
	jl	SHORT $L79022

; 860  : 												{
; 861  : 													*pMaxNumber = FinalizeTracks(NTracks, pSpace);

	push	esi
	push	eax
	mov	ecx, ebx
	call	?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack@@@Z ; CSmartTrackerClass::FinalizeTracks
	mov	DWORD PTR [edi], eax

; 862  : 													free(pTempGrains);

	mov	eax, DWORD PTR _pTempGrains$[esp+304]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$L79022:
	mov	eax, DWORD PTR _pB$79019[esp+304]
	mov	ecx, DWORD PTR _pBE$79020[esp+304]
	add	eax, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _pB$79019[esp+304], eax
	jb	$L80304
	mov	edx, DWORD PTR _nx$[esp+304]
	mov	ecx, DWORD PTR -136+[esp+304]
	mov	eax, DWORD PTR -120+[esp+304]
$L79016:
	lea	esi, DWORD PTR [edx*8]
	add	ecx, esi
	dec	eax
	mov	DWORD PTR -136+[esp+304], ecx
	mov	DWORD PTR -120+[esp+304], eax
	jne	$L79015
	mov	eax, DWORD PTR _miniy$[esp+304]
	mov	ecx, DWORD PTR _iix$[esp+304]
$L79013:
	mov	esi, DWORD PTR _maxix$[esp+304]
	inc	ecx
	cmp	ecx, esi
	mov	DWORD PTR _iix$[esp+304], ecx
	jle	$L79012
$L79009:

; 763  : 				for (;pT < pTE; pT++)

	mov	ecx, DWORD PTR _pT$79006[esp+304]
	mov	esi, DWORD PTR _pTE$79007[esp+304]
	add	ecx, 20					; 00000014H
	cmp	ecx, esi
	mov	DWORD PTR _pT$79006[esp+304], ecx
	jb	$L80321
	mov	esi, DWORD PTR _ny$[esp+304]
	mov	ecx, DWORD PTR -128+[esp+304]
	jmp	SHORT $L79001
$L80322:
	mov	esi, DWORD PTR _ny$[esp+304]
$L79001:

; 756  : 			for (iy = 0; iy < ny; iy++)

	mov	edi, DWORD PTR -140+[esp+304]
	inc	ecx
	lea	eax, DWORD PTR [edx*8]
	mov	DWORD PTR -128+[esp+304], ecx
	add	edi, eax
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, esi
	mov	DWORD PTR -140+[esp+304], edi
	jl	$L79000
	mov	eax, DWORD PTR -124+[esp+304]
$L78996:

; 751  : 
; 752  : 		for (ix = 0; ix < nx; ix++)

	mov	edi, DWORD PTR -212+[esp+304]
	inc	eax
	add	edi, 8
	mov	DWORD PTR -124+[esp+304], eax
	lea	ecx, DWORD PTR [eax-1]
	mov	DWORD PTR -212+[esp+304], edi
	cmp	ecx, edx
	jl	$L78995
$L78988:

; 738  : 			
; 739  : 	float tsl = 10.0f * (T.NptMinV - T.NptMin01) / (T.NptMin01 - T.NptMinH);
; 740  : 	float tinf = (float)(T.NptMinH);
; 741  : 	float td = (float)(T.NptMinV - T.NptMinH);
; 742  : 
; 743  : 	for (itr = 0; itr < T.TrialCount; itr++)

	mov	eax, DWORD PTR _itr$[esp+304]
	mov	esi, DWORD PTR -216+[esp+304]
	mov	ecx, DWORD PTR [ebx+168]
	inc	eax
	add	esi, 44					; 0000002cH
	cmp	eax, ecx
	mov	DWORD PTR _itr$[esp+304], eax
	mov	DWORD PTR -216+[esp+304], esi
	jl	$L80325
$L78989:

; 863  : 													}
; 864  : 												break;
; 865  : 												}
; 866  : 											}
; 867  : 										}
; 868  : 									}
; 869  : 								}
; 870  : 							}
; 871  : 					}
; 872  : 				}
; 873  : 			}
; 874  : 		}
; 875  : 
; 876  : 	*pMaxNumber = FinalizeTracks(NTracks, pSpace);

	mov	edx, DWORD PTR _pSpace$[ebp]
	mov	eax, DWORD PTR _NTracks$[esp+304]
	push	edx
	push	eax
	mov	ecx, ebx
	call	?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack@@@Z ; CSmartTrackerClass::FinalizeTracks
	mov	ecx, DWORD PTR _pMaxNumber$[ebp]

; 877  : 	free(pTempGrains);

	mov	edx, DWORD PTR _pTempGrains$[esp+304]
	push	edx
	mov	DWORD PTR [ecx], eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 878  : 	return S_OK;

	xor	eax, eax

; 879  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?GetTracks@CSmartTrackerClass@@UAGJPAUTrack@@PAHHH@Z ENDP ; CSmartTrackerClass::GetTracks
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	__CT??_R0H@84
PUBLIC	?GetClusters@CSmartTrackerClass@@UAGJHPAUCluster@@PAHPAM@Z ; CSmartTrackerClass::GetClusters
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT ??_R0H@8
; File D:\SySal2\SmartTracker5\SmartTrackerClass.cpp
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T80334	DD	019930520H
	DD	02H
	DD	FLAT:$T80341
	DD	01H
	DD	FLAT:$T80342
	DD	2 DUP(00H)
	ORG $+4
$T80341	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T80342	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T80343
	ORG $+4
$T80343	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L80332
xdata$x	ENDS
;	COMDAT ?GetClusters@CSmartTrackerClass@@UAGJHPAUCluster@@PAHPAM@Z
_TEXT	SEGMENT
_Layer$ = 12
_pSpace$ = 16
_pMaxNumber$ = 20
_pZ$ = 24
_this$ = 8
_MaxNumber$ = -20
_i$ = 12
_ccount$ = 24
_pCells$ = -28
_TCell$79084 = -36
$T80329 = -24
__$EHRec$ = -16
?GetClusters@CSmartTrackerClass@@UAGJHPAUCluster@@PAHPAM@Z PROC NEAR ; CSmartTrackerClass::GetClusters, COMDAT

; 882  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L80339
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi

; 883  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 884  : 
; 885  : 	// TODO: Add your implementation code here	
; 886  : 	if (!OkToRun) return S_FALSE;	

	mov	edi, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR __$EHRec$[ebp], esp
	cmp	BYTE PTR [edi+988], cl
	jne	SHORT $L79070
	mov	eax, 1

; 912  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$L79070:

; 887  : 	if (Layer < 0 || Layer >= T.LayerNum) return E_INVALIDARG;

	mov	eax, DWORD PTR _Layer$[ebp]
	cmp	eax, ecx
	jl	$L79073
	cmp	eax, DWORD PTR [edi+140]
	jge	$L79073

; 888  : 	int MaxNumber = *pMaxNumber;

	mov	edx, DWORD PTR _pMaxNumber$[ebp]

; 889  : 	*pZ = T.ZLayer[Layer];
; 890  : 	int i, j, ccount = 0;

	xor	ebx, ebx

; 891  : 	Cell *pCells = T.CellSpace;
; 892  : 	try
; 893  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], ecx
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR _MaxNumber$[ebp], edx
	mov	edx, DWORD PTR [edi+924]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _pZ$[ebp]
	mov	DWORD PTR _ccount$[ebp], ebx
	mov	DWORD PTR [edx], eax
	mov	esi, DWORD PTR [edi+932]

; 894  : 		for (i = 0; i < T.CellsInLayer; i++)

	mov	eax, DWORD PTR _pSpace$[ebp]
	xor	edx, edx
	mov	DWORD PTR _pCells$[ebp], esi
	mov	DWORD PTR _i$[ebp], edx
$L79081:
	cmp	edx, DWORD PTR [edi+936]
	jge	SHORT $L79083

; 895  : 		{
; 896  : 			Cell TCell = pCells[i];

	mov	edi, DWORD PTR [esi+edx*8]
	mov	esi, DWORD PTR [esi+edx*8+4]
	mov	DWORD PTR _TCell$79084[ebp+4], esi

; 897  : 			for (j = 0; j < TCell.Free; j++)

	xor	esi, esi
$L79085:
	cmp	esi, DWORD PTR _TCell$79084[ebp+4]
	jge	SHORT $L79082

; 898  : 			{
; 899  : 				pSpace->X = TCell.FirstG[j].Xcm;

	lea	edx, DWORD PTR [esi+esi*4]

; 900  : 				pSpace->Y = TCell.FirstG[j].Ycm;
; 901  : 				pSpace->Area = 0;
; 902  : 				pSpace->GrayLevel = 0;
; 903  : 				pSpace->Inertia.IXX = pSpace->Inertia.IYY = pSpace->Inertia.IXY = 0;
; 904  : 				pSpace++;

	add	eax, 40					; 00000028H
	mov	ebx, DWORD PTR [edi+edx*4]
	lea	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [eax-40], ebx

; 905  : 				if (ccount >= MaxNumber) throw ccount;

	mov	ebx, DWORD PTR _ccount$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax-20], ecx
	mov	DWORD PTR [eax-36], edx
	mov	edx, DWORD PTR _MaxNumber$[ebp]
	mov	DWORD PTR [eax-12], ecx
	mov	DWORD PTR [eax-28], ecx
	mov	DWORD PTR [eax-32], ecx
	mov	DWORD PTR [eax-4], ecx
	mov	DWORD PTR [eax-16], ecx
	mov	DWORD PTR [eax-8], ecx
	mov	DWORD PTR [eax-24], ecx
	cmp	ebx, edx
	jl	SHORT $L79086
	lea	eax, DWORD PTR $T80329[ebp]
	push	OFFSET FLAT:__TI1H
	push	eax
	mov	DWORD PTR $T80329[ebp], ebx
	call	__CxxThrowException@8
$L80332:

; 906  : 				};
; 907  : 			}
; 908  : 		}
; 909  : 	catch (...) {};

	mov	eax, $L80337
	ret	0
$L79086:
	mov	edx, DWORD PTR _i$[ebp]
	inc	esi
	jmp	SHORT $L79085
$L79082:

; 894  : 		for (i = 0; i < T.CellsInLayer; i++)

	mov	esi, DWORD PTR _pCells$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	inc	edx
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $L79081
$L80337:
	mov	ebx, DWORD PTR _ccount$[ebp]
$L79083:

; 910  : 	*pMaxNumber = ccount;

	mov	ecx, DWORD PTR _pMaxNumber$[ebp]

; 911  : 	return S_OK;

	xor	eax, eax
	mov	DWORD PTR [ecx], ebx

; 912  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$L79073:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	eax, -2147024809			; 80070057H
	mov	DWORD PTR fs:__except_list, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$L80340:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L80339:
	mov	eax, OFFSET FLAT:$T80334
	jmp	___CxxFrameHandler
text$x	ENDS
?GetClusters@CSmartTrackerClass@@UAGJHPAUCluster@@PAHPAM@Z ENDP ; CSmartTrackerClass::GetClusters
PUBLIC	?PresetSlope@CSmartTrackerClass@@UAGJMMMM@Z	; CSmartTrackerClass::PresetSlope
;	COMDAT ?PresetSlope@CSmartTrackerClass@@UAGJMMMM@Z
_TEXT	SEGMENT
?PresetSlope@CSmartTrackerClass@@UAGJMMMM@Z PROC NEAR	; CSmartTrackerClass::PresetSlope, COMDAT

; 916  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 917  : 
; 918  : 	// TODO: Add your implementation code here
; 919  : 
; 920  : 	return E_NOTIMPL;

	mov	eax, -2147467263			; 80004001H

; 921  : }

	ret	20					; 00000014H
?PresetSlope@CSmartTrackerClass@@UAGJMMMM@Z ENDP	; CSmartTrackerClass::PresetSlope
_TEXT	ENDS
PUBLIC	?EnableSlopePresetting@CSmartTrackerClass@@UAGJE@Z ; CSmartTrackerClass::EnableSlopePresetting
;	COMDAT ?EnableSlopePresetting@CSmartTrackerClass@@UAGJE@Z
_TEXT	SEGMENT
_SlPresEnable$ = 12
?EnableSlopePresetting@CSmartTrackerClass@@UAGJE@Z PROC NEAR ; CSmartTrackerClass::EnableSlopePresetting, COMDAT

; 925  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 926  : 
; 927  : 	// TODO: Add your implementation code here
; 928  : 	if (SlPresEnable) return E_INVALIDARG;

	mov	al, BYTE PTR _SlPresEnable$[esp-4]
	neg	al
	sbb	eax, eax
	and	eax, -2147024809			; 80070057H

; 929  : 	return S_OK;
; 930  : }

	ret	8
?EnableSlopePresetting@CSmartTrackerClass@@UAGJE@Z ENDP	; CSmartTrackerClass::EnableSlopePresetting
_TEXT	ENDS
PUBLIC	?GetSlopePresetStatus@CSmartTrackerClass@@UAGJPAE@Z ; CSmartTrackerClass::GetSlopePresetStatus
;	COMDAT ?GetSlopePresetStatus@CSmartTrackerClass@@UAGJPAE@Z
_TEXT	SEGMENT
_pSlPresEnable$ = 12
?GetSlopePresetStatus@CSmartTrackerClass@@UAGJPAE@Z PROC NEAR ; CSmartTrackerClass::GetSlopePresetStatus, COMDAT

; 934  : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 935  : 
; 936  : 	// TODO: Add your implementation code here
; 937  : 	*pSlPresEnable = false;

	mov	eax, DWORD PTR _pSlPresEnable$[esp-4]
	mov	BYTE PTR [eax], 0

; 938  : 	return S_OK;

	xor	eax, eax

; 939  : }

	ret	8
?GetSlopePresetStatus@CSmartTrackerClass@@UAGJPAE@Z ENDP ; CSmartTrackerClass::GetSlopePresetStatus
_TEXT	ENDS
PUBLIC	?GetFlatTracks@CSmartTrackerClass@@UAGJPAUFlatTrack@@PAHHHH@Z ; CSmartTrackerClass::GetFlatTracks
;	COMDAT ?GetFlatTracks@CSmartTrackerClass@@UAGJPAUFlatTrack@@PAHHHH@Z
_TEXT	SEGMENT
_pMaxNumber$ = 16
?GetFlatTracks@CSmartTrackerClass@@UAGJPAUFlatTrack@@PAHHHH@Z PROC NEAR ; CSmartTrackerClass::GetFlatTracks, COMDAT

; 943  : 	*pMaxNumber = 0;

	mov	eax, DWORD PTR _pMaxNumber$[esp-4]
	mov	DWORD PTR [eax], 0

; 944  : 	return E_NOTIMPL;

	mov	eax, -2147467263			; 80004001H

; 945  : 	};

	ret	24					; 00000018H
?GetFlatTracks@CSmartTrackerClass@@UAGJPAUFlatTrack@@PAHHHH@Z ENDP ; CSmartTrackerClass::GetFlatTracks
_TEXT	ENDS
PUBLIC	?GetFlatStrips@CSmartTrackerClass@@UAGJHPAUFlatStrip@@PAHPAM@Z ; CSmartTrackerClass::GetFlatStrips
;	COMDAT ?GetFlatStrips@CSmartTrackerClass@@UAGJHPAUFlatStrip@@PAHPAM@Z
_TEXT	SEGMENT
_pMaxNumber$ = 20
?GetFlatStrips@CSmartTrackerClass@@UAGJHPAUFlatStrip@@PAHPAM@Z PROC NEAR ; CSmartTrackerClass::GetFlatStrips, COMDAT

; 949  : 	*pMaxNumber = 0;

	mov	eax, DWORD PTR _pMaxNumber$[esp-4]
	mov	DWORD PTR [eax], 0

; 950  : 	return E_NOTIMPL;

	mov	eax, -2147467263			; 80004001H

; 951  : 	};

	ret	20					; 00000014H
?GetFlatStrips@CSmartTrackerClass@@UAGJHPAUFlatStrip@@PAHPAM@Z ENDP ; CSmartTrackerClass::GetFlatStrips
_TEXT	ENDS
PUBLIC	?GetDirAndTol@CSmartTrackerClass@@IAEXMMMPAM00@Z ; CSmartTrackerClass::GetDirAndTol
;	COMDAT ?GetDirAndTol@CSmartTrackerClass@@IAEXMMMPAM00@Z
_TEXT	SEGMENT
_SlopeX$ = 8
_SlopeY$ = 12
_avgdz$ = 16
_pDirX$ = 20
_pDirY$ = 24
_pdirtol$ = 28
?GetDirAndTol@CSmartTrackerClass@@IAEXMMMPAM00@Z PROC NEAR ; CSmartTrackerClass::GetDirAndTol, COMDAT

; 959  : 	float slope2 = (float)hypot(SlopeX, SlopeY);

	fld	DWORD PTR _SlopeY$[esp-4]
	push	esi
	mov	esi, ecx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR _SlopeX$[esp+8]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__hypot

; 960  : 	if (slope2 <= 0.0f)

	fcom	DWORD PTR __real@4@00000000000000000000
	add	esp, 16					; 00000010H
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L79145

; 961  : 	{
; 962  : 		*pDirX = 1.0f;

	mov	eax, DWORD PTR _pDirX$[esp]

; 963  : 		*pDirY = 0.0f;

	mov	ecx, DWORD PTR _pDirY$[esp]
	fstp	ST(0)
	mov	DWORD PTR [eax], 1065353216		; 3f800000H

; 964  : 		*pdirtol = T.AlignTol;					

	mov	eax, DWORD PTR _pdirtol$[esp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR [esi+164]
	mov	DWORD PTR [eax], edx
	pop	esi

; 971  : 	}
; 972  : };

	ret	24					; 00000018H
$L79145:

; 965  : 	}
; 966  : 	else
; 967  : 	{
; 968  : 		*pDirX = SlopeX / slope2;

	fld	DWORD PTR _SlopeX$[esp]
	fdiv	ST(0), ST(1)
	mov	ecx, DWORD PTR _pDirX$[esp]

; 969  : 		*pDirY = SlopeY / slope2;

	mov	edx, DWORD PTR _pDirY$[esp]

; 970  : 		*pdirtol = hypot(T.AlignTol, avgdz * slope2);

	sub	esp, 8
	sub	esp, 8
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR _SlopeY$[esp+16]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [edx]
	fmul	DWORD PTR _avgdz$[esp+16]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [esi+164]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__hypot
	mov	eax, DWORD PTR _pdirtol$[esp+16]
	add	esp, 16					; 00000010H
	fstp	DWORD PTR [eax]
	pop	esi

; 971  : 	}
; 972  : };

	ret	24					; 00000018H
?GetDirAndTol@CSmartTrackerClass@@IAEXMMMPAM00@Z ENDP	; CSmartTrackerClass::GetDirAndTol
_TEXT	ENDS
PUBLIC	__real@4@3ffe8000000000000000
;	COMDAT __real@4@3ffe8000000000000000
; File D:\SySal2\SmartTracker5\SmartTrackerClass.cpp
CONST	SEGMENT
__real@4@3ffe8000000000000000 DD 03f000000r	; 0.5
CONST	ENDS
;	COMDAT ?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z
_TEXT	SEGMENT
_expx$ = 8
_expy$ = 12
_pCellLayer$ = 16
_dirx$ = 20
_diry$ = 24
_dirtol$ = 28
_fix$ = -12
_fiy$ = -16
_eix$ = -8
_eiy$ = -4
?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z PROC NEAR ; CSmartTrackerClass::FindGrain, COMDAT

; 993  : {

	sub	esp, 16					; 00000010H

; 994  : 	float fix, fiy;
; 995  : 	int eix = (int)(fix = ((expx - T.Win.Xmin) / T.DxCell));

	fld	DWORD PTR _expx$[esp+12]
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
	fsub	DWORD PTR [esi+940]
	fdiv	DWORD PTR [esi+956]
	fst	DWORD PTR _fix$[esp+32]
	call	__ftol
	mov	ebx, eax

; 996  : 	if (eix < 0 || eix >= T.CellNumX) return 0;

	test	ebx, ebx
	mov	DWORD PTR _eix$[esp+32], ebx
	jl	$L79174
	mov	ebp, DWORD PTR [esi+148]
	cmp	ebx, ebp
	jge	$L79174

; 997  : 	int eiy = (int)(fiy = ((expy - T.Win.Ymin) / T.DyCell));

	fld	DWORD PTR _expy$[esp+28]
	fsub	DWORD PTR [esi+948]
	fdiv	DWORD PTR [esi+960]
	fst	DWORD PTR _fiy$[esp+32]
	call	__ftol
	mov	edi, eax

; 998  : 	if (eiy >= 0 && eiy < T.CellNumY)

	test	edi, edi
	mov	DWORD PTR _eiy$[esp+32], edi
	jl	$L79174
	cmp	edi, DWORD PTR [esi+152]
	jge	$L79174

; 999  : 	{
; 1000 : 		IntGrain *pNew = pCellLayer[eiy * T.CellNumX + eix].FindGrain(expx, expy, dirx, diry, dirtol, T.AlignTol);

	mov	eax, DWORD PTR [esi+164]
	mov	ecx, DWORD PTR _dirtol$[esp+28]
	mov	edx, DWORD PTR _diry$[esp+28]
	imul	ebp, edi
	push	eax
	mov	eax, DWORD PTR _dirx$[esp+32]
	push	ecx
	mov	ecx, DWORD PTR _expy$[esp+36]
	push	edx
	mov	edx, DWORD PTR _expx$[esp+40]
	push	eax
	mov	eax, DWORD PTR _pCellLayer$[esp+44]
	add	ebp, ebx
	push	ecx
	push	edx
	lea	ecx, DWORD PTR [eax+ebp*8]
	call	?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z ; Cell::FindGrain

; 1001 : 		if (pNew) return pNew;

	test	eax, eax
	jne	$L79155

; 1002 : 		fix -= (0.5f + eix);

	fild	DWORD PTR _eix$[esp+32]
	fadd	DWORD PTR __real@4@3ffe8000000000000000
	fsubr	DWORD PTR _fix$[esp+32]

; 1003 : 		fiy -= (0.5f + eiy);

	fild	DWORD PTR _eiy$[esp+32]
	fadd	DWORD PTR __real@4@3ffe8000000000000000
	fsubr	DWORD PTR _fiy$[esp+32]
	fstp	DWORD PTR _fiy$[esp+32]

; 1004 : 		if (fabs(fix) >= fabs(fiy))

	fld	ST(0)
	fabs
	fld	DWORD PTR _fiy$[esp+32]
	fabs
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	$L79167

; 1005 : 		{
; 1006 : 			if (fix < 0.0f && eix > 0)

	fcom	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L79168
	test	ebx, ebx
	jle	SHORT $L79168

; 1007 : 				return pCellLayer[eiy * T.CellNumX + eix - 1].FindGrain(expx, expy, dirx, diry, dirtol, T.AlignTol);

	imul	edi, DWORD PTR [esi+148]
	fstp	ST(0)
	mov	ecx, DWORD PTR [esi+164]
	mov	edx, DWORD PTR _dirtol$[esp+28]
	mov	eax, DWORD PTR _diry$[esp+28]
	push	ecx
	mov	ecx, DWORD PTR _dirx$[esp+32]
	push	edx
	mov	edx, DWORD PTR _expy$[esp+36]
	push	eax
	mov	eax, DWORD PTR _expx$[esp+40]
	push	ecx
	mov	ecx, DWORD PTR _pCellLayer$[esp+44]
	add	edi, ebx
	push	edx
	push	eax
	lea	ecx, DWORD PTR [ecx+edi*8-8]
	call	?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z ; Cell::FindGrain
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1017 : 			}
; 1018 : 		}
; 1019 : 	return 0;
; 1020 : 	}

	add	esp, 16					; 00000010H
	ret	24					; 00000018H
$L79168:

; 1008 : 			else if (fix > 0.0f && eix < (T.CellNumX - 1))

	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L79174
	mov	eax, DWORD PTR [esi+148]
	lea	edx, DWORD PTR [eax-1]
	cmp	ebx, edx
	jge	$L79174

; 1009 : 				return pCellLayer[eiy * T.CellNumX + eix + 1].FindGrain(expx, expy, dirx, diry, dirtol, T.AlignTol);

	mov	ecx, DWORD PTR [esi+164]
	mov	edx, DWORD PTR _dirtol$[esp+28]
	imul	eax, edi
	push	ecx
	mov	ecx, DWORD PTR _diry$[esp+32]
	push	edx
	mov	edx, DWORD PTR _dirx$[esp+36]
	push	ecx
	mov	ecx, DWORD PTR _expy$[esp+40]
	push	edx
	mov	edx, DWORD PTR _expx$[esp+44]
	push	ecx
	mov	ecx, DWORD PTR _pCellLayer$[esp+48]
	add	eax, ebx
	push	edx
	lea	ecx, DWORD PTR [ecx+eax*8+8]
	call	?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z ; Cell::FindGrain
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1017 : 			}
; 1018 : 		}
; 1019 : 	return 0;
; 1020 : 	}

	add	esp, 16					; 00000010H
	ret	24					; 00000018H
$L79167:

; 1004 : 		if (fabs(fix) >= fabs(fiy))

	fstp	ST(0)

; 1010 : 			}
; 1011 : 		else
; 1012 : 		{
; 1013 : 			if (fiy < 0.0f && eiy > 0)

	fld	DWORD PTR _fiy$[esp+32]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L79172
	test	edi, edi
	jle	SHORT $L79172

; 1014 : 				return pCellLayer[(eiy - 1) * T.CellNumX + eix].FindGrain(expx, expy, dirx, diry, dirtol, T.AlignTol);

	mov	edx, DWORD PTR [esi+164]
	mov	eax, DWORD PTR _dirtol$[esp+28]
	dec	edi
	mov	ecx, DWORD PTR _diry$[esp+28]
	imul	edi, DWORD PTR [esi+148]
	push	edx
	mov	edx, DWORD PTR _dirx$[esp+32]
	push	eax
	mov	eax, DWORD PTR _expy$[esp+36]
	push	ecx
	mov	ecx, DWORD PTR _expx$[esp+40]
	push	edx
	mov	edx, DWORD PTR _pCellLayer$[esp+44]
	add	edi, ebx
	push	eax
	push	ecx
	lea	ecx, DWORD PTR [edx+edi*8]
	call	?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z ; Cell::FindGrain
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1017 : 			}
; 1018 : 		}
; 1019 : 	return 0;
; 1020 : 	}

	add	esp, 16					; 00000010H
	ret	24					; 00000018H
$L79172:

; 1015 : 			else if (fiy > 0.0f && eiy < (T.CellNumX - 1))

	fld	DWORD PTR _fiy$[esp+32]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L79174
	mov	eax, DWORD PTR [esi+148]
	lea	ecx, DWORD PTR [eax-1]
	cmp	edi, ecx
	jge	SHORT $L79174

; 1016 : 				return pCellLayer[(eiy + 1) * T.CellNumX + eix].FindGrain(expx, expy, dirx, diry, dirtol, T.AlignTol);

	mov	edx, DWORD PTR [esi+164]
	mov	ecx, DWORD PTR _dirtol$[esp+28]
	inc	edi
	push	edx
	mov	edx, DWORD PTR _diry$[esp+32]
	imul	edi, eax
	push	ecx
	mov	ecx, DWORD PTR _dirx$[esp+36]
	push	edx
	mov	edx, DWORD PTR _expy$[esp+40]
	push	ecx
	mov	ecx, DWORD PTR _expx$[esp+44]
	push	edx
	mov	edx, DWORD PTR _pCellLayer$[esp+48]
	add	edi, ebx
	push	ecx
	lea	ecx, DWORD PTR [edx+edi*8]
	call	?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z ; Cell::FindGrain
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1017 : 			}
; 1018 : 		}
; 1019 : 	return 0;
; 1020 : 	}

	add	esp, 16					; 00000010H
	ret	24					; 00000018H
$L79174:

; 996  : 	if (eix < 0 || eix >= T.CellNumX) return 0;

	xor	eax, eax
$L79155:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1017 : 			}
; 1018 : 		}
; 1019 : 	return 0;
; 1020 : 	}

	add	esp, 16					; 00000010H
	ret	24					; 00000018H
?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ENDP ; CSmartTrackerClass::FindGrain
_TEXT	ENDS
PUBLIC	?PartialGetTracks2@CSmartTrackerClass@@IAEIAAUActivationRecord@1@@Z ; CSmartTrackerClass::PartialGetTracks2
EXTRN	__imp__GetTickCount@0:NEAR
;	COMDAT ?PartialGetTracks2@CSmartTrackerClass@@IAEIAAUActivationRecord@1@@Z
_TEXT	SEGMENT
_AR$ = 8
_ny$ = -244
_bx$ = -208
_wx$ = -248
_lay$ = -256
_itr$ = -260
_ZLayer$ = -288
_tz$ = -252
_CellsInLayer$ = -172
_CellSpace$ = -280
_MaxSlope$ = -216
_MaxSlope2$ = -92
_aligntol2$ = -200
_TimeLimit$ = -100
_ix$ = -164
_iix$ = -140
_iiy$ = -168
_minix$ = -144
_maxix$ = -180
_miniy$ = -272
_maxiy$ = -148
_Slope2$ = -316
_SlopeS$ = -284
_SlopeX$ = -312
_SlopeY$ = -304
_ExpX$ = -308
_ExpY$ = -316
_DirX$ = -300
_DirY$ = -292
_dirtol$ = -296
_ir$ = -220
_ifound$ = -152
_idz$ = -176
_pCellsL$79225 = -272
_EndLayer$ = -236
_StartLayer$ = -96
_pTempGrains$ = -276
_avgdz2$ = -204
_tsl$ = -132
_tinf$ = -88
_td$ = -112
_tr$79256 = -64
_bp$79260 = -108
_pT$79272 = -240
_pTE$79273 = -128
_gt$79277 = -84
_pB$79285 = -212
_pBE$79286 = -104
_gb$79292 = -20
_seqlength$79311 = -316
_availablevoids$79312 = -308
_topv$79327 = -232
_bottomv$79328 = -192
?PartialGetTracks2@CSmartTrackerClass@@IAEIAAUActivationRecord@1@@Z PROC NEAR ; CSmartTrackerClass::PartialGetTracks2, COMDAT

; 1023 : {

	sub	esp, 316				; 0000013cH
	push	ebx
	push	ebp
	mov	ebp, ecx
	push	esi
	push	edi

; 1024 : 	int nx, ny, bx, wx;
; 1025 : 	int lay;
; 1026 : 	int itr, ibr;
; 1027 : 	int NTracks = 0;
; 1028 : 	float *ZLayer = T.ZLayer;
; 1029 : 	float tz;
; 1030 : 	int CellsInLayer = T.CellsInLayer;

	mov	ecx, DWORD PTR [ebp+936]
	mov	eax, DWORD PTR [ebp+924]

; 1031 : 	Cell *CellSpace = T.CellSpace;

	mov	edx, DWORD PTR [ebp+932]

; 1032 : 	float MaxSlope = T.MaxSlope;
; 1033 : 	float MinSlope = T.MinSlope;
; 1034 : 	float MaxSlope2 = MaxSlope * MaxSlope;
; 1035 : 	float aligntol2 = T.AlignTol * T.AlignTol;
; 1036 : 	int TimeLimit = AR.TimeLimit;
; 1037 : 
; 1038 : 	int ix, iy, iix, iiy, eix, eiy;
; 1039 : 	int minix, maxix, miniy, maxiy;
; 1040 : 	float Slope2, SlopeS, ISlopeS;
; 1041 : 	float SlopeX, SlopeY, ExpX, ExpY, DirX, DirY;
; 1042 : 	float avgds2;
; 1043 : 	float dirtol;
; 1044 : 	int it, ib, ir, ifound;
; 1045 : 	float idz;
; 1046 : 
; 1047 : 	bx = T.CellNumX / T.Processors * AR.ThreadIndex;

	mov	ebx, DWORD PTR [ebp+148]
	mov	DWORD PTR _CellsInLayer$[esp+332], ecx
	mov	ecx, DWORD PTR _AR$[esp+328]
	mov	esi, DWORD PTR [ebp+896]
	mov	DWORD PTR _ZLayer$[esp+332], eax
	mov	eax, DWORD PTR [ebp+892]
	mov	DWORD PTR _CellSpace$[esp+332], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _MaxSlope$[esp+332], eax
	mov	eax, ebx
	mov	DWORD PTR _TimeLimit$[esp+332], edx
	cdq
	fld	DWORD PTR _MaxSlope$[esp+332]
	idiv	esi
	fmul	DWORD PTR _MaxSlope$[esp+332]
	fstp	DWORD PTR _MaxSlope2$[esp+332]
	fld	DWORD PTR [ebp+164]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _aligntol2$[esp+332]
	fstp	ST(0)
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR -136+[esp+332], ebx
	mov	edi, ecx
	imul	edi, eax

; 1048 : 	nx = T.CellNumX;
; 1049 : 	wx = (AR.ThreadIndex == T.Processors - 1) ? T.CellNumX : (T.CellNumX / T.Processors * (AR.ThreadIndex + 1));

	dec	esi
	mov	DWORD PTR _bx$[esp+332], edi
	cmp	ecx, esi
	jne	SHORT $L80363
	mov	DWORD PTR _wx$[esp+332], ebx
	jmp	SHORT $L80364
$L80363:
	inc	ecx
	imul	ecx, eax
	mov	DWORD PTR _wx$[esp+332], ecx
$L80364:

; 1050 : 	ny = T.CellNumY;
; 1051 : 
; 1052 : 	for (lay = 0; lay < T.Layer; lay++)

	mov	ecx, DWORD PTR [ebp+976]
	mov	eax, DWORD PTR [ebp+152]
	test	ecx, ecx
	mov	DWORD PTR _ny$[esp+332], eax
	mov	DWORD PTR _lay$[esp+332], 0
	jle	$L79224
	mov	ecx, DWORD PTR _CellsInLayer$[esp+332]
	lea	edx, DWORD PTR [ecx*8]
	mov	ecx, DWORD PTR _CellSpace$[esp+332]
	mov	DWORD PTR -260+[esp+332], edx
	mov	DWORD PTR -264+[esp+332], ecx
$L79222:

; 1055 : 		for (iy = 0; iy < ny; iy++)

	test	eax, eax
	mov	DWORD PTR _pCellsL$79225[esp+332], ecx
	jle	SHORT $L79223

; 1053 : 	{		
; 1054 : 		Cell *pCellsL = CellSpace + lay * CellsInLayer;

	mov	DWORD PTR -268+[esp+332], eax
$L79226:

; 1056 : 		{
; 1057 : 			Cell *pCellsR = pCellsL + bx;

	mov	eax, DWORD PTR _pCellsL$79225[esp+332]
	lea	edx, DWORD PTR [eax+edi*8]

; 1058 : 			for (ix = bx; ix < wx; ix++)

	mov	eax, DWORD PTR _wx$[esp+332]
	cmp	edi, eax
	jge	SHORT $L79232
	mov	edi, eax
	mov	eax, DWORD PTR _bx$[esp+332]
	sub	edi, eax
$L79230:

; 1059 : 			{
; 1060 : 				IntGrain *pG = pCellsR->FirstG;
; 1061 : 				IntGrain *pGEnd = pG + pCellsR->Free;

	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [eax+ecx*4]

; 1062 : 				while (pG < pGEnd)

	cmp	eax, ecx
	jae	SHORT $L79237
$L79236:

; 1063 : 				{
; 1064 : 					pG->pTrack2 = 0;

	xor	esi, esi
	mov	DWORD PTR [eax+16], esi

; 1065 : 					pG->TrackLength = 0;

	mov	DWORD PTR [eax+12], esi

; 1066 : 					pG++;

	add	eax, 20					; 00000014H
	cmp	eax, ecx
	jb	SHORT $L79236
$L79237:

; 1067 : 					}
; 1068 : 				pCellsR++;

	add	edx, 8
	dec	edi
	jne	SHORT $L79230
$L79232:

; 1069 : 				}
; 1070 : 			pCellsL += nx;

	mov	edx, DWORD PTR _pCellsL$79225[esp+332]
	mov	edi, DWORD PTR _bx$[esp+332]
	lea	eax, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR _pCellsL$79225[esp+332], eax
	mov	eax, DWORD PTR -268+[esp+332]
	dec	eax
	mov	DWORD PTR -268+[esp+332], eax
	jne	SHORT $L79226

; 1055 : 		for (iy = 0; iy < ny; iy++)

	mov	eax, DWORD PTR _ny$[esp+332]
$L79223:

; 1050 : 	ny = T.CellNumY;
; 1051 : 
; 1052 : 	for (lay = 0; lay < T.Layer; lay++)

	mov	ecx, DWORD PTR -264+[esp+332]
	mov	esi, DWORD PTR -260+[esp+332]
	mov	edx, DWORD PTR _lay$[esp+332]
	add	ecx, esi
	mov	esi, DWORD PTR [ebp+976]
	inc	edx
	cmp	edx, esi
	mov	DWORD PTR _lay$[esp+332], edx
	mov	DWORD PTR -264+[esp+332], ecx
	jl	$L79222
$L79224:

; 1071 : 			}
; 1072 : 		}
; 1073 : 
; 1074 : 	AR.Found = 0;

	mov	eax, DWORD PTR _AR$[esp+328]

; 1075 : 	if (AR.MaxTracks <= 0) return S_OK;

	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+16], 0
	test	ecx, ecx
	jle	$L80430

; 1076 : 
; 1077 : 	int EndLayer = AR.EndLayer;

	mov	esi, DWORD PTR [eax+32]

; 1078 : 	int StartLayer = AR.StartLayer;

	mov	edi, DWORD PTR [eax+28]

; 1079 : 	if (EndLayer >= T.Layer) EndLayer = T.Layer - 1;

	mov	eax, DWORD PTR [ebp+976]
	mov	DWORD PTR _EndLayer$[esp+332], esi
	cmp	esi, eax
	mov	DWORD PTR _StartLayer$[esp+332], edi
	jl	SHORT $L79242
	lea	esi, DWORD PTR [eax-1]
	mov	DWORD PTR _EndLayer$[esp+332], esi
$L79242:

; 1080 : 
; 1081 : 	IntGrain **pTempGrains = (IntGrain **)malloc(sizeof(IntGrain *) * (EndLayer + 1));

	lea	eax, DWORD PTR [esi+1]
	lea	ecx, DWORD PTR [eax*4]
	push	ecx
	call	DWORD PTR __imp__malloc
	mov	DWORD PTR _pTempGrains$[esp+336], eax

; 1082 : 
; 1083 : 	float avgdz = (ZLayer[StartLayer] - ZLayer[EndLayer]) / (EndLayer - StartLayer);

	mov	eax, DWORD PTR _ZLayer$[esp+336]

; 1084 : 	float avgdz2 = avgdz * avgdz;
; 1085 : 			
; 1086 : 	float tsl = 10.0f * (T.NptMinV - T.NptMin01) / (T.NptMin01 - T.NptMinH);
; 1087 : 	float tinf = (float)(T.NptMinH);
; 1088 : 	float td = (float)(T.NptMinV - T.NptMinH);
; 1089 : 
; 1090 : 	for (itr = 0; itr < T.TrialCount; itr++)

	mov	ecx, DWORD PTR [ebp+168]
	add	esp, 4
	fld	DWORD PTR [eax+edi*4]
	fsub	DWORD PTR [eax+esi*4]
	sub	esi, edi
	xor	eax, eax
	mov	DWORD PTR -260+[esp+332], esi
	cmp	ecx, eax
	fidiv	DWORD PTR -260+[esp+332]
	mov	DWORD PTR _itr$[esp+332], eax
	fld	ST(0)
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _avgdz2$[esp+332]
	fstp	ST(0)
	fld	DWORD PTR [ebp+876]
	fsub	DWORD PTR [ebp+884]
	fmul	DWORD PTR __real@4@4002a000000000000000
	fld	DWORD PTR [ebp+884]
	fsub	DWORD PTR [ebp+880]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _tsl$[esp+332]
	fld	DWORD PTR [ebp+880]
	fstp	DWORD PTR _tinf$[esp+332]
	fld	DWORD PTR [ebp+876]
	fsub	DWORD PTR [ebp+880]
	fstp	DWORD PTR _td$[esp+332]
	jle	$L79255
	lea	edx, DWORD PTR [ebp+172]
	mov	DWORD PTR -268+[esp+332], eax
	mov	DWORD PTR -256+[esp+332], edx
$L79253:

; 1091 : 	{
; 1092 : 		Trial tr = T.Trials[itr];

	mov	esi, DWORD PTR -256+[esp+332]

; 1093 : 		if (tr.TopLayer < StartLayer || tr.BottomLayer > EndLayer) continue;

	mov	eax, DWORD PTR _StartLayer$[esp+332]
	mov	ecx, 11					; 0000000bH
	lea	edi, DWORD PTR _tr$79256[esp+332]
	rep movsd
	mov	ecx, DWORD PTR _tr$79256[esp+332]
	cmp	ecx, eax
	jl	$L79254
	mov	eax, DWORD PTR _tr$79256[esp+336]
	mov	edx, DWORD PTR _EndLayer$[esp+332]
	cmp	eax, edx
	jg	$L79254

; 1094 : 		Cell *tp = CellsInLayer * tr.TopLayer + CellSpace;

	mov	edx, ecx
	mov	esi, DWORD PTR _CellSpace$[esp+332]
	imul	edx, DWORD PTR _CellsInLayer$[esp+332]

; 1095 : 		Cell *bp = CellsInLayer * tr.BottomLayer + CellSpace;

	mov	edi, DWORD PTR _CellSpace$[esp+332]
	lea	esi, DWORD PTR [esi+edx*8]
	mov	edx, eax
	imul	edx, DWORD PTR _CellsInLayer$[esp+332]
	lea	edx, DWORD PTR [edi+edx*8]
	mov	DWORD PTR _bp$79260[esp+332], edx

; 1096 : 		tz = ZLayer[tr.TopLayer];

	mov	edx, DWORD PTR _ZLayer$[esp+332]
	fld	DWORD PTR [edx+ecx*4]

; 1097 : 		idz = 1.0f / (tz - ZLayer[tr.BottomLayer]);
; 1098 : 
; 1099 : 		for (ix = bx; ix < wx; ix++)

	mov	ecx, DWORD PTR _wx$[esp+332]
	fst	DWORD PTR _tz$[esp+332]
	fsub	DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _bx$[esp+332]
	cmp	eax, ecx
	mov	DWORD PTR _ix$[esp+332], eax
	fdivr	DWORD PTR __real@4@3fff8000000000000000
	fstp	DWORD PTR _idz$[esp+332]
	jge	$L79254
	lea	esi, DWORD PTR [esi+eax*8]
	xor	edx, edx
	mov	DWORD PTR -160+[esp+332], esi
$L79261:
	lea	ecx, DWORD PTR [eax-1]

; 1100 : 		{
; 1101 : 			ifound = 0;

	mov	DWORD PTR _ifound$[esp+332], edx

; 1102 : 			minix = ix - 1; if (minix < 0) minix = 0;

	cmp	ecx, edx
	mov	DWORD PTR _minix$[esp+332], ecx
	jge	SHORT $L79264
	mov	DWORD PTR _minix$[esp+332], edx
$L79264:

; 1097 : 		idz = 1.0f / (tz - ZLayer[tr.BottomLayer]);
; 1098 : 
; 1099 : 		for (ix = bx; ix < wx; ix++)

	lea	ecx, DWORD PTR [eax+1]

; 1103 : 			maxix = ix + 1; if (maxix >= nx) maxix = nx - 1;

	mov	eax, ecx
	mov	DWORD PTR -116+[esp+332], ecx
	cmp	eax, ebx
	mov	DWORD PTR _maxix$[esp+332], eax
	jl	SHORT $L79265
	lea	eax, DWORD PTR [ebx-1]
	mov	DWORD PTR _maxix$[esp+332], eax
$L79265:

; 1104 : 			for (iy = 0; iy < ny; iy++)

	mov	edi, DWORD PTR _ny$[esp+332]
	xor	eax, eax
	cmp	edi, edx
	jle	$L79262
	mov	DWORD PTR -264+[esp+332], esi
	jmp	SHORT $L79266
$L80425:
	xor	edx, edx
$L79266:
	lea	ecx, DWORD PTR [eax-1]

; 1105 : 			{
; 1106 : 				miniy = iy - 1; if (miniy < 0) miniy = 0;

	cmp	ecx, edx
	mov	DWORD PTR _miniy$[esp+332], ecx
	jge	SHORT $L79269
	mov	DWORD PTR _miniy$[esp+332], edx
$L79269:

; 1104 : 			for (iy = 0; iy < ny; iy++)

	inc	eax
	mov	DWORD PTR -124+[esp+332], eax

; 1107 : 				maxiy = iy + 1; if (maxiy >= ny) maxiy = ny - 1;

	mov	edx, eax
	mov	eax, DWORD PTR _ny$[esp+332]
	mov	DWORD PTR _maxiy$[esp+332], edx
	cmp	edx, eax
	jl	SHORT $L79270
	lea	edx, DWORD PTR [eax-1]
	mov	DWORD PTR _maxiy$[esp+332], edx
$L79270:

; 1108 : 				Cell &ct = tp[iy * nx + ix];
; 1109 : 				IntGrain *pT = ct.FirstG;

	mov	ecx, DWORD PTR -264+[esp+332]
	mov	eax, DWORD PTR [ecx]

; 1110 : 				IntGrain *pTE = ct.FirstG + ct.Free;

	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR _pT$79272[esp+332], eax
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [eax+ecx*4]

; 1111 : 				for (;pT < pTE; pT++)

	cmp	eax, ecx
	mov	DWORD PTR _pTE$79273[esp+332], ecx
	jae	$L79267
$L79274:

; 1112 : 				{
; 1113 : 					IntGrain gt = *pT;

	mov	esi, DWORD PTR _pT$79272[esp+332]

; 1114 : 					for (iix = minix; iix <= maxix; iix++)

	mov	eax, DWORD PTR _minix$[esp+332]
	mov	ecx, 5
	lea	edi, DWORD PTR _gt$79277[esp+332]
	rep movsd
	mov	esi, DWORD PTR _maxix$[esp+332]
	mov	ecx, eax
	cmp	eax, esi
	mov	DWORD PTR _iix$[esp+332], ecx
	jg	$L79275
	mov	eax, DWORD PTR _miniy$[esp+332]
$L79278:

; 1115 : 						for (iiy = miniy; iiy <= maxiy; iiy++)

	cmp	eax, edx
	mov	DWORD PTR _iiy$[esp+332], eax
	jg	$L79279
	mov	eax, DWORD PTR _miniy$[esp+332]
	imul	eax, ebx
	add	eax, ecx
	mov	ecx, DWORD PTR _bp$79260[esp+332]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR -156+[esp+332], eax
$L79281:

; 1116 : 						{
; 1117 : 							Cell &cb = bp[iiy * nx + iix];
; 1118 : 							IntGrain *pB = cb.FirstG;
; 1119 : 							IntGrain *pBE = cb.FirstG + cb.Free;

	mov	ecx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR _pB$79285[esp+332], esi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [esi+ecx*4]

; 1120 : 							for (;pB < pBE; pB++)

	cmp	esi, ecx
	mov	DWORD PTR _pBE$79286[esp+332], ecx
	jae	$L79282
$L79287:

; 1121 : 							{
; 1122 : 								if (GetTickCount() > TimeLimit)

	call	DWORD PTR __imp__GetTickCount@0
	cmp	eax, DWORD PTR _TimeLimit$[esp+332]
	ja	$L80393

; 1126 : 									}
; 1127 : 								IntGrain gb = *pB;
; 1128 : 								SlopeX = idz * (gt.Xcm - gb.Xcm);

	fld	DWORD PTR _gt$79277[esp+332]
	mov	ecx, 5
	lea	edi, DWORD PTR _gb$79292[esp+332]
	rep movsd
	fsub	DWORD PTR _gb$79292[esp+332]
	fmul	DWORD PTR _idz$[esp+332]
	fst	DWORD PTR _SlopeX$[esp+332]

; 1129 : 								if (fabs(SlopeX) >= MaxSlope) continue;

	fabs
	fld	DWORD PTR _MaxSlope$[esp+332]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L79288

; 1130 : 								SlopeY = idz * (gt.Ycm - gb.Ycm);

	fld	DWORD PTR _gt$79277[esp+336]
	fsub	DWORD PTR _gb$79292[esp+336]
	fmul	DWORD PTR _idz$[esp+332]
	fst	DWORD PTR _SlopeY$[esp+332]

; 1131 : 								if (fabs(SlopeY) >= MaxSlope) continue;

	fabs
	fld	DWORD PTR _MaxSlope$[esp+332]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L79288

; 1132 : 								Slope2 = SlopeX * SlopeX + SlopeY * SlopeY;

	fld	DWORD PTR _SlopeY$[esp+332]
	fmul	DWORD PTR _SlopeY$[esp+332]
	fld	DWORD PTR _SlopeX$[esp+332]
	fmul	DWORD PTR _SlopeX$[esp+332]
	faddp	ST(1), ST(0)
	fst	DWORD PTR _Slope2$[esp+332]

; 1133 : 								if (Slope2 < MaxSlope2)

	fcomp	DWORD PTR _MaxSlope2$[esp+332]
	fnstsw	ax
	test	ah, 1
	je	$L79288

; 1134 : 								{
; 1135 : 									SlopeS = sqrt(Slope2);

	fld	DWORD PTR _Slope2$[esp+332]
	fsqrt
	fst	DWORD PTR _SlopeS$[esp+332]

; 1136 : 									if (SlopeS > 0.0f) ISlopeS = 1.0f / SlopeS;

	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L80411
	fld	DWORD PTR __real@4@3fff8000000000000000
	fdiv	DWORD PTR _SlopeS$[esp+332]

; 1137 : 									avgds2 = avgdz2 * Slope2;
; 1138 : 									fastGetDirAndTol(SlopeS, ISlopeS, DirX, DirY, dirtol, aligntol2, avgds2);

	fld	ST(0)
	fmul	DWORD PTR _SlopeX$[esp+332]
	fstp	DWORD PTR _DirX$[esp+332]
	fmul	DWORD PTR _SlopeY$[esp+332]
	fstp	DWORD PTR _DirY$[esp+332]
	fld	DWORD PTR _Slope2$[esp+332]
	fmul	DWORD PTR _avgdz2$[esp+332]
	fadd	DWORD PTR _aligntol2$[esp+332]
	fsqrt
	fstp	DWORD PTR _dirtol$[esp+332]
$L79298:

; 1139 : 									//GetDirAndTol(SlopeX, SlopeY, avgdz, &DirX, &DirY, &dirtol);
; 1140 : 									for (ir = 0; ir < tr.TriggerCount; ir++)

	mov	eax, DWORD PTR _tr$79256[esp+340]
	mov	DWORD PTR _ir$[esp+332], 0
	test	eax, eax
	jle	$L79288
	lea	eax, DWORD PTR _tr$79256[esp+344]
	mov	DWORD PTR -196+[esp+332], eax
$L79299:

; 1141 : 									{
; 1142 : 										int TriggerLayer = tr.Triggers[ir];

	mov	ecx, DWORD PTR -196+[esp+332]

; 1143 : 										float ldz = (tz - ZLayer[TriggerLayer]) * idz;

	mov	edx, DWORD PTR _ZLayer$[esp+332]
	fld	DWORD PTR _tz$[esp+332]
	mov	ebx, DWORD PTR [ecx]
	fsub	DWORD PTR [edx+ebx*4]
	fmul	DWORD PTR _idz$[esp+332]

; 1144 : 										float cdz = 1.0f - ldz;

	fld	DWORD PTR __real@4@3fff8000000000000000
	fsub	ST(0), ST(1)

; 1145 : 										ExpX = ldz * gb.Xcm + cdz * gt.Xcm;

	fld	ST(1)
	fmul	DWORD PTR _gb$79292[esp+332]
	fld	ST(1)
	fmul	DWORD PTR _gt$79277[esp+332]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _ExpX$[esp+332]

; 1146 : 										ExpY = ldz * gb.Ycm + cdz * gt.Ycm;

	fxch	ST(1)
	fmul	DWORD PTR _gb$79292[esp+336]
	fxch	ST(1)
	fmul	DWORD PTR _gt$79277[esp+336]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _ExpY$[esp+332]

; 1147 : 										eix = (int)((ExpX - T.Win.Xmin) / T.DxCell);

	fld	DWORD PTR _ExpX$[esp+332]
	fsub	DWORD PTR [ebp+940]
	fdiv	DWORD PTR [ebp+956]
	call	__ftol

; 1148 : 										eiy = (int)((ExpY - T.Win.Ymin) / T.DyCell);

	fld	DWORD PTR _ExpY$[esp+332]
	fsub	DWORD PTR [ebp+948]
	mov	esi, eax
	fdiv	DWORD PTR [ebp+960]
	call	__ftol

; 1149 : 										IntGrain *pTrg = CellSpace[(TriggerLayer * ny + eiy) * nx + eix].FindGrain(ExpX, ExpY, DirX, DirY, dirtol, T.AlignTol);

	mov	ecx, DWORD PTR [ebp+164]
	mov	edx, DWORD PTR _dirtol$[esp+332]
	push	ecx
	mov	ecx, DWORD PTR _DirY$[esp+336]
	push	edx
	mov	edx, DWORD PTR _DirX$[esp+340]
	push	ecx
	mov	ecx, DWORD PTR _ExpY$[esp+344]
	push	edx
	push	ecx
	mov	ecx, ebx
	mov	edx, DWORD PTR _ExpX$[esp+352]
	imul	ecx, DWORD PTR _ny$[esp+352]
	add	ecx, eax
	push	edx
	imul	ecx, DWORD PTR -136+[esp+356]
	mov	edx, DWORD PTR _CellSpace$[esp+356]
	add	ecx, esi
	lea	ecx, DWORD PTR [edx+ecx*8]
	call	?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z ; Cell::FindGrain
	mov	esi, eax

; 1150 : 										if (pTrg)

	test	esi, esi
	je	$L79300

; 1151 : 										{
; 1152 : 											memset(pTempGrains, 0, T.Layer * sizeof(Grain *));

	mov	ecx, DWORD PTR [ebp+976]
	mov	edi, DWORD PTR _pTempGrains$[esp+332]
	shl	ecx, 2
	mov	edx, ecx
	xor	eax, eax
	shr	ecx, 2
	rep stosd
	mov	ecx, edx

; 1153 : 											float dz;
; 1154 : 											int seqlength = 3;

	mov	DWORD PTR _seqlength$79311[esp+332], 3
	and	ecx, 3
	rep stosb

; 1155 : 											int availablevoids = 3 + T.Layer - T.NptMinH;

	mov	eax, DWORD PTR [ebp+976]
	add	eax, 3
	mov	DWORD PTR -308+[esp+332], eax
	fild	DWORD PTR -308+[esp+332]
	fsub	DWORD PTR [ebp+880]
	call	__ftol

; 1156 : 
; 1157 : 											pTempGrains[tr.TopLayer] = pT;

	mov	ecx, DWORD PTR _tr$79256[esp+332]
	mov	edx, DWORD PTR _pT$79272[esp+332]

; 1158 : 											pTempGrains[tr.BottomLayer] = pB;

	mov	edi, DWORD PTR _tr$79256[esp+336]
	mov	DWORD PTR _availablevoids$79312[esp+332], eax
	mov	eax, DWORD PTR _pTempGrains$[esp+332]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	edx, DWORD PTR _pB$79285[esp+332]
	mov	DWORD PTR [eax+edi*4], edx

; 1159 : 											pTempGrains[TriggerLayer] = pTrg;

	mov	DWORD PTR [eax+ebx*4], esi

; 1160 : 
; 1161 : 											for (lay = tr.TopLayer + 1; lay < TriggerLayer; lay++)

	lea	esi, DWORD PTR [ecx+1]
	cmp	esi, ebx
	jge	$L80388
	mov	ecx, eax
	mov	eax, DWORD PTR _ZLayer$[esp+332]
	sub	eax, ecx
	lea	edi, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR -120+[esp+332], eax
$L79313:

; 1162 : 											{
; 1163 : 												dz = ZLayer[lay] - tz;
; 1164 : 												ExpX = dz * SlopeX + gt.Xcm;
; 1165 : 												ExpY = dz * SlopeY + gt.Ycm;
; 1166 : 												if (pTempGrains[lay] = FindGrain(ExpX, ExpY, CellSpace + lay * T.CellsInLayer, DirX, DirY, dirtol)) seqlength++;

	mov	ecx, DWORD PTR _dirtol$[esp+332]
	mov	eax, DWORD PTR -120+[esp+332]
	push	ecx

; 1264 : 	return S_OK;

	mov	ecx, DWORD PTR [ebp+936]
	fld	DWORD PTR [eax+edi]
	imul	ecx, esi
	fsub	DWORD PTR _tz$[esp+336]
	fld	ST(0)
	fmul	DWORD PTR _SlopeY$[esp+336]
	fadd	DWORD PTR _gt$79277[esp+340]
	mov	edx, DWORD PTR _DirY$[esp+336]
	mov	eax, DWORD PTR _DirX$[esp+336]
	push	edx
	mov	edx, DWORD PTR _CellSpace$[esp+340]
	push	eax
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, ebp
	fmul	DWORD PTR _SlopeX$[esp+356]
	fadd	DWORD PTR _gt$79277[esp+356]
	fstp	DWORD PTR [esp]
	call	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
	test	eax, eax
	mov	DWORD PTR [edi], eax
	je	SHORT $L79316
	inc	DWORD PTR _seqlength$79311[esp+332]
	jmp	SHORT $L79314
$L80411:

; 1137 : 									avgds2 = avgdz2 * Slope2;
; 1138 : 									fastGetDirAndTol(SlopeS, ISlopeS, DirX, DirY, dirtol, aligntol2, avgds2);

	mov	edx, DWORD PTR [ebp+164]
	mov	DWORD PTR _DirX$[esp+332], 1065353216	; 3f800000H
	mov	DWORD PTR _DirY$[esp+332], 0
	mov	DWORD PTR _dirtol$[esp+332], edx
	jmp	$L79298
$L79316:

; 1167 : 												else if (--availablevoids <= 0) break;

	mov	eax, DWORD PTR _availablevoids$79312[esp+332]
	dec	eax
	test	eax, eax
	mov	DWORD PTR _availablevoids$79312[esp+332], eax
	jle	$L79300
$L79314:

; 1160 : 
; 1161 : 											for (lay = tr.TopLayer + 1; lay < TriggerLayer; lay++)

	inc	esi
	add	edi, 4
	cmp	esi, ebx
	jl	$L79313
$L80388:

; 1168 : 												};
; 1169 : 											if (availablevoids <= 0) continue;

	mov	eax, DWORD PTR _availablevoids$79312[esp+332]
	test	eax, eax
	jle	$L79300

; 1170 : 											for (lay = TriggerLayer + 1; lay < tr.BottomLayer; lay++)

	mov	eax, DWORD PTR _tr$79256[esp+336]
	inc	ebx
	cmp	ebx, eax
	jge	$L80389
	mov	eax, DWORD PTR _pTempGrains$[esp+332]
	mov	edi, DWORD PTR _ZLayer$[esp+332]
	sub	edi, eax
	lea	esi, DWORD PTR [eax+ebx*4]
$L79320:

; 1171 : 											{
; 1172 : 												dz = ZLayer[lay] - tz;
; 1173 : 												ExpX = dz * SlopeX + gt.Xcm;
; 1174 : 												ExpY = dz * SlopeY + gt.Ycm;
; 1175 : 												if (pTempGrains[lay] = FindGrain(ExpX, ExpY, CellSpace + lay * T.CellsInLayer, DirX, DirY, dirtol)) seqlength++;

	mov	ecx, DWORD PTR _dirtol$[esp+332]
	mov	edx, DWORD PTR _DirY$[esp+332]
	fld	DWORD PTR [esi+edi]
	fsub	DWORD PTR _tz$[esp+332]
	push	ecx

; 1264 : 	return S_OK;

	mov	ecx, DWORD PTR [ebp+936]
	imul	ecx, ebx
	fld	ST(0)
	fmul	DWORD PTR _SlopeY$[esp+336]
	fadd	DWORD PTR _gt$79277[esp+340]
	mov	eax, DWORD PTR _DirX$[esp+336]
	push	edx
	mov	edx, DWORD PTR _CellSpace$[esp+340]
	push	eax
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, ebp
	fmul	DWORD PTR _SlopeX$[esp+356]
	fadd	DWORD PTR _gt$79277[esp+356]
	fstp	DWORD PTR [esp]
	call	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
	test	eax, eax
	mov	DWORD PTR [esi], eax
	je	SHORT $L79323
	inc	DWORD PTR _seqlength$79311[esp+332]
	jmp	SHORT $L79321
$L79323:

; 1176 : 												else if (--availablevoids <= 0) break;

	mov	eax, DWORD PTR _availablevoids$79312[esp+332]
	dec	eax
	test	eax, eax
	mov	DWORD PTR _availablevoids$79312[esp+332], eax
	jle	$L79300
$L79321:

; 1170 : 											for (lay = TriggerLayer + 1; lay < tr.BottomLayer; lay++)

	mov	eax, DWORD PTR _tr$79256[esp+336]
	inc	ebx
	add	esi, 4
	cmp	ebx, eax
	jl	SHORT $L79320
$L80389:

; 1177 : 												};
; 1178 : 											if (availablevoids <= 0) continue;

	mov	eax, DWORD PTR _availablevoids$79312[esp+332]
	test	eax, eax
	jle	$L79300

; 1179 : 											Vector topv, bottomv;
; 1180 : 											topv.X = pT->Xcm;

	mov	eax, DWORD PTR _pT$79272[esp+332]
	mov	ecx, DWORD PTR [eax]

; 1181 : 											topv.Y = pT->Ycm;

	mov	edx, DWORD PTR [eax+4]

; 1182 : 											topv.Z = tz;

	mov	eax, DWORD PTR _tz$[esp+332]
	mov	DWORD PTR _topv$79327[esp+332], ecx
	mov	DWORD PTR _topv$79327[esp+340], eax

; 1183 : 											bottomv.X = pB->Xcm;

	mov	eax, DWORD PTR _pB$79285[esp+332]
	mov	DWORD PTR _topv$79327[esp+336], edx
	mov	ecx, DWORD PTR [eax]

; 1184 : 											bottomv.Y = pB->Ycm;

	mov	edx, DWORD PTR [eax+4]

; 1185 : 											bottomv.Z = ZLayer[tr.BottomLayer];

	mov	eax, DWORD PTR _ZLayer$[esp+332]
	mov	DWORD PTR _bottomv$79328[esp+332], ecx
	mov	ecx, DWORD PTR _tr$79256[esp+336]
	mov	DWORD PTR _bottomv$79328[esp+336], edx

; 1186 : 											for (lay = (int)tr.TopLayer - 1; lay >= 0; lay--)

	mov	edx, DWORD PTR _tr$79256[esp+332]
	fld	DWORD PTR [eax+ecx*4]
	lea	edi, DWORD PTR [edx-1]
	fstp	DWORD PTR _bottomv$79328[esp+340]
	test	edi, edi
	jl	$L80390
	mov	ebx, DWORD PTR _pTempGrains$[esp+332]
	lea	esi, DWORD PTR [eax+edi*4]
	sub	ebx, eax
$L79330:

; 1187 : 											{
; 1188 : 												dz = (bottomv.Z - topv.Z);

	fld	DWORD PTR _bottomv$79328[esp+340]
	fsub	DWORD PTR _topv$79327[esp+340]

; 1189 : 												float diz = 1.0f / dz;

	fdivr	DWORD PTR __real@4@3fff8000000000000000

; 1190 : 												SlopeX = (bottomv.X - topv.X) * diz;

	fld	DWORD PTR _bottomv$79328[esp+332]
	fsub	DWORD PTR _topv$79327[esp+332]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _SlopeX$[esp+332]

; 1191 : 												SlopeY = (bottomv.Y - topv.Y) * diz;

	fld	DWORD PTR _bottomv$79328[esp+336]
	fsub	DWORD PTR _topv$79327[esp+336]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _SlopeY$[esp+332]
	fstp	ST(0)

; 1192 : 												SlopeS = sqrt(Slope2 = (SlopeX * SlopeX + SlopeY * SlopeY));

	fld	DWORD PTR _SlopeY$[esp+332]
	fmul	DWORD PTR _SlopeY$[esp+332]
	fld	DWORD PTR _SlopeX$[esp+332]
	fmul	DWORD PTR _SlopeX$[esp+332]
	faddp	ST(1), ST(0)
	fld	ST(0)
	fsqrt
	fst	DWORD PTR _SlopeS$[esp+332]

; 1193 : 												if (SlopeS > 0.0f) ISlopeS = 1.0f / SlopeS;

	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L80412
	fld	DWORD PTR __real@4@3fff8000000000000000
	fdiv	DWORD PTR _SlopeS$[esp+332]

; 1194 : 												avgds2 = avgdz2 * Slope2;
; 1195 : 												fastGetDirAndTol(SlopeS, ISlopeS, DirX, DirY, dirtol, aligntol2, avgds2);

	fld	ST(0)
	fmul	DWORD PTR _SlopeX$[esp+332]
	fstp	DWORD PTR _DirX$[esp+332]
	fmul	DWORD PTR _SlopeY$[esp+332]
	fstp	DWORD PTR _DirY$[esp+332]
	fmul	DWORD PTR _avgdz2$[esp+332]
	fadd	DWORD PTR _aligntol2$[esp+332]
	fsqrt
	fstp	DWORD PTR _dirtol$[esp+332]
$L79336:

; 1196 : 												//GetDirAndTol(SlopeX, SlopeY, avgdz, &DirX, &DirY, &dirtol);
; 1197 : 												dz = ZLayer[lay] - topv.Z;
; 1198 : 												ExpX = dz * SlopeX + topv.X;
; 1199 : 												ExpY = dz * SlopeY + topv.Y;
; 1200 : 												if (pTempGrains[lay] = FindGrain(ExpX, ExpY, CellSpace + lay * T.CellsInLayer, DirX, DirY, dirtol))

	mov	ecx, DWORD PTR _dirtol$[esp+332]
	mov	edx, DWORD PTR _DirY$[esp+332]
	fld	DWORD PTR [esi]
	fsub	DWORD PTR _topv$79327[esp+340]
	push	ecx

; 1264 : 	return S_OK;

	mov	ecx, DWORD PTR [ebp+936]
	imul	ecx, edi
	fld	ST(0)
	fmul	DWORD PTR _SlopeY$[esp+336]
	fadd	DWORD PTR _topv$79327[esp+340]
	mov	eax, DWORD PTR _DirX$[esp+336]
	push	edx
	mov	edx, DWORD PTR _CellSpace$[esp+340]
	push	eax
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, ebp
	fmul	DWORD PTR _SlopeX$[esp+356]
	fadd	DWORD PTR _topv$79327[esp+356]
	fstp	DWORD PTR [esp]
	call	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
	test	eax, eax
	mov	DWORD PTR [ebx+esi], eax
	je	SHORT $L79337
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _topv$79327[esp+332], ecx
	mov	DWORD PTR _topv$79327[esp+340], eax
	mov	eax, DWORD PTR _seqlength$79311[esp+332]
	inc	eax
	mov	DWORD PTR _topv$79327[esp+336], edx
	mov	DWORD PTR _seqlength$79311[esp+332], eax
	jmp	SHORT $L79331
$L80412:

; 1194 : 												avgds2 = avgdz2 * Slope2;
; 1195 : 												fastGetDirAndTol(SlopeS, ISlopeS, DirX, DirY, dirtol, aligntol2, avgds2);

	mov	eax, DWORD PTR [ebp+164]
	mov	DWORD PTR _DirX$[esp+332], 1065353216	; 3f800000H
	fstp	ST(0)
	mov	DWORD PTR _DirY$[esp+332], 0
	mov	DWORD PTR _dirtol$[esp+332], eax
	jmp	$L79336
$L79337:

; 1201 : 												{
; 1202 : 													topv.X = pTempGrains[lay]->Xcm;
; 1203 : 													topv.Y = pTempGrains[lay]->Ycm;
; 1204 : 													topv.Z = ZLayer[lay];
; 1205 : 													seqlength++;
; 1206 : 													}
; 1207 : 												else if (--availablevoids <= 0) break;

	mov	eax, DWORD PTR _availablevoids$79312[esp+332]
	dec	eax
	test	eax, eax
	mov	DWORD PTR _availablevoids$79312[esp+332], eax
	jle	$L79300
$L79331:

; 1186 : 											for (lay = (int)tr.TopLayer - 1; lay >= 0; lay--)

	dec	edi
	sub	esi, 4
	test	edi, edi
	jge	$L79330
$L80390:

; 1208 : 												};
; 1209 : 											if (availablevoids <= 0) continue;

	mov	eax, DWORD PTR _availablevoids$79312[esp+332]
	test	eax, eax
	jle	$L79300

; 1210 : 											for (lay = (int)tr.BottomLayer + 1; lay <= EndLayer; lay++)

	mov	ecx, DWORD PTR _tr$79256[esp+336]
	mov	eax, DWORD PTR _EndLayer$[esp+332]
	lea	edi, DWORD PTR [ecx+1]
	cmp	edi, eax
	jg	$L80391
	mov	eax, DWORD PTR _ZLayer$[esp+332]
	mov	ebx, DWORD PTR _pTempGrains$[esp+332]
	sub	ebx, eax
	lea	esi, DWORD PTR [eax+edi*4]
$L79342:

; 1211 : 											{
; 1212 : 												dz = (bottomv.Z - topv.Z);

	fld	DWORD PTR _bottomv$79328[esp+340]
	fsub	DWORD PTR _topv$79327[esp+340]

; 1213 : 												float diz = 1.0f / dz;

	fdivr	DWORD PTR __real@4@3fff8000000000000000

; 1214 : 												SlopeX = (bottomv.X - topv.X) * diz;

	fld	DWORD PTR _bottomv$79328[esp+332]
	fsub	DWORD PTR _topv$79327[esp+332]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _SlopeX$[esp+332]

; 1215 : 												SlopeY = (bottomv.Y - topv.Y) * diz;

	fld	DWORD PTR _bottomv$79328[esp+336]
	fsub	DWORD PTR _topv$79327[esp+336]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _SlopeY$[esp+332]
	fstp	ST(0)

; 1216 : 												SlopeS = sqrt(Slope2 = (SlopeX * SlopeX + SlopeY * SlopeY));

	fld	DWORD PTR _SlopeY$[esp+332]
	fmul	DWORD PTR _SlopeY$[esp+332]
	fld	DWORD PTR _SlopeX$[esp+332]
	fmul	DWORD PTR _SlopeX$[esp+332]
	faddp	ST(1), ST(0)
	fld	ST(0)
	fsqrt
	fst	DWORD PTR _SlopeS$[esp+332]

; 1217 : 												if (SlopeS > 0.0f) ISlopeS = 1.0f / SlopeS;

	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L80413
	fld	DWORD PTR __real@4@3fff8000000000000000
	fdiv	DWORD PTR _SlopeS$[esp+332]

; 1218 : 												avgds2 = avgdz2 * Slope2;
; 1219 : 												fastGetDirAndTol(SlopeS, ISlopeS, DirX, DirY, dirtol, aligntol2, avgds2);

	fld	ST(0)
	fmul	DWORD PTR _SlopeX$[esp+332]
	fstp	DWORD PTR _DirX$[esp+332]
	fmul	DWORD PTR _SlopeY$[esp+332]
	fstp	DWORD PTR _DirY$[esp+332]
	fmul	DWORD PTR _avgdz2$[esp+332]
	fadd	DWORD PTR _aligntol2$[esp+332]
	fsqrt
	fstp	DWORD PTR _dirtol$[esp+332]
$L79348:

; 1220 : 												//GetDirAndTol(SlopeX, SlopeY, avgdz, &DirX, &DirY, &dirtol);
; 1221 : 												dz = ZLayer[lay] - topv.Z;
; 1222 : 												ExpX = dz * SlopeX + topv.X;
; 1223 : 												ExpY = dz * SlopeY + topv.Y;
; 1224 : 												if (pTempGrains[lay] = FindGrain(ExpX, ExpY, CellSpace + lay * T.CellsInLayer, DirX, DirY, dirtol))

	mov	eax, DWORD PTR _dirtol$[esp+332]
	mov	ecx, DWORD PTR _DirY$[esp+332]
	fld	DWORD PTR [esi]
	fsub	DWORD PTR _topv$79327[esp+340]
	push	eax

; 1264 : 	return S_OK;

	mov	eax, DWORD PTR [ebp+936]
	imul	eax, edi
	fld	ST(0)
	fmul	DWORD PTR _SlopeY$[esp+336]
	fadd	DWORD PTR _topv$79327[esp+340]
	mov	edx, DWORD PTR _DirX$[esp+336]
	push	ecx
	mov	ecx, DWORD PTR _CellSpace$[esp+340]
	push	edx
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, ebp
	fmul	DWORD PTR _SlopeX$[esp+356]
	fadd	DWORD PTR _topv$79327[esp+356]
	fstp	DWORD PTR [esp]
	call	?FindGrain@CSmartTrackerClass@@IAEPAUIntGrain@@MMPAUCell@@MMM@Z ; CSmartTrackerClass::FindGrain
	test	eax, eax
	mov	DWORD PTR [esi+ebx], eax
	je	SHORT $L79349
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _bottomv$79328[esp+332], ecx
	mov	DWORD PTR _bottomv$79328[esp+340], eax
	mov	eax, DWORD PTR _seqlength$79311[esp+332]
	inc	eax
	mov	DWORD PTR _bottomv$79328[esp+336], edx
	mov	DWORD PTR _seqlength$79311[esp+332], eax
	jmp	SHORT $L79343
$L80413:

; 1218 : 												avgds2 = avgdz2 * Slope2;
; 1219 : 												fastGetDirAndTol(SlopeS, ISlopeS, DirX, DirY, dirtol, aligntol2, avgds2);

	mov	edx, DWORD PTR [ebp+164]
	mov	DWORD PTR _DirX$[esp+332], 1065353216	; 3f800000H
	fstp	ST(0)
	mov	DWORD PTR _DirY$[esp+332], 0
	mov	DWORD PTR _dirtol$[esp+332], edx
	jmp	$L79348
$L79349:

; 1225 : 												{
; 1226 : 													bottomv.X = pTempGrains[lay]->Xcm;
; 1227 : 													bottomv.Y = pTempGrains[lay]->Ycm;
; 1228 : 													bottomv.Z = ZLayer[lay];
; 1229 : 													seqlength++;
; 1230 : 													}
; 1231 : 												else if (--availablevoids <= 0) break;

	mov	eax, DWORD PTR _availablevoids$79312[esp+332]
	dec	eax
	test	eax, eax
	mov	DWORD PTR _availablevoids$79312[esp+332], eax
	jle	SHORT $L80391
$L79343:

; 1210 : 											for (lay = (int)tr.BottomLayer + 1; lay <= EndLayer; lay++)

	mov	eax, DWORD PTR _EndLayer$[esp+332]
	inc	edi
	add	esi, 4
	cmp	edi, eax
	jle	$L79342
$L80391:

; 1232 : 												};
; 1233 : 											//if (availablevoids <= 0) continue;
; 1234 : 											if ((float)seqlength > (tinf + td / (1.0f + tsl * SlopeS)))

	fild	DWORD PTR _seqlength$79311[esp+332]
	fld	DWORD PTR _SlopeS$[esp+332]
	fmul	DWORD PTR _tsl$[esp+332]
	fadd	DWORD PTR __real@4@3fff8000000000000000
	fdivr	DWORD PTR _td$[esp+332]
	fadd	DWORD PTR _tinf$[esp+332]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L80392
$L79300:

; 1139 : 									//GetDirAndTol(SlopeX, SlopeY, avgdz, &DirX, &DirY, &dirtol);
; 1140 : 									for (ir = 0; ir < tr.TriggerCount; ir++)

	mov	eax, DWORD PTR _ir$[esp+332]
	mov	edx, DWORD PTR -196+[esp+332]
	mov	ecx, DWORD PTR _tr$79256[esp+340]
	inc	eax
	add	edx, 4
	cmp	eax, ecx
	mov	DWORD PTR _ir$[esp+332], eax
	mov	DWORD PTR -196+[esp+332], edx
	jl	$L79299

; 1121 : 							{
; 1122 : 								if (GetTickCount() > TimeLimit)

	jmp	$L79288
$L80392:

; 1235 : 											{
; 1236 : 												if (AR.Found < AR.MaxTracks)

	mov	ecx, DWORD PTR _AR$[esp+328]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+12]
	cmp	eax, edx
	jge	$L79288

; 1237 : 												{
; 1238 : 													Track2 &N = AR.pSpace[AR.Found++];

	lea	ecx, DWORD PTR [eax+eax*2]
	inc	eax
	lea	edx, DWORD PTR [ecx+ecx*4]
	mov	ecx, DWORD PTR _AR$[esp+328]
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+16], eax

; 1239 : 													int i, j;
; 1240 : 													for (i = j = 0; i <= EndLayer; i++)

	mov	eax, DWORD PTR _EndLayer$[esp+332]
	test	eax, eax
	lea	esi, DWORD PTR [esi+edx*4]
	jl	SHORT $L79360
	mov	ecx, DWORD PTR _pTempGrains$[esp+332]
	mov	ebx, DWORD PTR _ZLayer$[esp+332]
	xor	edx, edx
	sub	ebx, ecx
	inc	eax
	mov	DWORD PTR -220+[esp+332], eax
$L79358:

; 1241 : 														if (pTempGrains[i])

	mov	edi, DWORD PTR [ecx]
	test	edi, edi
	je	SHORT $L79359

; 1242 : 														{
; 1243 : 															IntTrackGrain *pIG = ((IntTrackGrain *)N.pGrains) + j++;

	mov	eax, DWORD PTR [esi+12]

; 1244 : 															pIG->T.pG = pTempGrains[i];

	mov	DWORD PTR [eax+edx], edi

; 1245 : 															pIG->T.Z = ZLayer[i];

	mov	edi, DWORD PTR [ecx+ebx]
	add	eax, edx
	add	edx, 16					; 00000010H
	mov	DWORD PTR [eax+4], edi
$L79359:
	mov	eax, DWORD PTR -220+[esp+332]
	add	ecx, 4
	dec	eax
	mov	DWORD PTR -220+[esp+332], eax
	jne	SHORT $L79358
$L79360:

; 1246 : 															}
; 1247 : 													N.Field = (itr << 24) + (ix << 16) + ifound;//AR.Found;

	mov	eax, DWORD PTR -268+[esp+332]
	mov	ecx, DWORD PTR _ix$[esp+332]

; 1248 : 													N.Valid = true;

	mov	BYTE PTR [esi+56], 1
	lea	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _ifound$[esp+332]

; 1249 : 													N.Grains = seqlength;

	mov	ecx, DWORD PTR _seqlength$79311[esp+332]
	shl	edx, 16					; 00000010H
	add	edx, eax

; 1250 : 													ifound++;

	inc	eax
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR _ifound$[esp+332], eax
$L79288:
	mov	esi, DWORD PTR _pB$79285[esp+332]
	mov	eax, DWORD PTR _pBE$79286[esp+332]
	add	esi, 20					; 00000014H
	cmp	esi, eax
	mov	DWORD PTR _pB$79285[esp+332], esi
	jb	$L79287
	mov	ebx, DWORD PTR -136+[esp+332]
	mov	edx, DWORD PTR _maxiy$[esp+332]
	mov	eax, DWORD PTR -156+[esp+332]
$L79282:
	mov	esi, DWORD PTR _iiy$[esp+332]
	lea	ecx, DWORD PTR [ebx*8]
	inc	esi
	add	eax, ecx
	cmp	esi, edx
	mov	DWORD PTR _iiy$[esp+332], esi
	mov	DWORD PTR -156+[esp+332], eax
	jle	$L79281
	mov	eax, DWORD PTR _miniy$[esp+332]
	mov	ecx, DWORD PTR _iix$[esp+332]
$L79279:
	mov	esi, DWORD PTR _maxix$[esp+332]
	inc	ecx
	cmp	ecx, esi
	mov	DWORD PTR _iix$[esp+332], ecx
	jle	$L79278
$L79275:

; 1111 : 				for (;pT < pTE; pT++)

	mov	eax, DWORD PTR _pT$79272[esp+332]
	mov	ecx, DWORD PTR _pTE$79273[esp+332]
	add	eax, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _pT$79272[esp+332], eax
	jb	$L79274
$L79267:

; 1104 : 			for (iy = 0; iy < ny; iy++)

	mov	edx, DWORD PTR -264+[esp+332]
	mov	eax, DWORD PTR -124+[esp+332]
	lea	ecx, DWORD PTR [ebx*8]
	add	edx, ecx
	mov	ecx, DWORD PTR _ny$[esp+332]
	cmp	eax, ecx
	mov	DWORD PTR -264+[esp+332], edx
	jl	$L80425
	mov	ecx, DWORD PTR -116+[esp+332]
	xor	edx, edx
$L79262:
	mov	esi, DWORD PTR -160+[esp+332]
	mov	eax, ecx
	mov	ecx, DWORD PTR _wx$[esp+332]
	add	esi, 8
	cmp	eax, ecx
	mov	DWORD PTR _ix$[esp+332], eax
	mov	DWORD PTR -160+[esp+332], esi
	jl	$L79261
$L79254:

; 1084 : 	float avgdz2 = avgdz * avgdz;
; 1085 : 			
; 1086 : 	float tsl = 10.0f * (T.NptMinV - T.NptMin01) / (T.NptMin01 - T.NptMinH);
; 1087 : 	float tinf = (float)(T.NptMinH);
; 1088 : 	float td = (float)(T.NptMinV - T.NptMinH);
; 1089 : 
; 1090 : 	for (itr = 0; itr < T.TrialCount; itr++)

	mov	eax, DWORD PTR _itr$[esp+332]
	mov	esi, DWORD PTR -256+[esp+332]
	mov	edx, DWORD PTR -268+[esp+332]
	mov	ecx, DWORD PTR [ebp+168]
	inc	eax
	add	esi, 44					; 0000002cH
	add	edx, 256				; 00000100H
	cmp	eax, ecx
	mov	DWORD PTR _itr$[esp+332], eax
	mov	DWORD PTR -256+[esp+332], esi
	mov	DWORD PTR -268+[esp+332], edx
	jl	$L79253
$L79255:

; 1251 : 													}
; 1252 : 												break;
; 1253 : 												}
; 1254 : 											}
; 1255 : 										}
; 1256 : 									}
; 1257 : 								}
; 1258 : 							}
; 1259 : 					}
; 1260 : 				}
; 1261 : 			}
; 1262 : 		}
; 1263 : 	free(pTempGrains);

	mov	eax, DWORD PTR _pTempGrains$[esp+332]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$L80430:
	pop	edi
	pop	esi
	pop	ebp

; 1264 : 	return S_OK;

	xor	eax, eax
	pop	ebx

; 1265 : 	};

	add	esp, 316				; 0000013cH
	ret	4
$L80393:

; 1123 : 								{
; 1124 : 									AR.Found = 0;

	mov	edx, DWORD PTR _AR$[esp+328]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [edx+16], 0

; 1125 : 									return S_FALSE;

	mov	eax, 1
	pop	ebx

; 1265 : 	};

	add	esp, 316				; 0000013cH
	ret	4
?PartialGetTracks2@CSmartTrackerClass@@IAEIAAUActivationRecord@1@@Z ENDP ; CSmartTrackerClass::PartialGetTracks2
_TEXT	ENDS
EXTRN	__imp___endthreadex:NEAR
EXTRN	__imp__WaitForMultipleObjects@16:NEAR
;	COMDAT ?TrackerThreadHook@CSmartTrackerClass@@KGIPAX@Z
_TEXT	SEGMENT
_Context$ = 8
_HEvsStart$ = -16
_HEvsReset$ = -8
?TrackerThreadHook@CSmartTrackerClass@@KGIPAX@Z PROC NEAR ; CSmartTrackerClass::TrackerThreadHook, COMDAT

; 1269 : {

	sub	esp, 16					; 00000010H
	push	ebx
	push	esi

; 1270 : 	ActivationRecord *pAR = (ActivationRecord *)Context;
; 1271 : 	HANDLE HEvsStart[2], HEvsReset[2];
; 1272 : 	HEvsStart[0] = HEvsReset[0] = pAR->pThis->HTerminate;

	mov	esi, DWORD PTR _Context$[esp+20]
	push	edi

; 1273 : 	HEvsStart[1] = pAR->pThis->HStart;
; 1274 : 	HEvsReset[1] = pAR->pThis->HReset;
; 1275 : 	while (WaitForMultipleObjects(2, HEvsStart, FALSE, INFINITE) != WAIT_OBJECT_0)

	mov	edi, DWORD PTR __imp__WaitForMultipleObjects@16
	push	-1
	mov	eax, DWORD PTR [esi]
	push	0
	mov	ecx, DWORD PTR [eax+996]
	mov	DWORD PTR _HEvsReset$[esp+36], ecx
	mov	DWORD PTR _HEvsStart$[esp+36], ecx
	mov	ecx, DWORD PTR [eax+992]
	mov	DWORD PTR _HEvsStart$[esp+40], ecx
	mov	edx, DWORD PTR [eax+1000]
	lea	eax, DWORD PTR _HEvsStart$[esp+36]
	mov	DWORD PTR _HEvsReset$[esp+40], edx
	push	eax
	push	2
	call	edi
	test	eax, eax
	je	SHORT $L80434

; 1278 : 		SetEvent(pAR->HFinished);

	mov	ebx, DWORD PTR __imp__SetEvent@4
$L79373:

; 1276 : 	{
; 1277 : 		pAR->pThis->PartialGetTracks2(*pAR);

	mov	ecx, DWORD PTR [esi]
	push	esi
	call	?PartialGetTracks2@CSmartTrackerClass@@IAEIAAUActivationRecord@1@@Z ; CSmartTrackerClass::PartialGetTracks2

; 1278 : 		SetEvent(pAR->HFinished);

	mov	ecx, DWORD PTR [esi+20]
	push	ecx
	call	ebx

; 1279 : 		if (WaitForMultipleObjects(2, HEvsReset, FALSE, INFINITE) == WAIT_OBJECT_0) break;

	push	-1
	lea	edx, DWORD PTR _HEvsReset$[esp+32]
	push	0
	push	edx
	push	2
	call	edi
	test	eax, eax
	je	SHORT $L80434

; 1280 : 		SetEvent(pAR->HFinished);

	mov	eax, DWORD PTR [esi+20]
	push	eax
	call	ebx
	push	-1
	lea	ecx, DWORD PTR _HEvsStart$[esp+32]
	push	0
	push	ecx
	push	2
	call	edi
	test	eax, eax
	jne	SHORT $L79373
$L80434:

; 1281 : 		}
; 1282 : 	_endthreadex(S_OK);

	push	0
	call	DWORD PTR __imp___endthreadex
	add	esp, 4

; 1283 : 	return S_OK;

	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx

; 1284 : 	};

	add	esp, 16					; 00000010H
	ret	4
?TrackerThreadHook@CSmartTrackerClass@@KGIPAX@Z ENDP	; CSmartTrackerClass::TrackerThreadHook
_TEXT	ENDS
PUBLIC	?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack2@@@Z ; CSmartTrackerClass::FinalizeTracks
PUBLIC	?GetTracks2@CSmartTrackerClass@@UAGJPAUTrack2@@PAHHH@Z ; CSmartTrackerClass::GetTracks2
;	COMDAT ?GetTracks2@CSmartTrackerClass@@UAGJPAUTrack2@@PAHHH@Z
_TEXT	SEGMENT
_pSpace$ = 12
_pMaxNumber$ = 16
_StartLayer$ = 20
_EndLayer$ = 24
_this$ = 8
_HEvs$ = -32
_p$ = -48
_i$ = 24
_TempF$ = -40
_TempG$ = -36
_TimeLimit$ = -48
?GetTracks2@CSmartTrackerClass@@UAGJPAUTrack2@@PAHHH@Z PROC NEAR ; CSmartTrackerClass::GetTracks2, COMDAT

; 1288 : {

	sub	esp, 48					; 00000030H

; 1289 : 	//AFX_MANAGE_STATE(AfxGetStaticModuleState())
; 1290 : 
; 1291 : 	// TODO: Add your implementation code here
; 1292 : 
; 1293 : 	HANDLE HEvs[MAX_PROCESSORS];
; 1294 : 	int p, i, j, k, maxtracksperthread = *pMaxNumber / T.Processors;

	mov	eax, DWORD PTR _pMaxNumber$[esp+44]
	push	ebx
	mov	ebx, DWORD PTR _this$[esp+48]
	push	ebp
	mov	eax, DWORD PTR [eax]
	push	esi
	cdq
	idiv	DWORD PTR [ebx+896]
	push	edi
	mov	edi, eax

; 1295 : 	int found, seqlength;
; 1296 : 	Grain *pTemp;
; 1297 : 	int TempF, TempG;
; 1298 : 	int TimeLimit = GetTickCount() + T.MaxTrackingTime;

	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, DWORD PTR [ebx+900]
	mov	ebp, eax

; 1299 : 	for (p = 0; p < T.Processors; p++)

	mov	eax, DWORD PTR [ebx+896]
	add	ebp, ecx
	xor	esi, esi
	mov	DWORD PTR _TimeLimit$[esp+64], ebp
	test	eax, eax
	jle	SHORT $L79401
	mov	ecx, DWORD PTR _pSpace$[esp+60]
	lea	ebp, DWORD PTR [edi+edi*2]
	lea	edx, DWORD PTR _HEvs$[esp+64]
	lea	eax, DWORD PTR [ebx+1012]
	lea	ebp, DWORD PTR [ebp+ebp*4]
	shl	ebp, 2
$L79399:

; 1300 : 	{
; 1301 : 		ThreadInfo[p].MaxTracks = maxtracksperthread;

	mov	DWORD PTR [eax+4], edi

; 1302 : 		ThreadInfo[p].pSpace = pSpace + p * maxtracksperthread;

	mov	DWORD PTR [eax], ecx

; 1303 : 		HEvs[p] = ThreadInfo[p].HFinished;

	mov	ebx, DWORD PTR [eax+12]
	inc	esi
	mov	DWORD PTR [edx], ebx

; 1304 : 		ThreadInfo[p].StartLayer = StartLayer;

	mov	ebx, DWORD PTR _StartLayer$[esp+60]
	mov	DWORD PTR [eax+20], ebx

; 1305 : 		ThreadInfo[p].EndLayer = EndLayer;

	mov	ebx, DWORD PTR _EndLayer$[esp+60]
	mov	DWORD PTR [eax+24], ebx

; 1306 : 		ThreadInfo[p].TimeLimit = TimeLimit;

	mov	ebx, DWORD PTR _TimeLimit$[esp+64]
	mov	DWORD PTR [eax+28], ebx
	mov	ebx, DWORD PTR _this$[esp+60]
	add	ecx, ebp
	add	edx, 4
	add	eax, 40					; 00000028H
	cmp	esi, DWORD PTR [ebx+896]
	jl	SHORT $L79399

; 1299 : 	for (p = 0; p < T.Processors; p++)

	mov	ebp, DWORD PTR _TimeLimit$[esp+64]
$L79401:

; 1307 : 		}
; 1308 : 	ResetEvent(HReset);

	mov	ecx, DWORD PTR [ebx+1000]
	mov	esi, DWORD PTR __imp__ResetEvent@4
	push	ecx
	call	esi

; 1309 : 	SetEvent(HStart);

	mov	edx, DWORD PTR [ebx+992]
	mov	edi, DWORD PTR __imp__SetEvent@4
	push	edx
	call	edi

; 1310 : 	PartialGetTracks2(ThreadInfo[0]);

	lea	eax, DWORD PTR [ebx+1004]
	mov	ecx, ebx
	push	eax
	call	?PartialGetTracks2@CSmartTrackerClass@@IAEIAAUActivationRecord@1@@Z ; CSmartTrackerClass::PartialGetTracks2

; 1311 : 
; 1312 : 	if (T.Processors > 1) WaitForMultipleObjects(T.Processors - 1, HEvs + 1, TRUE, INFINITE);

	mov	eax, DWORD PTR [ebx+896]
	cmp	eax, 1
	jle	SHORT $L79402
	push	-1
	lea	ecx, DWORD PTR _HEvs$[esp+72]
	push	1
	dec	eax
	push	ecx
	push	eax
	call	DWORD PTR __imp__WaitForMultipleObjects@16
$L79402:

; 1313 : 	ResetEvent(HStart);

	mov	edx, DWORD PTR [ebx+992]
	push	edx
	call	esi

; 1314 : 	SetEvent(HReset);

	mov	eax, DWORD PTR [ebx+1000]
	push	eax
	call	edi

; 1315 : 	if (T.Processors > 1) WaitForMultipleObjects(T.Processors - 1, HEvs + 1, TRUE, INFINITE);

	mov	eax, DWORD PTR [ebx+896]
	cmp	eax, 1
	jle	SHORT $L79403
	push	-1
	lea	ecx, DWORD PTR _HEvs$[esp+72]
	push	1
	dec	eax
	push	ecx
	push	eax
	call	DWORD PTR __imp__WaitForMultipleObjects@16
$L79403:

; 1316 : 
; 1317 : 	if (GetTickCount() > TimeLimit) 

	call	DWORD PTR __imp__GetTickCount@0
	cmp	eax, ebp
	jbe	SHORT $L79404

; 1318 : 	{
; 1319 : 		*pMaxNumber = 0;

	mov	edx, DWORD PTR _pMaxNumber$[esp+60]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [edx], 0

; 1320 : 		return S_FALSE;

	mov	eax, 1
	pop	ebx

; 1385 : 	}

	add	esp, 48					; 00000030H
	ret	20					; 00000014H
$L79404:

; 1321 : 		}
; 1322 : 
; 1323 : 	found = ThreadInfo[0].Found;
; 1324 : 	for (p = 1; p < T.Processors; p++)

	mov	ecx, DWORD PTR [ebx+896]
	mov	edi, DWORD PTR [ebx+1020]
	mov	eax, 1
	cmp	ecx, eax
	mov	DWORD PTR _p$[esp+64], eax
	jle	$L79408
	add	ebx, 1052				; 0000041cH
	mov	DWORD PTR -44+[esp+64], ebx
$L79406:

; 1325 : 		for (i = 0; i < ThreadInfo[p].Found; i++)

	mov	eax, DWORD PTR [ebx+8]
	xor	ebp, ebp
	cmp	eax, ebp
	mov	DWORD PTR _i$[esp+60], ebp
	jle	$L79407
	mov	esi, DWORD PTR _pSpace$[esp+60]
	lea	eax, DWORD PTR [edi+edi*2]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [esi+eax*4-56]
	mov	DWORD PTR 20+[esp+60], ecx
$L79409:

; 1326 : 		{
; 1327 : 			TempF = ThreadInfo[p].pSpace[i].Field;

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+ebp]
	lea	eax, DWORD PTR [edx+ebp]
	mov	DWORD PTR _TempF$[esp+64], ecx

; 1328 : 			TempG = ThreadInfo[p].pSpace[i].Grains;
; 1329 : 			pTemp = ThreadInfo[p].pSpace[i].pGrains;
; 1330 : 			for (j = 0; (j < found) && (pSpace[j].Field < ThreadInfo[p].pSpace[i].Field); j++);

	xor	ecx, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _TempG$[esp+64], edx
	mov	edx, DWORD PTR [eax+12]
	test	edi, edi
	jle	SHORT $L79417
	mov	eax, DWORD PTR [eax]
$L79412:
	cmp	DWORD PTR [esi], eax
	jge	SHORT $L79414
	inc	ecx
	add	esi, 60					; 0000003cH
	cmp	ecx, edi
	jl	SHORT $L79412

; 1331 : 			for (k = found; k > j; k--)

	jmp	SHORT $L79417
$L79414:
	cmp	edi, ecx
	jle	SHORT $L79417
	mov	eax, DWORD PTR 20+[esp+60]
	mov	esi, edi
	sub	esi, ecx
$L79415:

; 1332 : 			{
; 1333 : 				pSpace[k].Field = pSpace[k - 1].Field;

	mov	edx, DWORD PTR [eax-4]
	mov	DWORD PTR [eax+56], edx

; 1334 : 				pSpace[k].Grains = pSpace[k - 1].Grains;

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax+60], edx

; 1335 : 				pTemp = pSpace[k].pGrains;
; 1336 : 				pSpace[k].pGrains = pSpace[k - 1].pGrains;

	mov	ebx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+68]
	mov	DWORD PTR [eax+68], ebx

; 1337 : 				pSpace[k - 1].pGrains = pTemp;

	mov	DWORD PTR [eax+8], edx
	sub	eax, 60					; 0000003cH
	dec	esi
	jne	SHORT $L79415

; 1331 : 			for (k = found; k > j; k--)

	mov	ebx, DWORD PTR -44+[esp+64]
$L79417:

; 1338 : 				}
; 1339 : 			pSpace[j].Field = TempF;

	mov	esi, DWORD PTR _pSpace$[esp+60]
	lea	eax, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _TempF$[esp+64]

; 1340 : 			pSpace[j].Grains = TempG;
; 1341 : 			pSpace[j].pGrains = pTemp;
; 1342 : 			found++;

	inc	edi
	lea	eax, DWORD PTR [eax+eax*4]
	add	ebp, 60					; 0000003cH
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _TempG$[esp+64]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR 20+[esp+60]
	mov	eax, DWORD PTR _i$[esp+60]
	mov	ecx, DWORD PTR [ebx+8]
	add	edx, 60					; 0000003cH
	inc	eax
	mov	DWORD PTR 20+[esp+60], edx
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+60], eax
	jl	$L79409
$L79407:

; 1321 : 		}
; 1322 : 
; 1323 : 	found = ThreadInfo[0].Found;
; 1324 : 	for (p = 1; p < T.Processors; p++)

	mov	edx, DWORD PTR _this$[esp+60]
	mov	eax, DWORD PTR _p$[esp+64]
	inc	eax
	add	ebx, 40					; 00000028H
	mov	ecx, DWORD PTR [edx+896]
	mov	DWORD PTR _p$[esp+64], eax
	cmp	eax, ecx
	mov	DWORD PTR -44+[esp+64], ebx
	jl	$L79406
	mov	ebx, edx
$L79408:

; 1343 : 			}
; 1344 : 
; 1345 : 	*pMaxNumber = found;

	mov	eax, DWORD PTR _pMaxNumber$[esp+60]

; 1346 : 	for (i = 0; i < found; i++)

	test	edi, edi
	mov	DWORD PTR [eax], edi
	jle	$L79420
	mov	ecx, DWORD PTR _pSpace$[esp+60]
	mov	DWORD PTR -48+[esp+64], edi
	lea	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR 20+[esp+60], esi
$L79418:

; 1347 : 	{
; 1348 : 		seqlength = pSpace[i].Grains;

	mov	ebp, DWORD PTR [esi-8]

; 1349 : 		for (j = 0; (j < seqlength) && ((IntTrackGrain *)pSpace[i].pGrains)[j].T.pG->TrackLength < seqlength; j++);

	xor	eax, eax
	test	ebp, ebp
	jle	$L79440

; 1347 : 	{
; 1348 : 		seqlength = pSpace[i].Grains;

	mov	ecx, DWORD PTR [esi]
$L79422:

; 1349 : 		for (j = 0; (j < seqlength) && ((IntTrackGrain *)pSpace[i].pGrains)[j].T.pG->TrackLength < seqlength; j++);

	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+12], ebp
	jge	$L79424
	inc	eax
	add	ecx, 16					; 00000010H
	cmp	eax, ebp
	jl	SHORT $L79422
$L79425:

; 1355 : 			}
; 1356 : 		for (j = 0; j < seqlength; j++)

	xor	edx, edx
	mov	DWORD PTR -44+[esp+64], ebp
	mov	DWORD PTR 24+[esp+60], edx
$L79426:
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR 24+[esp+60]
	add	eax, ecx

; 1357 : 		{
; 1358 : 			IntTrackGrain *pIG = ((IntTrackGrain *)pSpace[i].pGrains) + j;
; 1359 : 			if (pIG->T.pG->pTrack2)

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, edx
	je	SHORT $L79427

; 1362 : 				for (k = 0; k < N.Grains; k++)

	cmp	DWORD PTR [ecx+4], edx
	jbe	SHORT $L79435

; 1360 : 			{
; 1361 : 				Track2 &N = *pIG->T.pG->pTrack2;

	xor	esi, esi
$L79433:

; 1362 : 				for (k = 0; k < N.Grains; k++)

	mov	eax, DWORD PTR [ecx+12]
	add	eax, esi
	inc	edx
	add	esi, 16					; 00000010H

; 1363 : 				{
; 1364 : 					IntTrackGrain *pIJ = ((IntTrackGrain *)N.pGrains) + k;
; 1365 : 					pIJ->T.pG->pTrack2 = 0;

	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [ebx+16], 0

; 1366 : 					pIJ->T.pG->TrackLength = 0;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR [ecx+4]
	cmp	edx, eax
	jb	SHORT $L79433

; 1362 : 				for (k = 0; k < N.Grains; k++)

	mov	esi, DWORD PTR 20+[esp+60]
$L79435:

; 1367 : 					}
; 1368 : 				N.Valid = false;
; 1369 : 				N.Grains = 0;

	xor	edx, edx
	mov	BYTE PTR [ecx+56], 0
	mov	DWORD PTR [ecx+4], edx
$L79427:
	mov	ecx, DWORD PTR 24+[esp+60]
	mov	eax, DWORD PTR -44+[esp+64]
	add	ecx, 16					; 00000010H
	dec	eax
	mov	DWORD PTR 24+[esp+60], ecx
	mov	DWORD PTR -44+[esp+64], eax
	jne	SHORT $L79426

; 1370 : 				}
; 1371 : 			}
; 1372 : 
; 1373 : 		for (j = 0; j < seqlength; j++)
; 1374 : 		{
; 1375 : 			IntTrackGrain *pIG = ((IntTrackGrain *)pSpace[i].pGrains) + j;
; 1376 : 			pIG->T.pG->pTrack2 = pSpace + i;

	add	esi, -12				; fffffff4H
	xor	ecx, ecx
	mov	edx, ebp
$L79438:
	mov	eax, DWORD PTR 20+[esp+60]
	mov	eax, DWORD PTR [eax]
	add	eax, ecx
	add	ecx, 16					; 00000010H
	dec	edx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [ebx+16], esi

; 1377 : 			pIG->T.pG->TrackLength = seqlength;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [eax+12], ebp
	jne	SHORT $L79438
	mov	ebx, DWORD PTR _this$[esp+60]
	mov	esi, DWORD PTR 20+[esp+60]
$L79440:

; 1378 : 			}
; 1379 : 		pSpace[i].Valid = true;

	mov	BYTE PTR [esi+44], 1
$L79419:

; 1346 : 	for (i = 0; i < found; i++)

	mov	eax, DWORD PTR -48+[esp+64]
	add	esi, 60					; 0000003cH
	dec	eax
	mov	DWORD PTR 20+[esp+60], esi
	mov	DWORD PTR -48+[esp+64], eax
	jne	$L79418
$L79420:

; 1380 : 		}
; 1381 : 
; 1382 : 	*pMaxNumber = FinalizeTracks(found, pSpace);

	mov	ecx, DWORD PTR _pSpace$[esp+60]
	push	ecx
	push	edi
	mov	ecx, ebx
	call	?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack2@@@Z ; CSmartTrackerClass::FinalizeTracks
	pop	edi
	pop	esi
	mov	edx, DWORD PTR _pMaxNumber$[esp+52]
	pop	ebp
	pop	ebx
	mov	DWORD PTR [edx], eax

; 1383 : 
; 1384 : 	return S_OK;

	xor	eax, eax

; 1385 : 	}

	add	esp, 48					; 00000030H
	ret	20					; 00000014H
$L79424:

; 1350 : 
; 1351 : 		if (j < seqlength) 

	cmp	eax, ebp
	jge	$L79425

; 1352 : 		{
; 1353 : 			pSpace[i].Valid = false;

	mov	BYTE PTR [esi+44], 0

; 1354 : 			continue;

	jmp	SHORT $L79419
?GetTracks2@CSmartTrackerClass@@UAGJPAUTrack2@@PAHHH@Z ENDP ; CSmartTrackerClass::GetTracks2
_TEXT	ENDS
PUBLIC	?InitTrackerData@CSmartTrackerClass@@IAEXXZ	; CSmartTrackerClass::InitTrackerData
;	COMDAT ?InitTrackerData@CSmartTrackerClass@@IAEXXZ
_TEXT	SEGMENT
_Temp$ = -72
?InitTrackerData@CSmartTrackerClass@@IAEXXZ PROC NEAR	; CSmartTrackerClass::InitTrackerData, COMDAT

; 1390 : {

	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi

; 1391 : 	SySalConfig Temp = {0, 0, 0};

	xor	ebx, ebx
	mov	ecx, 17					; 00000011H
	xor	eax, eax
	lea	edi, DWORD PTR _Temp$[esp+87]
	mov	BYTE PTR _Temp$[esp+84], bl
	mov	BYTE PTR _Temp$[esp+85], bl
	mov	BYTE PTR _Temp$[esp+86], bl

; 1392 : 	GetData(Temp, ConfigDataN, ConfigDataQDI, &T, true);

	push	1
	rep stosd
	stosb
	lea	eax, DWORD PTR [esi+136]
	lea	ecx, DWORD PTR _Temp$[esp+88]
	push	eax
	push	OFFSET FLAT:?ConfigDataQDI@@3PAUQueryDataInfo@@A ; ConfigDataQDI
	push	196					; 000000c4H
	push	ecx
	call	?GetData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX_N@Z ; GetData
	add	esp, 20					; 00000014H

; 1393 : 
; 1394 : 	T.GrainSpace = 0;

	mov	DWORD PTR [esi+920], ebx

; 1395 : 	T.ZLayer = 0;

	mov	DWORD PTR [esi+924], ebx

; 1396 : 	T.LayerGrains = 0;

	mov	DWORD PTR [esi+928], ebx

; 1397 : 	T.CellSpace = 0;

	mov	DWORD PTR [esi+932], ebx
	pop	edi
	pop	esi
	pop	ebx

; 1398 : }

	add	esp, 72					; 00000048H
	ret	0
?InitTrackerData@CSmartTrackerClass@@IAEXXZ ENDP	; CSmartTrackerClass::InitTrackerData
_TEXT	ENDS
PUBLIC	?GetCell@CSmartTrackerClass@@IAEHMM@Z		; CSmartTrackerClass::GetCell
;	COMDAT ?GetCell@CSmartTrackerClass@@IAEHMM@Z
_TEXT	SEGMENT
_Xp$ = 8
_Yp$ = 12
?GetCell@CSmartTrackerClass@@IAEHMM@Z PROC NEAR		; CSmartTrackerClass::GetCell, COMDAT

; 1402 : 	int Icl;
; 1403 : 	if ((Xp < T.Win.Xmin) || (Xp >= T.Win.Xmax) ||
; 1404 : 		(Yp < T.Win.Ymin) || (Yp >= T.Win.Ymax)) return -1;

	fld	DWORD PTR _Xp$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	fcomp	DWORD PTR [esi+940]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L79458
	fld	DWORD PTR _Xp$[esp+4]
	fcomp	DWORD PTR [esi+944]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L79458
	fld	DWORD PTR _Yp$[esp+4]
	fcomp	DWORD PTR [esi+948]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L79458
	fld	DWORD PTR _Yp$[esp+4]
	fcomp	DWORD PTR [esi+952]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L79458

; 1405 : 	Icl = ((int)((Yp - T.Win.Ymin) / T.DyCell)) * T.CellNumX +
; 1406 : 		(int)((Xp - T.Win.Xmin) / T.DxCell);

	fld	DWORD PTR _Yp$[esp+4]
	fsub	DWORD PTR [esi+948]
	fdiv	DWORD PTR [esi+960]
	call	__ftol
	fld	DWORD PTR _Xp$[esp+4]
	fsub	DWORD PTR [esi+940]
	mov	edi, eax
	imul	edi, DWORD PTR [esi+148]
	fdiv	DWORD PTR [esi+956]
	call	__ftol
	add	edi, eax

; 1407 : 	if ((Icl >= 0) && (Icl < T.CellsInLayer)) return Icl;

	js	SHORT $L79458
	cmp	edi, DWORD PTR [esi+936]
	jge	SHORT $L79458
	mov	eax, edi
	pop	edi
	pop	esi

; 1408 : 	return -1;
; 1409 : 	};

	ret	8
$L79458:
	pop	edi

; 1402 : 	int Icl;
; 1403 : 	if ((Xp < T.Win.Xmin) || (Xp >= T.Win.Xmax) ||
; 1404 : 		(Yp < T.Win.Ymin) || (Yp >= T.Win.Ymax)) return -1;

	or	eax, -1
	pop	esi

; 1408 : 	return -1;
; 1409 : 	};

	ret	8
?GetCell@CSmartTrackerClass@@IAEHMM@Z ENDP		; CSmartTrackerClass::GetCell
_TEXT	ENDS
PUBLIC	__real@4@3fffc000000000000000
;	COMDAT __real@4@3fffc000000000000000
; File D:\SySal2\SmartTracker5\SmartTrackerClass.cpp
CONST	SEGMENT
__real@4@3fffc000000000000000 DD 03fc00000r	; 1.5
CONST	ENDS
;	COMDAT ?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_dirx$ = 16
_diry$ = 20
_dirtol$ = 24
_normtol$ = 28
_bestnormdist$ = -4
_normdist$ = -12
_dx$ = -20
_dy$ = -16
_reddirtol$ = -8
?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z PROC NEAR	; Cell::FindGrain, COMDAT

; 1412 : {	

	sub	esp, 20					; 00000014H

; 1413 : 	IntGrain *pBest = 0;
; 1414 : 	int i;
; 1415 : 	float bestnormdist, normdist;
; 1416 : 	float dx, dy;
; 1417 : 	IntGrain *pStart = FirstG;
; 1418 : 	IntGrain *pEnd = FirstG + Free;
; 1419 : 	float reddirtol = dirtol * 1.5f;

	fld	DWORD PTR _dirtol$[esp+16]
	mov	eax, ecx
	push	esi
	fmul	DWORD PTR __real@4@3fffc000000000000000
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	xor	esi, esi
	lea	eax, DWORD PTR [eax+eax*4]
	fstp	DWORD PTR _reddirtol$[esp+24]
	lea	edx, DWORD PTR [ecx+eax*4]

; 1420 : 	for (IntGrain *pScan = pStart; pScan < pEnd; pScan++)

	cmp	ecx, edx
	jae	$L80473
$L79478:

; 1421 : 		if (fabs(dx = (pScan->Xcm - x)) <= reddirtol)

	fld	DWORD PTR [ecx]
	fsub	DWORD PTR _x$[esp+20]
	fst	DWORD PTR _dx$[esp+24]
	fabs
	fld	DWORD PTR _reddirtol$[esp+24]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L79479

; 1422 : 			if (fabs(dy = (pScan->Ycm - y)) <= reddirtol)

	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _y$[esp+20]
	fst	DWORD PTR _dy$[esp+24]
	fabs
	fld	DWORD PTR _reddirtol$[esp+24]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L79479

; 1423 : 				if ((normdist = fabs(dy * dirx - dx * diry)) < normtol)

	fld	DWORD PTR _dy$[esp+24]
	fmul	DWORD PTR _dirx$[esp+20]
	fld	DWORD PTR _dx$[esp+24]
	fmul	DWORD PTR _diry$[esp+20]
	fsubp	ST(1), ST(0)
	fabs
	fst	DWORD PTR _normdist$[esp+24]
	fcomp	DWORD PTR _normtol$[esp+20]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L79479

; 1424 : 					if (!pBest || normdist < bestnormdist)

	test	esi, esi
	je	SHORT $L79485
	fld	DWORD PTR _normdist$[esp+24]
	fcomp	DWORD PTR _bestnormdist$[esp+24]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L79479
$L79485:

; 1425 : 						if (fabs(dx * dirx + dy * diry) < dirtol)

	fld	DWORD PTR _dx$[esp+24]
	fmul	DWORD PTR _dirx$[esp+20]
	fld	DWORD PTR _dy$[esp+24]
	fmul	DWORD PTR _diry$[esp+20]
	faddp	ST(1), ST(0)
	fabs
	fld	DWORD PTR _dirtol$[esp+20]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L79479

; 1426 : 						{
; 1427 : 							bestnormdist = normdist;

	mov	eax, DWORD PTR _normdist$[esp+24]

; 1428 : 							pBest = pScan;

	mov	esi, ecx
	mov	DWORD PTR _bestnormdist$[esp+24], eax
$L79479:
	add	ecx, 20					; 00000014H
	cmp	ecx, edx
	jb	$L79478
$L80473:

; 1429 : 							};
; 1430 : 	return pBest;

	mov	eax, esi
	pop	esi

; 1431 : 	};

	add	esp, 20					; 00000014H
	ret	24					; 00000018H
?FindGrain@Cell@@QAEPAUIntGrain@@MMMMMM@Z ENDP		; Cell::FindGrain
_TEXT	ENDS
;	COMDAT ?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack@@AAH@Z
_TEXT	SEGMENT
_pTempGrains$ = 8
_Layers$ = 12
_SequenceLength$ = 16
_pTracks$ = 20
_NTracks$ = 24
_this$ = -4
?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack@@AAH@Z PROC NEAR ; CSmartTrackerClass::InsertNewTrack, COMDAT

; 1434 : {

	sub	esp, 8
	push	ebx
	mov	DWORD PTR _this$[esp+12], ecx
	push	ebp

; 1435 : 	int i, j;
; 1436 : 	for (i = 0; i < Layers; i++)

	mov	ebp, DWORD PTR _Layers$[esp+12]
	xor	ecx, ecx
	xor	eax, eax
	push	esi
	cmp	ebp, ecx
	push	edi
	jle	SHORT $L79503
	mov	esi, DWORD PTR _pTempGrains$[esp+20]
$L79497:

; 1437 : 		if (pTempGrains[i] && pTempGrains[i]->TrackLength >= SequenceLength) return;

	mov	edx, DWORD PTR [esi]
	cmp	edx, ecx
	je	SHORT $L79498
	mov	edi, DWORD PTR _SequenceLength$[esp+20]
	mov	ebx, DWORD PTR [edx+12]
	cmp	ebx, edi
	jge	$L79494
$L79498:

; 1435 : 	int i, j;
; 1436 : 	for (i = 0; i < Layers; i++)

	inc	eax
	add	esi, 4
	cmp	eax, ebp
	jl	SHORT $L79497

; 1438 : 	for (i = 0; i < Layers; i++)

	cmp	ebp, ecx
	jle	SHORT $L79503
	mov	ebx, DWORD PTR _pTempGrains$[esp+20]
	mov	DWORD PTR -8+[esp+24], ebp
$L79501:

; 1439 : 		if (pTempGrains[i] && pTempGrains[i]->pTrack)

	mov	eax, DWORD PTR [ebx]
	cmp	eax, ecx
	je	SHORT $L79502
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, ecx
	je	SHORT $L79502

; 1442 : 			for (j = 0; j < N.PointsN; j++)

	mov	eax, DWORD PTR [edx+4]
	xor	esi, esi
	cmp	eax, ecx
	jbe	SHORT $L79508

; 1440 : 		{
; 1441 : 			Track &N = *pTempGrains[i]->pTrack;

	xor	edi, edi
$L79506:

; 1443 : 			{
; 1444 : 				IntGrain *pG = ((IntTrackVector *)N.pPoints)[j].T.pG;

	mov	eax, DWORD PTR [edx+8]
	inc	esi
	mov	eax, DWORD PTR [edi+eax]
	add	edi, 12					; 0000000cH

; 1445 : 				pG->TrackLength = 0;

	mov	DWORD PTR [eax+12], ecx

; 1446 : 				pG->pTrack = 0;

	mov	DWORD PTR [eax+16], ecx
	cmp	esi, DWORD PTR [edx+4]
	jb	SHORT $L79506
$L79508:

; 1447 : 				}
; 1448 : 			N.Valid = false;

	mov	BYTE PTR [edx+76], cl

; 1449 : 			N.PointsN = 0;

	mov	DWORD PTR [edx+4], ecx
$L79502:
	mov	eax, DWORD PTR -8+[esp+24]
	add	ebx, 4
	dec	eax
	mov	DWORD PTR -8+[esp+24], eax
	jne	SHORT $L79501
$L79503:

; 1450 : 			}
; 1451 : 	Track &N = pTracks[NTracks++];

	mov	esi, DWORD PTR _NTracks$[esp+20]
	mov	edi, DWORD PTR _pTracks$[esp+20]
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [eax+eax*4]
	shl	edx, 4
	add	edx, edi
	inc	eax

; 1452 : 	for (i = j = 0; i < Layers; i++)

	xor	edi, edi
	cmp	ebp, ecx
	mov	DWORD PTR [esi], eax
	jle	SHORT $L79514

; 1450 : 			}
; 1451 : 	Track &N = pTracks[NTracks++];

	xor	ebx, ebx
$L79512:

; 1453 : 		if (pTempGrains[i])

	mov	eax, DWORD PTR _pTempGrains$[esp+20]
	mov	esi, DWORD PTR [eax+edi*4]
	cmp	esi, ecx
	je	SHORT $L79513

; 1454 : 		{
; 1455 : 			IntTrackVector *pIG = ((IntTrackVector *)N.pPoints) + j++;

	mov	eax, DWORD PTR [edx+8]

; 1456 : 			pIG->T.pG = pTempGrains[i];
; 1457 : 			pIG->T.pG->pTrack = &N;
; 1458 : 			pIG->T.pG->TrackLength = SequenceLength;

	mov	ebp, DWORD PTR _SequenceLength$[esp+20]
	add	eax, ebx
	add	ebx, 12					; 0000000cH
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [esi+16], edx
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [esi+12], ebp

; 1459 : 			pIG->T.Z = T.ZLayer[i];

	mov	esi, DWORD PTR _this$[esp+24]
	mov	ebp, DWORD PTR _Layers$[esp+20]
	mov	esi, DWORD PTR [esi+924]
	mov	esi, DWORD PTR [esi+edi*4]
	mov	DWORD PTR [eax+4], esi
$L79513:
	inc	edi
	cmp	edi, ebp
	jl	SHORT $L79512
$L79514:

; 1460 : 			}
; 1461 : 	N.Valid = true;
; 1462 : 	N.PointsN = SequenceLength;

	mov	ecx, DWORD PTR _SequenceLength$[esp+20]
	mov	BYTE PTR [edx+76], 1
	mov	DWORD PTR [edx+4], ecx
$L79494:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1463 : };

	add	esp, 8
	ret	20					; 00000014H
?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack@@AAH@Z ENDP ; CSmartTrackerClass::InsertNewTrack
_TEXT	ENDS
PUBLIC	?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack2@@AAH@Z ; CSmartTrackerClass::InsertNewTrack
;	COMDAT ?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack2@@AAH@Z
_TEXT	SEGMENT
_pTempGrains$ = 8
_Layers$ = 12
_SequenceLength$ = 16
_pTracks$ = 20
_NTracks$ = 24
_this$ = -4
?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack2@@AAH@Z PROC NEAR ; CSmartTrackerClass::InsertNewTrack, COMDAT

; 1466 : {

	sub	esp, 8
	push	ebx
	mov	DWORD PTR _this$[esp+12], ecx
	push	ebp

; 1467 : 	int i, j;
; 1468 : 	for (i = 0; i < Layers; i++)

	mov	ebp, DWORD PTR _Layers$[esp+12]
	xor	ecx, ecx
	xor	eax, eax
	push	esi
	cmp	ebp, ecx
	push	edi
	jle	SHORT $L79534
	mov	esi, DWORD PTR _pTempGrains$[esp+20]
$L79528:

; 1469 : 		if (pTempGrains[i] && pTempGrains[i]->TrackLength >= SequenceLength) return;

	mov	edx, DWORD PTR [esi]
	cmp	edx, ecx
	je	SHORT $L79529
	mov	edi, DWORD PTR _SequenceLength$[esp+20]
	mov	ebx, DWORD PTR [edx+12]
	cmp	ebx, edi
	jge	$L79525
$L79529:

; 1467 : 	int i, j;
; 1468 : 	for (i = 0; i < Layers; i++)

	inc	eax
	add	esi, 4
	cmp	eax, ebp
	jl	SHORT $L79528

; 1470 : 	for (i = 0; i < Layers; i++)

	cmp	ebp, ecx
	jle	SHORT $L79534
	mov	ebx, DWORD PTR _pTempGrains$[esp+20]
	mov	DWORD PTR -8+[esp+24], ebp
$L79532:

; 1471 : 		if (pTempGrains[i] && pTempGrains[i]->pTrack2)

	mov	eax, DWORD PTR [ebx]
	cmp	eax, ecx
	je	SHORT $L79533
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, ecx
	je	SHORT $L79533

; 1474 : 			for (j = 0; j < N.Grains; j++)

	mov	eax, DWORD PTR [edx+4]
	xor	esi, esi
	cmp	eax, ecx
	jbe	SHORT $L79539

; 1472 : 		{
; 1473 : 			Track2 &N = *pTempGrains[i]->pTrack2;

	xor	edi, edi
$L79537:

; 1475 : 			{
; 1476 : 				IntGrain *pG = ((IntTrackGrain *)N.pGrains)[j].T.pG;

	mov	eax, DWORD PTR [edx+12]
	inc	esi
	mov	eax, DWORD PTR [edi+eax]
	add	edi, 16					; 00000010H

; 1477 : 				pG->TrackLength = 0;

	mov	DWORD PTR [eax+12], ecx

; 1478 : 				pG->pTrack2 = 0;

	mov	DWORD PTR [eax+16], ecx
	cmp	esi, DWORD PTR [edx+4]
	jb	SHORT $L79537
$L79539:

; 1479 : 				}
; 1480 : 			N.Valid = false;

	mov	BYTE PTR [edx+56], cl

; 1481 : 			N.Grains = 0;

	mov	DWORD PTR [edx+4], ecx
$L79533:
	mov	eax, DWORD PTR -8+[esp+24]
	add	ebx, 4
	dec	eax
	mov	DWORD PTR -8+[esp+24], eax
	jne	SHORT $L79532
$L79534:

; 1482 : 			}
; 1483 : 	Track2 &N = pTracks[NTracks++];

	mov	esi, DWORD PTR _NTracks$[esp+20]
	mov	edi, DWORD PTR _pTracks$[esp+20]
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [eax+eax*2]
	inc	eax
	mov	DWORD PTR [esi], eax

; 1484 : 	for (i = j = 0; i < Layers; i++)

	xor	esi, esi
	lea	edx, DWORD PTR [edx+edx*4]
	cmp	ebp, ecx
	lea	edi, DWORD PTR [edi+edx*4]
	jle	SHORT $L79545

; 1482 : 			}
; 1483 : 	Track2 &N = pTracks[NTracks++];

	xor	ebx, ebx
$L79543:

; 1485 : 		if (pTempGrains[i])

	mov	eax, DWORD PTR _pTempGrains$[esp+20]
	mov	edx, DWORD PTR [eax+esi*4]
	cmp	edx, ecx
	je	SHORT $L79544

; 1486 : 		{
; 1487 : 			IntTrackGrain *pIG = ((IntTrackGrain *)N.pGrains) + j++;

	mov	eax, DWORD PTR [edi+12]

; 1488 : 			pIG->T.pG = pTempGrains[i];
; 1489 : 			pIG->T.pG->pTrack2 = &N;
; 1490 : 			pIG->T.pG->TrackLength = SequenceLength;

	mov	ebp, DWORD PTR _SequenceLength$[esp+20]
	add	eax, ebx
	add	ebx, 16					; 00000010H
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [edx+16], edi
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx+12], ebp

; 1491 : 			pIG->T.Z = T.ZLayer[i];

	mov	edx, DWORD PTR _this$[esp+24]
	mov	ebp, DWORD PTR _Layers$[esp+20]
	mov	edx, DWORD PTR [edx+924]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [eax+4], edx
$L79544:
	inc	esi
	cmp	esi, ebp
	jl	SHORT $L79543
$L79545:

; 1492 : 			}
; 1493 : 	N.Valid = true;
; 1494 : 	N.Grains = SequenceLength;

	mov	eax, DWORD PTR _SequenceLength$[esp+20]
	mov	BYTE PTR [edi+56], 1
	mov	DWORD PTR [edi+4], eax
$L79525:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1495 : };

	add	esp, 8
	ret	20					; 00000014H
?InsertNewTrack@CSmartTrackerClass@@IAEXPAPAUIntGrain@@HHPAUTrack2@@AAH@Z ENDP ; CSmartTrackerClass::InsertNewTrack
_TEXT	ENDS
;	COMDAT ?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack@@@Z
_TEXT	SEGMENT
_ntracks$ = 8
_pspace$ = 12
_j$ = 12
?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack@@@Z PROC NEAR ; CSmartTrackerClass::FinalizeTracks, COMDAT

; 1498 : {

	push	ecx

; 1499 : 	int i, j, k;
; 1500 : 	for (i = j = 0; i < ntracks; i++)

	mov	ecx, DWORD PTR _ntracks$[esp]
	xor	eax, eax
	test	ecx, ecx
	jle	$L79559
	push	ebx
	mov	ebx, DWORD PTR _pspace$[esp+4]
	push	ebp
	push	esi
	mov	edx, ebx
	push	edi
	add	ebx, 76					; 0000004cH
	mov	DWORD PTR 8+[esp+16], ecx
$L79557:

; 1501 : 		if (pspace[i].Valid)

	cmp	BYTE PTR [ebx], 0
	je	SHORT $L79558

; 1504 : 			Track &N = pspace[j++];
; 1505 : 			N.PointsN = O.PointsN;

	mov	esi, DWORD PTR [ebx-72]
	mov	ecx, edx
	inc	eax
	add	edx, 80					; 00000050H
	mov	DWORD PTR [ecx+4], esi

; 1506 : 			O.Valid = false;

	mov	BYTE PTR [ebx], 0

; 1507 : 			N.Valid = true;
; 1508 : 			for (k = 0; k < N.PointsN; k++)

	mov	esi, DWORD PTR [ecx+4]
	xor	ebp, ebp
	test	esi, esi
	mov	DWORD PTR _j$[esp+16], eax
	mov	DWORD PTR -4+[esp+20], edx
	mov	BYTE PTR [ecx+76], 1
	jbe	SHORT $L79558

; 1502 : 		{
; 1503 : 			Track &O = pspace[i];

	xor	edx, edx
$L79563:

; 1509 : 			{
; 1510 : 				IntGrain *pG = ((IntTrackVector *)O.pPoints)[k].T.pG;

	mov	eax, DWORD PTR [ebx-68]
	inc	ebp
	mov	edi, DWORD PTR [eax+edx]
	lea	esi, DWORD PTR [eax+edx]

; 1511 : 				N.pPoints[k].Z = ((IntTrackVector *)O.pPoints)[k].T.Z;

	mov	eax, DWORD PTR [ecx+8]
	add	edx, 12					; 0000000cH
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+edx-4], esi

; 1512 : 				N.pPoints[k].X = pG->Xcm;

	mov	eax, DWORD PTR [ecx+8]
	mov	esi, DWORD PTR [edi]
	mov	DWORD PTR [eax+edx-12], esi

; 1513 : 				N.pPoints[k].Y = pG->Ycm;

	mov	eax, DWORD PTR [ecx+8]
	mov	esi, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+edx-8], esi
	mov	eax, DWORD PTR [ecx+4]
	cmp	ebp, eax
	jb	SHORT $L79563
	mov	eax, DWORD PTR _j$[esp+16]
	mov	edx, DWORD PTR -4+[esp+20]
$L79558:
	mov	ecx, DWORD PTR 8+[esp+16]
	add	ebx, 80					; 00000050H
	dec	ecx
	mov	DWORD PTR 8+[esp+16], ecx
	jne	SHORT $L79557
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L79559:

; 1514 : 				}
; 1515 : 			}
; 1516 : 	return j;
; 1517 : 	}

	pop	ecx
	ret	8
?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack@@@Z ENDP ; CSmartTrackerClass::FinalizeTracks
_TEXT	ENDS
;	COMDAT ?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack2@@@Z
_TEXT	SEGMENT
_ntracks$ = 8
_pspace$ = 12
_this$ = -12
_j$ = -8
_a$ = 8
_dsx$ = -20
?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack2@@@Z PROC NEAR ; CSmartTrackerClass::FinalizeTracks, COMDAT

; 1520 : {

	sub	esp, 20					; 00000014H

; 1521 : 	int i, j, k, a, ta;
; 1522 : 	float dsx, dsy;
; 1523 : 	if (T.Layer > 1)

	mov	edx, DWORD PTR [ecx+976]
	mov	DWORD PTR _this$[esp+20], ecx
	cmp	edx, 1
	jle	SHORT $L79581

; 1524 : 	{
; 1525 : 		dsx = T.DispX / (T.ZLayer[0] - T.ZLayer[T.Layer - 1]);

	mov	eax, DWORD PTR [ecx+924]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [eax+edx*4-4]
	fld	DWORD PTR [ecx+980]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR _dsx$[esp+20]

; 1526 : 		dsy = T.DispY / (T.ZLayer[0] - T.ZLayer[T.Layer - 1]);

	fdivr	DWORD PTR [ecx+984]

; 1527 : 		}
; 1528 : 	else dsx = dsy = 0.0f;

	jmp	SHORT $L79582
$L79581:
	fld	DWORD PTR __real@4@00000000000000000000
	mov	DWORD PTR _dsx$[esp+20], 0
$L79582:

; 1529 : 	for (i = j = 0; i < ntracks; i++)

	mov	ecx, DWORD PTR _ntracks$[esp+16]
	xor	eax, eax
	test	ecx, ecx
	jle	$L80514
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _pspace$[esp+28]
	push	edi
	mov	DWORD PTR -16+[esp+36], ecx
	lea	edi, DWORD PTR [esi+56]
	mov	DWORD PTR 12+[esp+32], edi
$L79583:

; 1530 : 		if (pspace[i].Valid)

	mov	dl, BYTE PTR [edi]
	xor	ecx, ecx
	cmp	dl, cl
	je	$L79584

; 1533 : 			Track2 &N = pspace[j++];
; 1534 : 			N.Grains = O.Grains;

	mov	ebx, DWORD PTR [edi-52]
	mov	edx, esi
	inc	eax
	add	esi, 60					; 0000003cH
	mov	DWORD PTR [edx+4], ebx

; 1535 : 			O.Valid = false;

	mov	BYTE PTR [edi], cl

; 1536 : 			N.Valid = true;
; 1537 : 			a = 0;
; 1538 : 			for (k = 0; k < N.Grains; k++)

	mov	ebx, DWORD PTR [edx+4]
	mov	DWORD PTR _j$[esp+36], eax
	cmp	ebx, ecx
	mov	DWORD PTR -4+[esp+36], esi
	mov	BYTE PTR [edx+56], 1
	mov	DWORD PTR _a$[esp+32], ecx
	jbe	SHORT $L79591

; 1531 : 		{
; 1532 : 			Track2 &O = pspace[i];

	xor	esi, esi
	jmp	SHORT $L79589
$L80515:
	mov	edi, DWORD PTR 12+[esp+32]
$L79589:

; 1539 : 			{
; 1540 : 				IntGrain *pG = ((IntTrackGrain *)O.pGrains)[k].T.pG;

	mov	eax, DWORD PTR [edi-44]
	mov	edi, DWORD PTR [eax+esi]

; 1541 : 				a += (ta = pG->Area);

	mov	ebp, DWORD PTR [edi+8]
	lea	ebx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR _a$[esp+32]

; 1542 : 				float dz = (N.pGrains[k].Z = ((IntTrackGrain *)O.pGrains)[k].T.Z) - T.ZLayer[0];

	mov	ebx, DWORD PTR [ebx+4]
	add	eax, ebp
	mov	DWORD PTR _a$[esp+32], eax
	mov	eax, DWORD PTR [edx+12]
	inc	ecx
	mov	DWORD PTR [esi+eax+12], ebx
	mov	eax, DWORD PTR [edx+12]
	fld	DWORD PTR [esi+eax+12]
	lea	ebx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR _this$[esp+36]
	mov	eax, DWORD PTR [eax+924]
	add	esi, 16					; 00000010H
	fsub	DWORD PTR [eax]

; 1543 : 				N.pGrains[k].X = pG->Xcm + dsx * dz;

	fld	ST(0)
	fmul	DWORD PTR _dsx$[esp+36]
	fadd	DWORD PTR [edi]
	fstp	DWORD PTR [ebx+4]

; 1544 : 				N.pGrains[k].Y = pG->Ycm + dsy * dz;				

	mov	eax, DWORD PTR [edx+12]
	fmul	ST(0), ST(1)
	fadd	DWORD PTR [edi+4]
	fstp	DWORD PTR [esi+eax-8]

; 1545 : 				N.pGrains[k].Area = ta;

	mov	eax, DWORD PTR [edx+12]
	mov	WORD PTR [esi+eax-16], bp
	mov	eax, DWORD PTR [edx+4]
	cmp	ecx, eax
	jb	SHORT $L80515
	mov	eax, DWORD PTR _j$[esp+36]
	mov	edi, DWORD PTR 12+[esp+32]
	mov	esi, DWORD PTR -4+[esp+36]
$L79591:

; 1546 : 				}
; 1547 : 			N.AreaSum = a;

	mov	ecx, DWORD PTR _a$[esp+32]
	mov	DWORD PTR [edx+8], ecx
$L79584:
	mov	ecx, DWORD PTR -16+[esp+36]
	add	edi, 60					; 0000003cH
	dec	ecx
	mov	DWORD PTR 12+[esp+32], edi
	mov	DWORD PTR -16+[esp+36], ecx
	jne	$L79583
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	fstp	ST(0)

; 1548 : 			}
; 1549 : 	return j;
; 1550 : 	}

	add	esp, 20					; 00000014H
	ret	8
$L80514:

; 1527 : 		}
; 1528 : 	else dsx = dsy = 0.0f;

	fstp	ST(0)

; 1548 : 			}
; 1549 : 	return j;
; 1550 : 	}

	add	esp, 20					; 00000014H
	ret	8
?FinalizeTracks@CSmartTrackerClass@@IAEHHPAUTrack2@@@Z ENDP ; CSmartTrackerClass::FinalizeTracks
_TEXT	ENDS
PUBLIC	?PutData@CSmartTrackerClass@@SAXPAUSySalConfig@@PAUConfigData@@@Z ; CSmartTrackerClass::PutData
;	COMDAT ?PutData@CSmartTrackerClass@@SAXPAUSySalConfig@@PAUConfigData@@@Z
_TEXT	SEGMENT
_pConfig$ = 8
_pC$ = 12
?PutData@CSmartTrackerClass@@SAXPAUSySalConfig@@PAUConfigData@@@Z PROC NEAR ; CSmartTrackerClass::PutData, COMDAT

; 1554 : 	::PutData(*pConfig, ConfigDataN, ConfigDataQDI, pC);

	mov	eax, DWORD PTR _pC$[esp-4]
	mov	ecx, DWORD PTR _pConfig$[esp-4]
	push	eax
	push	OFFSET FLAT:?ConfigDataQDI@@3PAUQueryDataInfo@@A ; ConfigDataQDI
	push	196					; 000000c4H
	push	ecx
	call	?PutData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z ; PutData
	add	esp, 16					; 00000010H

; 1555 : }

	ret	0
?PutData@CSmartTrackerClass@@SAXPAUSySalConfig@@PAUConfigData@@@Z ENDP ; CSmartTrackerClass::PutData
_TEXT	ENDS
PUBLIC	??_C@_02MECO@?$CFd?$AA@				; `string'
PUBLIC	??_C@_02JBAA@?$CFf?$AA@				; `string'
EXTRN	__imp__sscanf:NEAR
;	COMDAT ??_C@_02MECO@?$CFd?$AA@
; File D:\SySal2\SmartTracker5\..\Common\Config2.cpp
_DATA	SEGMENT
??_C@_02MECO@?$CFd?$AA@ DB '%d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02JBAA@?$CFf?$AA@
_DATA	SEGMENT
??_C@_02JBAA@?$CFf?$AA@ DB '%f', 00H			; `string'
_DATA	ENDS
;	COMDAT ?GetData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX_N@Z
_TEXT	SEGMENT
_C$ = 8
_QueryDataCount$ = 12
_pQDI$ = 16
_pC$ = 20
_UseDefault$ = 24
_i$ = -4
?GetData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX_N@Z PROC NEAR ; GetData, COMDAT

; 6    : {

	push	ecx

; 7    : 	int i, j;
; 8    : 	char *pD;
; 9    : 	for (i = 0; i < QueryDataCount; i++)

	mov	eax, DWORD PTR _QueryDataCount$[esp]
	push	ebx
	push	ebp
	push	esi
	test	eax, eax
	push	edi
	mov	DWORD PTR _i$[esp+20], 0
	jle	$L79618
	mov	eax, DWORD PTR _pQDI$[esp+16]
	lea	ebx, DWORD PTR [eax+68]
$L79611:

; 10   : 	{
; 11   : 		for (j = 0; (j < C.CountOfItems) && strcmp(pQDI[i].Name, C.pItems + j * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN)); j++);

	mov	ecx, DWORD PTR _C$[esp+16]
	xor	edi, edi
	mov	eax, DWORD PTR [ecx+64]
	test	eax, eax
	mov	DWORD PTR 16+[esp+16], eax
	jle	SHORT $L79616
	mov	ebp, DWORD PTR [ecx+68]
$L79614:
	mov	esi, ebp
	lea	eax, DWORD PTR [ebx-68]
$L80527:
	mov	dl, BYTE PTR [eax]
	mov	cl, dl
	cmp	dl, BYTE PTR [esi]
	jne	SHORT $L80528
	test	cl, cl
	je	SHORT $L80529
	mov	dl, BYTE PTR [eax+1]
	mov	cl, dl
	cmp	dl, BYTE PTR [esi+1]
	jne	SHORT $L80528
	add	eax, 2
	add	esi, 2
	test	cl, cl
	jne	SHORT $L80527
$L80529:
	xor	eax, eax
	jmp	SHORT $L80530
$L80528:
	sbb	eax, eax
	sbb	eax, -1
$L80530:
	test	eax, eax
	je	SHORT $L80533
	mov	eax, DWORD PTR 16+[esp+16]
	inc	edi
	add	ebp, 128				; 00000080H
	cmp	edi, eax
	jl	SHORT $L79614
	jmp	SHORT $L79616
$L80533:
	mov	eax, DWORD PTR 16+[esp+16]
$L79616:

; 12   : 		if (j == C.CountOfItems)

	cmp	edi, eax
	jne	SHORT $L79617

; 13   : 		{
; 14   : 			if (UseDefault) pD = pQDI[i].Default;

	mov	al, BYTE PTR _UseDefault$[esp+16]
	test	al, al
	je	$L79618
	lea	eax, DWORD PTR [ebx+4]

; 15   : 			else return i;
; 16   : 			}
; 17   : 		else pD = C.pItems + j * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN) + SYSAL_MAXCONFIG_ENTRY_NAME_LEN;

	jmp	SHORT $L79620
$L79617:
	mov	eax, DWORD PTR _C$[esp+16]
	shl	edi, 7
	mov	ecx, DWORD PTR [eax+68]
	lea	eax, DWORD PTR [edi+ecx+64]
$L79620:

; 18   : 		switch (pQDI[i].Format)
; 19   : 		{

	movsx	ecx, BYTE PTR [ebx-4]
	dec	ecx
	je	SHORT $L79625
	dec	ecx
	je	SHORT $L79630
	dec	ecx
	jne	SHORT $L79618

; 25   : 
; 26   : 			case ST_STRING:	strncpy(((char *)pC + pQDI[i].Position), pD, SYSAL_MAXCONFIG_ENTRY_VALUE_LEN);

	mov	edx, DWORD PTR [ebx]
	mov	esi, DWORD PTR _pC$[esp+16]
	push	64					; 00000040H
	add	edx, esi
	push	eax
	push	edx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH

; 27   : 							break;

	jmp	SHORT $L79612
$L79630:

; 21   : 							break;
; 22   : 
; 23   : 			case ST_FLOAT:	if (sscanf(pD, "%f", (float *)((char *)pC + pQDI[i].Position)) != 1) return i;

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _pC$[esp+16]
	add	ecx, edx
	push	ecx
	push	OFFSET FLAT:??_C@_02JBAA@?$CFf?$AA@	; `string'
	push	eax
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $L79618

; 24   : 							break;

	jmp	SHORT $L79612
$L79625:

; 20   : 			case ST_INT:	if (sscanf(pD, "%d", (int *)((char *)pC + pQDI[i].Position)) != 1) return i;

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _pC$[esp+16]
	add	edx, ecx
	push	edx
	push	OFFSET FLAT:??_C@_02MECO@?$CFd?$AA@	; `string'
	push	eax
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $L79618
$L79612:

; 7    : 	int i, j;
; 8    : 	char *pD;
; 9    : 	for (i = 0; i < QueryDataCount; i++)

	mov	eax, DWORD PTR _i$[esp+20]
	mov	ecx, DWORD PTR _QueryDataCount$[esp+16]
	inc	eax
	add	ebx, 136				; 00000088H
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+20], eax
	jl	$L79611
$L79618:

; 28   : 
; 29   : 			default:		return i;			
; 30   : 			};
; 31   : 		};
; 32   : 	return i;

	mov	eax, DWORD PTR _i$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 33   : 	};

	pop	ecx
	ret	0
?GetData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX_N@Z ENDP ; GetData
_TEXT	ENDS
PUBLIC	??_C@_02DLJH@?$CFg?$AA@				; `string'
EXTRN	__imp__sprintf:NEAR
EXTRN	__imp__CoTaskMemAlloc@4:NEAR
EXTRN	__imp__CoTaskMemFree@4:NEAR
;	COMDAT ??_C@_02DLJH@?$CFg?$AA@
; File D:\SySal2\SmartTracker5\..\Common\Config2.cpp
_DATA	SEGMENT
??_C@_02DLJH@?$CFg?$AA@ DB '%g', 00H			; `string'
_DATA	ENDS
;	COMDAT ?PutData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z
_TEXT	SEGMENT
_C$ = 8
_QueryDataCount$ = 12
_pQDI$ = 16
_pC$ = 20
?PutData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z PROC NEAR ; PutData, COMDAT

; 36   : {

	push	ebx
	push	esi

; 37   : 	if (C.pItems) CoTaskMemFree(C.pItems);

	mov	esi, DWORD PTR _C$[esp+4]
	push	edi
	xor	edi, edi
	mov	eax, DWORD PTR [esi+68]
	cmp	eax, edi
	je	SHORT $L79644
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
$L79644:

; 38   : 	C.pItems = 0;
; 39   : 	C.CountOfItems = 0;
; 40   : 	if (!QueryDataCount) return 0;

	mov	ebx, DWORD PTR _QueryDataCount$[esp+8]
	mov	DWORD PTR [esi+68], edi
	cmp	ebx, edi
	mov	DWORD PTR [esi+64], edi
	jne	SHORT $L79645
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 64   : 	};

	ret	0
$L79645:

; 41   : 	if (!(C.pItems = (char *)CoTaskMemAlloc(QueryDataCount * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN)))) return 0;

	mov	edi, ebx
	shl	edi, 7
	push	edi
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	mov	edx, eax
	test	edx, edx
	mov	DWORD PTR [esi+68], edx
	jne	SHORT $L79647
	pop	edi
	pop	esi
	pop	ebx

; 64   : 	};

	ret	0
$L79647:

; 42   : 	memset(C.pItems, 0, QueryDataCount * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN));

	mov	ecx, edi
	mov	edi, edx
	mov	edx, ecx
	xor	eax, eax
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb

; 43   : 	for (C.CountOfItems = 0; C.CountOfItems < QueryDataCount; C.CountOfItems++)

	test	ebx, ebx
	mov	DWORD PTR [esi+64], 0
	jle	$L79664
	mov	edi, DWORD PTR _pC$[esp+8]
	mov	ebx, DWORD PTR __imp__strncpy
$L79648:

; 44   : 	{
; 45   : 		switch (pQDI[C.CountOfItems].Format)
; 46   : 		{

	mov	eax, DWORD PTR [esi+64]
	mov	edx, DWORD PTR _pQDI$[esp+8]
	mov	ecx, eax
	shl	ecx, 4
	add	ecx, eax
	lea	ecx, DWORD PTR [edx+ecx*8]
	movsx	edx, BYTE PTR [ecx+64]
	dec	edx
	je	SHORT $L79655
	dec	edx
	je	SHORT $L79658
	dec	edx
	jne	$L79664

; 54   : 
; 55   : 			case ST_STRING:	strncpy(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN) + SYSAL_MAXCONFIG_ENTRY_NAME_LEN,
; 56   : 								((char *)pC + pQDI[C.CountOfItems].Position), SYSAL_MAXCONFIG_ENTRY_VALUE_LEN);

	mov	ecx, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR [esi+68]
	shl	eax, 7
	add	ecx, edi
	push	64					; 00000040H
	lea	eax, DWORD PTR [eax+edx+64]
	push	ecx
	push	eax
	call	ebx

; 57   : 							break;

	jmp	SHORT $L80541
$L79658:

; 49   : 							break;
; 50   : 
; 51   : 			case ST_FLOAT:	sprintf(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN) + SYSAL_MAXCONFIG_ENTRY_NAME_LEN,
; 52   : 								"%g", *(float *)((char *)pC + pQDI[C.CountOfItems].Position));

	mov	ecx, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR [esi+68]
	sub	esp, 8
	fld	DWORD PTR [ecx+edi]
	shl	eax, 7
	fstp	QWORD PTR [esp]
	lea	eax, DWORD PTR [eax+edx+64]
	push	OFFSET FLAT:??_C@_02DLJH@?$CFg?$AA@	; `string'
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 53   : 							break;

	jmp	SHORT $L79652
$L79655:

; 47   : 			case ST_INT:	sprintf(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN) + SYSAL_MAXCONFIG_ENTRY_NAME_LEN,
; 48   : 								"%d", *(int *)((char *)pC + pQDI[C.CountOfItems].Position));

	mov	ecx, DWORD PTR [ecx+68]
	shl	eax, 7
	mov	edx, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [esi+68]
	push	edx
	push	OFFSET FLAT:??_C@_02MECO@?$CFd?$AA@	; `string'
	lea	edx, DWORD PTR [eax+ecx+64]
	push	edx
	call	DWORD PTR __imp__sprintf
$L80541:
	add	esp, 12					; 0000000cH
$L79652:

; 58   : 
; 59   : 			default:		return C.CountOfItems;
; 60   : 			};
; 61   : 		strncpy(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN), pQDI[C.CountOfItems].Name, SYSAL_MAXCONFIG_ENTRY_NAME_LEN);

	mov	eax, DWORD PTR [esi+64]
	mov	edx, DWORD PTR _pQDI$[esp+8]
	mov	ecx, eax
	push	64					; 00000040H
	shl	ecx, 4
	add	ecx, eax
	shl	eax, 7
	lea	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR [esi+68]
	add	eax, edx
	push	ecx
	push	eax
	call	ebx
	mov	ecx, DWORD PTR [esi+64]
	mov	edx, DWORD PTR _QueryDataCount$[esp+20]
	add	esp, 12					; 0000000cH
	inc	ecx
	mov	eax, ecx
	mov	DWORD PTR [esi+64], ecx
	cmp	eax, edx
	jl	$L79648
$L79664:

; 62   : 		};	
; 63   : 	return C.CountOfItems;

	mov	eax, DWORD PTR [esi+64]
	pop	edi
	pop	esi
	pop	ebx

; 64   : 	};

	ret	0
?PutData@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z ENDP ; PutData
_TEXT	ENDS
PUBLIC	?PutDataPreserve@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z ; PutDataPreserve
EXTRN	__imp__CoTaskMemRealloc@8:NEAR
;	COMDAT ?PutDataPreserve@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z
_TEXT	SEGMENT
_C$ = 8
_QueryDataCount$ = 12
_pQDI$ = 16
_pC$ = 20
?PutDataPreserve@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z PROC NEAR ; PutDataPreserve, COMDAT

; 67   : {

	push	ebx

; 68   : 	C.pItems = (char *)CoTaskMemRealloc(C.pItems, (QueryDataCount + C.CountOfItems) * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN));

	mov	ebx, DWORD PTR _QueryDataCount$[esp]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _C$[esp+8]
	mov	eax, ebx
	push	edi
	mov	ecx, DWORD PTR [esi+64]
	add	eax, ecx
	mov	ecx, DWORD PTR [esi+68]
	shl	eax, 7
	push	eax
	push	ecx
	call	DWORD PTR __imp__CoTaskMemRealloc@8

; 69   : 	memset(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN), 0, QueryDataCount * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN));

	mov	edi, DWORD PTR [esi+64]
	mov	ecx, ebx
	mov	edx, eax
	xor	eax, eax
	shl	edi, 7
	shl	ecx, 7
	mov	DWORD PTR [esi+68], edx
	add	edi, edx
	mov	edx, ecx
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb

; 70   : 	int OldCount = C.CountOfItems;

	mov	edi, DWORD PTR [esi+64]

; 71   : 	for (; C.CountOfItems < (QueryDataCount + OldCount); C.CountOfItems++)

	add	ebx, edi
	cmp	edi, ebx
	mov	DWORD PTR 8+[esp+12], ebx
	jge	$L79688
	mov	ebx, DWORD PTR _pC$[esp+12]
	mov	ebp, DWORD PTR _pQDI$[esp+12]
$L79673:

; 72   : 	{
; 73   : 		switch (pQDI[C.CountOfItems - OldCount].Format)
; 74   : 		{

	mov	eax, DWORD PTR [esi+64]
	mov	ecx, eax
	sub	ecx, edi
	mov	edx, ecx
	shl	edx, 4
	add	edx, ecx
	lea	ecx, DWORD PTR [ebp+edx*8]
	movsx	edx, BYTE PTR [ebp+edx*8+64]
	dec	edx
	je	SHORT $L79680
	dec	edx
	je	SHORT $L79683
	dec	edx
	jne	$L79688

; 82   : 
; 83   : 			case ST_STRING:	strncpy(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN) + SYSAL_MAXCONFIG_ENTRY_NAME_LEN,
; 84   : 								((char *)pC + pQDI[C.CountOfItems - OldCount].Position), SYSAL_MAXCONFIG_ENTRY_VALUE_LEN);

	mov	ecx, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR [esi+68]
	shl	eax, 7
	add	ecx, ebx
	push	64					; 00000040H
	lea	eax, DWORD PTR [eax+edx+64]
	push	ecx
	push	eax
	call	DWORD PTR __imp__strncpy

; 85   : 							break;

	jmp	SHORT $L80548
$L79683:

; 77   : 							break;
; 78   : 
; 79   : 			case ST_FLOAT:	sprintf(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN) + SYSAL_MAXCONFIG_ENTRY_NAME_LEN,
; 80   : 								"%g", *(float *)((char *)pC + pQDI[C.CountOfItems - OldCount].Position));

	mov	ecx, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR [esi+68]
	sub	esp, 8
	fld	DWORD PTR [ecx+ebx]
	shl	eax, 7
	fstp	QWORD PTR [esp]
	lea	eax, DWORD PTR [eax+edx+64]
	push	OFFSET FLAT:??_C@_02DLJH@?$CFg?$AA@	; `string'
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 81   : 							break;

	jmp	SHORT $L79677
$L79680:

; 75   : 			case ST_INT:	sprintf(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN) + SYSAL_MAXCONFIG_ENTRY_NAME_LEN,
; 76   : 								"%d", *(int *)((char *)pC + pQDI[C.CountOfItems - OldCount].Position));

	mov	ecx, DWORD PTR [ecx+68]
	shl	eax, 7
	mov	edx, DWORD PTR [ecx+ebx]
	mov	ecx, DWORD PTR [esi+68]
	push	edx
	push	OFFSET FLAT:??_C@_02MECO@?$CFd?$AA@	; `string'
	lea	edx, DWORD PTR [eax+ecx+64]
	push	edx
	call	DWORD PTR __imp__sprintf
$L80548:
	add	esp, 12					; 0000000cH
$L79677:

; 86   : 
; 87   : 			default:		return C.CountOfItems;
; 88   : 			};
; 89   : 		strncpy(C.pItems + C.CountOfItems * (SYSAL_MAXCONFIG_ENTRY_NAME_LEN + SYSAL_MAXCONFIG_ENTRY_VALUE_LEN), pQDI[C.CountOfItems - OldCount].Name, SYSAL_MAXCONFIG_ENTRY_NAME_LEN);

	mov	eax, DWORD PTR [esi+64]
	push	64					; 00000040H
	mov	ecx, eax
	sub	ecx, edi
	mov	edx, ecx
	shl	edx, 4
	add	edx, ecx
	shl	eax, 7
	lea	ecx, DWORD PTR [ebp+edx*8]
	mov	edx, DWORD PTR [esi+68]
	add	eax, edx
	push	ecx
	push	eax
	call	DWORD PTR __imp__strncpy
	mov	ecx, DWORD PTR [esi+64]
	mov	edx, DWORD PTR 8+[esp+24]
	add	esp, 12					; 0000000cH
	inc	ecx
	mov	eax, ecx
	mov	DWORD PTR [esi+64], ecx
	cmp	eax, edx
	jl	$L79673
$L79688:

; 90   : 		};	
; 91   : 	return C.CountOfItems;

	mov	eax, DWORD PTR [esi+64]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 92   : 	};

	ret	0
?PutDataPreserve@@YAHAAUSySalConfig@@HPAUQueryDataInfo@@PAX@Z ENDP ; PutDataPreserve
_TEXT	ENDS
END
