//
// File generated by \root\bin\rootcint.exe at Mon May 31 18:31:19 2004.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

#include "Dict.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "RtypesImp.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void TSRHeader_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void TSRHeader_Dictionary();
   TClass *TSRHeader_IsA(const void*);
   void *new_TSRHeader(void *p = 0);
   void *newArray_TSRHeader(Long_t size);
   void delete_TSRHeader(void *p);
   void deleteArray_TSRHeader(void *p);
   void destruct_TSRHeader(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSRHeader*)
   {
      TSRHeader *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSRHeader", "SySalROOTs.h", 154,
                  typeid(TSRHeader), DefineBehavior(ptr, ptr),
                  0, &TSRHeader_Dictionary, &TSRHeader_IsA, 0);
      instance.SetNew(&new_TSRHeader);
      instance.SetNewArray(&newArray_TSRHeader);
      instance.SetDelete(&delete_TSRHeader);
      instance.SetDeleteArray(&deleteArray_TSRHeader);
      instance.SetDestructor(&destruct_TSRHeader);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSRHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   void TSRHeader_Dictionary() {
      ROOT::GenerateInitInstance((const TSRHeader*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TSRLayer_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void TSRLayer_Dictionary();
   TClass *TSRLayer_IsA(const void*);
   void *new_TSRLayer(void *p = 0);
   void *newArray_TSRLayer(Long_t size);
   void delete_TSRLayer(void *p);
   void deleteArray_TSRLayer(void *p);
   void destruct_TSRLayer(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSRLayer*)
   {
      TSRLayer *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSRLayer", "SySalROOTs.h", 176,
                  typeid(TSRLayer), DefineBehavior(ptr, ptr),
                  0, &TSRLayer_Dictionary, &TSRLayer_IsA, 0);
      instance.SetNew(&new_TSRLayer);
      instance.SetNewArray(&newArray_TSRLayer);
      instance.SetDelete(&delete_TSRLayer);
      instance.SetDeleteArray(&deleteArray_TSRLayer);
      instance.SetDestructor(&destruct_TSRLayer);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSRLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   void TSRLayer_Dictionary() {
      ROOT::GenerateInitInstance((const TSRLayer*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TSRAlignment_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void TSRAlignment_Dictionary();
   TClass *TSRAlignment_IsA(const void*);
   void *new_TSRAlignment(void *p = 0);
   void *newArray_TSRAlignment(Long_t size);
   void delete_TSRAlignment(void *p);
   void deleteArray_TSRAlignment(void *p);
   void destruct_TSRAlignment(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSRAlignment*)
   {
      TSRAlignment *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSRAlignment", "SySalROOTs.h", 191,
                  typeid(TSRAlignment), DefineBehavior(ptr, ptr),
                  0, &TSRAlignment_Dictionary, &TSRAlignment_IsA, 0);
      instance.SetNew(&new_TSRAlignment);
      instance.SetNewArray(&newArray_TSRAlignment);
      instance.SetDelete(&delete_TSRAlignment);
      instance.SetDeleteArray(&deleteArray_TSRAlignment);
      instance.SetDestructor(&destruct_TSRAlignment);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSRAlignment*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   void TSRAlignment_Dictionary() {
      ROOT::GenerateInitInstance((const TSRAlignment*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TSRSegment_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void TSRSegment_Dictionary();
   TClass *TSRSegment_IsA(const void*);
   void *new_TSRSegment(void *p = 0);
   void *newArray_TSRSegment(Long_t size);
   void delete_TSRSegment(void *p);
   void deleteArray_TSRSegment(void *p);
   void destruct_TSRSegment(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSRSegment*)
   {
      TSRSegment *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSRSegment", "SySalROOTs.h", 206,
                  typeid(TSRSegment), DefineBehavior(ptr, ptr),
                  0, &TSRSegment_Dictionary, &TSRSegment_IsA, 0);
      instance.SetNew(&new_TSRSegment);
      instance.SetNewArray(&newArray_TSRSegment);
      instance.SetDelete(&delete_TSRSegment);
      instance.SetDeleteArray(&deleteArray_TSRSegment);
      instance.SetDestructor(&destruct_TSRSegment);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSRSegment*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   void TSRSegment_Dictionary() {
      ROOT::GenerateInitInstance((const TSRSegment*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TSRTrack_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void TSRTrack_Dictionary();
   TClass *TSRTrack_IsA(const void*);
   void *new_TSRTrack(void *p = 0);
   void *newArray_TSRTrack(Long_t size);
   void delete_TSRTrack(void *p);
   void deleteArray_TSRTrack(void *p);
   void destruct_TSRTrack(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSRTrack*)
   {
      TSRTrack *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSRTrack", "SySalROOTs.h", 226,
                  typeid(TSRTrack), DefineBehavior(ptr, ptr),
                  0, &TSRTrack_Dictionary, &TSRTrack_IsA, 0);
      instance.SetNew(&new_TSRTrack);
      instance.SetNewArray(&newArray_TSRTrack);
      instance.SetDelete(&delete_TSRTrack);
      instance.SetDeleteArray(&deleteArray_TSRTrack);
      instance.SetDestructor(&destruct_TSRTrack);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSRTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   void TSRTrack_Dictionary() {
      ROOT::GenerateInitInstance((const TSRTrack*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TSRTrackSegment_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void TSRTrackSegment_Dictionary();
   TClass *TSRTrackSegment_IsA(const void*);
   void *new_TSRTrackSegment(void *p = 0);
   void *newArray_TSRTrackSegment(Long_t size);
   void delete_TSRTrackSegment(void *p);
   void deleteArray_TSRTrackSegment(void *p);
   void destruct_TSRTrackSegment(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSRTrackSegment*)
   {
      TSRTrackSegment *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSRTrackSegment", "SySalROOTs.h", 243,
                  typeid(TSRTrackSegment), DefineBehavior(ptr, ptr),
                  0, &TSRTrackSegment_Dictionary, &TSRTrackSegment_IsA, 0);
      instance.SetNew(&new_TSRTrackSegment);
      instance.SetNewArray(&newArray_TSRTrackSegment);
      instance.SetDelete(&delete_TSRTrackSegment);
      instance.SetDeleteArray(&deleteArray_TSRTrackSegment);
      instance.SetDestructor(&destruct_TSRTrackSegment);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSRTrackSegment*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   void TSRTrackSegment_Dictionary() {
      ROOT::GenerateInitInstance((const TSRTrackSegment*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TSRVertexTrack_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void TSRVertexTrack_Dictionary();
   TClass *TSRVertexTrack_IsA(const void*);
   void *new_TSRVertexTrack(void *p = 0);
   void *newArray_TSRVertexTrack(Long_t size);
   void delete_TSRVertexTrack(void *p);
   void deleteArray_TSRVertexTrack(void *p);
   void destruct_TSRVertexTrack(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSRVertexTrack*)
   {
      TSRVertexTrack *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSRVertexTrack", "SySalROOTs.h", 249,
                  typeid(TSRVertexTrack), DefineBehavior(ptr, ptr),
                  0, &TSRVertexTrack_Dictionary, &TSRVertexTrack_IsA, 0);
      instance.SetNew(&new_TSRVertexTrack);
      instance.SetNewArray(&newArray_TSRVertexTrack);
      instance.SetDelete(&delete_TSRVertexTrack);
      instance.SetDeleteArray(&deleteArray_TSRVertexTrack);
      instance.SetDestructor(&destruct_TSRVertexTrack);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSRVertexTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   void TSRVertexTrack_Dictionary() {
      ROOT::GenerateInitInstance((const TSRVertexTrack*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TSRVertex_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void TSRVertex_Dictionary();
   TClass *TSRVertex_IsA(const void*);
   void *new_TSRVertex(void *p = 0);
   void *newArray_TSRVertex(Long_t size);
   void delete_TSRVertex(void *p);
   void deleteArray_TSRVertex(void *p);
   void destruct_TSRVertex(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSRVertex*)
   {
      TSRVertex *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSRVertex", "SySalROOTs.h", 255,
                  typeid(TSRVertex), DefineBehavior(ptr, ptr),
                  0, &TSRVertex_Dictionary, &TSRVertex_IsA, 0);
      instance.SetNew(&new_TSRVertex);
      instance.SetNewArray(&newArray_TSRVertex);
      instance.SetDelete(&delete_TSRVertex);
      instance.SetDeleteArray(&deleteArray_TSRVertex);
      instance.SetDestructor(&destruct_TSRVertex);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSRVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   void TSRVertex_Dictionary() {
      ROOT::GenerateInitInstance((const TSRVertex*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TSySalTLG_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *TSySalTLG_IsA(const void*);
   void delete_TSySalTLG(void *p);
   void deleteArray_TSySalTLG(void *p);
   void destruct_TSySalTLG(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSySalTLG*)
   {
      TSySalTLG *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSySalTLG", TSySalTLG::Class_Version(), "SySalROOT.h", 10,
                  typeid(TSySalTLG), DefineBehavior(ptr, ptr),
                  &::TSySalTLG::Dictionary, &TSySalTLG_IsA, 4);
      instance.SetDelete(&delete_TSySalTLG);
      instance.SetDeleteArray(&deleteArray_TSySalTLG);
      instance.SetDestructor(&destruct_TSySalTLG);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSySalTLG*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TSySalRWD_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *TSySalRWD_IsA(const void*);
   void delete_TSySalRWD(void *p);
   void deleteArray_TSySalRWD(void *p);
   void destruct_TSySalRWD(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSySalRWD*)
   {
      TSySalRWD *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSySalRWD", TSySalRWD::Class_Version(), "SySalROOT.h", 40,
                  typeid(TSySalRWD), DefineBehavior(ptr, ptr),
                  &::TSySalRWD::Dictionary, &TSySalRWD_IsA, 4);
      instance.SetDelete(&delete_TSySalRWD);
      instance.SetDeleteArray(&deleteArray_TSySalRWD);
      instance.SetDestructor(&destruct_TSySalRWD);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSySalRWD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TSySalTSR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *TSySalTSR_IsA(const void*);
   void delete_TSySalTSR(void *p);
   void deleteArray_TSySalTSR(void *p);
   void destruct_TSySalTSR(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const TSySalTSR*)
   {
      TSySalTSR *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("TSySalTSR", TSySalTSR::Class_Version(), "SySalROOT.h", 80,
                  typeid(TSySalTSR), DefineBehavior(ptr, ptr),
                  &::TSySalTSR::Dictionary, &TSySalTSR_IsA, 4);
      instance.SetDelete(&delete_TSySalTSR);
      instance.SetDeleteArray(&deleteArray_TSySalTSR);
      instance.SetDestructor(&destruct_TSySalTSR);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const TSySalTSR*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *TSySalTLG::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSySalTLG::Class_Name()
{
   return "TSySalTLG";
}

//______________________________________________________________________________
const char *TSySalTLG::ImplFileName()
{
   return ROOT::GenerateInitInstance((const TSySalTLG*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSySalTLG::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const TSySalTLG*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSySalTLG::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const TSySalTLG*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSySalTLG::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const TSySalTLG*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSySalRWD::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSySalRWD::Class_Name()
{
   return "TSySalRWD";
}

//______________________________________________________________________________
const char *TSySalRWD::ImplFileName()
{
   return ROOT::GenerateInitInstance((const TSySalRWD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSySalRWD::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const TSySalRWD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSySalRWD::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const TSySalRWD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSySalRWD::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const TSySalRWD*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSySalTSR::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSySalTSR::Class_Name()
{
   return "TSySalTSR";
}

//______________________________________________________________________________
const char *TSySalTSR::ImplFileName()
{
   return ROOT::GenerateInitInstance((const TSySalTSR*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSySalTSR::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const TSySalTSR*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSySalTSR::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const TSySalTSR*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSySalTSR::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const TSySalTSR*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void R__TSySalTLG_pHeader(TBuffer &R__b, void *R__p, int)
{
   TTree** pHeader = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pHeader;
   } else {
      R__b << (TObject*)*pHeader;
   }
}

//______________________________________________________________________________
void R__TSySalTLG_pBaseTracks(TBuffer &R__b, void *R__p, int)
{
   TTree** pBaseTracks = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pBaseTracks;
   } else {
      R__b << (TObject*)*pBaseTracks;
   }
}

//______________________________________________________________________________
void R__TSySalTLG_pTopTracks(TBuffer &R__b, void *R__p, int)
{
   TTree** pTopTracks = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pTopTracks;
   } else {
      R__b << (TObject*)*pTopTracks;
   }
}

//______________________________________________________________________________
void R__TSySalTLG_pBottomTracks(TBuffer &R__b, void *R__p, int)
{
   TTree** pBottomTracks = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pBottomTracks;
   } else {
      R__b << (TObject*)*pBottomTracks;
   }
}

//______________________________________________________________________________
void R__TSySalTLG_pFile(TBuffer &R__b, void *R__p, int)
{
   TFile** pFile = (TFile**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pFile;
   } else {
      R__b << (TObject*)*pFile;
   }
}

//______________________________________________________________________________
void TSySalTLG::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSySalTLG.

   if (R__b.IsReading()) {
      TSySalTLG::Class()->ReadBuffer(R__b, this);
   } else {
      TSySalTLG::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TSySalTLG::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSySalTLG.

      TClass *R__cl = TSySalTLG::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*pHeader", &pHeader);
      R__cl->SetStreamer("*pHeader",R__TSySalTLG_pHeader);
      R__insp.Inspect(R__cl, R__parent, "*pBaseTracks", &pBaseTracks);
      R__cl->SetStreamer("*pBaseTracks",R__TSySalTLG_pBaseTracks);
      R__insp.Inspect(R__cl, R__parent, "*pTopTracks", &pTopTracks);
      R__cl->SetStreamer("*pTopTracks",R__TSySalTLG_pTopTracks);
      R__insp.Inspect(R__cl, R__parent, "*pBottomTracks", &pBottomTracks);
      R__cl->SetStreamer("*pBottomTracks",R__TSySalTLG_pBottomTracks);
      R__insp.Inspect(R__cl, R__parent, "*pFile", &pFile);
      R__cl->SetStreamer("*pFile",R__TSySalTLG_pFile);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSySalTLG_IsA(const void *obj) {
      return ((::TSySalTLG*)obj)->IsA();
   }
   // Wrapper around operator delete
   void delete_TSySalTLG(void *p) {
      delete ((::TSySalTLG*)p);
   }
   void deleteArray_TSySalTLG(void *p) {
      delete [] ((::TSySalTLG*)p);
   }
   void destruct_TSySalTLG(void *p) {
      typedef ::TSySalTLG current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSySalTLG

//______________________________________________________________________________
void R__TSySalRWD_pHeader(TBuffer &R__b, void *R__p, int)
{
   TTree** pHeader = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pHeader;
   } else {
      R__b << (TObject*)*pHeader;
   }
}

//______________________________________________________________________________
void R__TSySalRWD_pViews(TBuffer &R__b, void *R__p, int)
{
   TTree** pViews = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pViews;
   } else {
      R__b << (TObject*)*pViews;
   }
}

//______________________________________________________________________________
void R__TSySalRWD_pTopLayers(TBuffer &R__b, void *R__p, int)
{
   TTree** pTopLayers = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pTopLayers;
   } else {
      R__b << (TObject*)*pTopLayers;
   }
}

//______________________________________________________________________________
void R__TSySalRWD_pBottomLayers(TBuffer &R__b, void *R__p, int)
{
   TTree** pBottomLayers = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pBottomLayers;
   } else {
      R__b << (TObject*)*pBottomLayers;
   }
}

//______________________________________________________________________________
void R__TSySalRWD_pTopTracks(TBuffer &R__b, void *R__p, int)
{
   TTree** pTopTracks = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pTopTracks;
   } else {
      R__b << (TObject*)*pTopTracks;
   }
}

//______________________________________________________________________________
void R__TSySalRWD_pBottomTracks(TBuffer &R__b, void *R__p, int)
{
   TTree** pBottomTracks = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pBottomTracks;
   } else {
      R__b << (TObject*)*pBottomTracks;
   }
}

//______________________________________________________________________________
void R__TSySalRWD_pTopGrains(TBuffer &R__b, void *R__p, int)
{
   TTree** pTopGrains = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pTopGrains;
   } else {
      R__b << (TObject*)*pTopGrains;
   }
}

//______________________________________________________________________________
void R__TSySalRWD_pBottomGrains(TBuffer &R__b, void *R__p, int)
{
   TTree** pBottomGrains = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pBottomGrains;
   } else {
      R__b << (TObject*)*pBottomGrains;
   }
}

//______________________________________________________________________________
void R__TSySalRWD_pFile(TBuffer &R__b, void *R__p, int)
{
   TFile** pFile = (TFile**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pFile;
   } else {
      R__b << (TObject*)*pFile;
   }
}

//______________________________________________________________________________
void TSySalRWD::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSySalRWD.

   if (R__b.IsReading()) {
      TSySalRWD::Class()->ReadBuffer(R__b, this);
   } else {
      TSySalRWD::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TSySalRWD::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSySalRWD.

      TClass *R__cl = TSySalRWD::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*pHeader", &pHeader);
      R__cl->SetStreamer("*pHeader",R__TSySalRWD_pHeader);
      R__insp.Inspect(R__cl, R__parent, "*pViews", &pViews);
      R__cl->SetStreamer("*pViews",R__TSySalRWD_pViews);
      R__insp.Inspect(R__cl, R__parent, "*pTopLayers", &pTopLayers);
      R__cl->SetStreamer("*pTopLayers",R__TSySalRWD_pTopLayers);
      R__insp.Inspect(R__cl, R__parent, "*pBottomLayers", &pBottomLayers);
      R__cl->SetStreamer("*pBottomLayers",R__TSySalRWD_pBottomLayers);
      R__insp.Inspect(R__cl, R__parent, "*pTopTracks", &pTopTracks);
      R__cl->SetStreamer("*pTopTracks",R__TSySalRWD_pTopTracks);
      R__insp.Inspect(R__cl, R__parent, "*pBottomTracks", &pBottomTracks);
      R__cl->SetStreamer("*pBottomTracks",R__TSySalRWD_pBottomTracks);
      R__insp.Inspect(R__cl, R__parent, "*pTopGrains", &pTopGrains);
      R__cl->SetStreamer("*pTopGrains",R__TSySalRWD_pTopGrains);
      R__insp.Inspect(R__cl, R__parent, "*pBottomGrains", &pBottomGrains);
      R__cl->SetStreamer("*pBottomGrains",R__TSySalRWD_pBottomGrains);
      R__insp.Inspect(R__cl, R__parent, "*pFile", &pFile);
      R__cl->SetStreamer("*pFile",R__TSySalRWD_pFile);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSySalRWD_IsA(const void *obj) {
      return ((::TSySalRWD*)obj)->IsA();
   }
   // Wrapper around operator delete
   void delete_TSySalRWD(void *p) {
      delete ((::TSySalRWD*)p);
   }
   void deleteArray_TSySalRWD(void *p) {
      delete [] ((::TSySalRWD*)p);
   }
   void destruct_TSySalRWD(void *p) {
      typedef ::TSySalRWD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSySalRWD

//______________________________________________________________________________
void R__TSySalTSR_pHeader(TBuffer &R__b, void *R__p, int)
{
   TTree** pHeader = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pHeader;
   } else {
      R__b << (TObject*)*pHeader;
   }
}

//______________________________________________________________________________
void R__TSySalTSR_pLayers(TBuffer &R__b, void *R__p, int)
{
   TTree** pLayers = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pLayers;
   } else {
      R__b << (TObject*)*pLayers;
   }
}

//______________________________________________________________________________
void R__TSySalTSR_pSegments(TBuffer &R__b, void *R__p, int)
{
   TTree** pSegments = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pSegments;
   } else {
      R__b << (TObject*)*pSegments;
   }
}

//______________________________________________________________________________
void R__TSySalTSR_pTracks(TBuffer &R__b, void *R__p, int)
{
   TTree** pTracks = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pTracks;
   } else {
      R__b << (TObject*)*pTracks;
   }
}

//______________________________________________________________________________
void R__TSySalTSR_pTrackSegments(TBuffer &R__b, void *R__p, int)
{
   TTree** pTrackSegments = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pTrackSegments;
   } else {
      R__b << (TObject*)*pTrackSegments;
   }
}

//______________________________________________________________________________
void R__TSySalTSR_pVertices(TBuffer &R__b, void *R__p, int)
{
   TTree** pVertices = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pVertices;
   } else {
      R__b << (TObject*)*pVertices;
   }
}

//______________________________________________________________________________
void R__TSySalTSR_pVertexTracks(TBuffer &R__b, void *R__p, int)
{
   TTree** pVertexTracks = (TTree**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pVertexTracks;
   } else {
      R__b << (TObject*)*pVertexTracks;
   }
}

//______________________________________________________________________________
void R__TSySalTSR_pFile(TBuffer &R__b, void *R__p, int)
{
   TFile** pFile = (TFile**)R__p;
   if (R__b.IsReading()) {
      R__b >> *pFile;
   } else {
      R__b << (TObject*)*pFile;
   }
}

//______________________________________________________________________________
void TSySalTSR::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSySalTSR.

   if (R__b.IsReading()) {
      TSySalTSR::Class()->ReadBuffer(R__b, this);
   } else {
      TSySalTSR::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TSySalTSR::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSySalTSR.

      TClass *R__cl = TSySalTSR::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*pHeader", &pHeader);
      R__cl->SetStreamer("*pHeader",R__TSySalTSR_pHeader);
      R__insp.Inspect(R__cl, R__parent, "*pLayers", &pLayers);
      R__cl->SetStreamer("*pLayers",R__TSySalTSR_pLayers);
      R__insp.Inspect(R__cl, R__parent, "*pSegments", &pSegments);
      R__cl->SetStreamer("*pSegments",R__TSySalTSR_pSegments);
      R__insp.Inspect(R__cl, R__parent, "*pTracks", &pTracks);
      R__cl->SetStreamer("*pTracks",R__TSySalTSR_pTracks);
      R__insp.Inspect(R__cl, R__parent, "*pTrackSegments", &pTrackSegments);
      R__cl->SetStreamer("*pTrackSegments",R__TSySalTSR_pTrackSegments);
      R__insp.Inspect(R__cl, R__parent, "*pVertices", &pVertices);
      R__cl->SetStreamer("*pVertices",R__TSySalTSR_pVertices);
      R__insp.Inspect(R__cl, R__parent, "*pVertexTracks", &pVertexTracks);
      R__cl->SetStreamer("*pVertexTracks",R__TSySalTSR_pVertexTracks);
      R__insp.Inspect(R__cl, R__parent, "*pFile", &pFile);
      R__cl->SetStreamer("*pFile",R__TSySalTSR_pFile);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSySalTSR_IsA(const void *obj) {
      return ((::TSySalTSR*)obj)->IsA();
   }
   // Wrapper around operator delete
   void delete_TSySalTSR(void *p) {
      delete ((::TSySalTSR*)p);
   }
   void deleteArray_TSySalTSR(void *p) {
      delete [] ((::TSySalTSR*)p);
   }
   void destruct_TSySalTSR(void *p) {
      typedef ::TSySalTSR current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSySalTSR

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSRHeader_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(::TSRHeader*)obj));
   }
   // Wrappers around operator new
   void *new_TSRHeader(void *p) {
      return  p ? ::new((ROOT::TOperatorNewHelper*)p) ::TSRHeader : new ::TSRHeader;
   }
   void *newArray_TSRHeader(Long_t size) {
      return new ::TSRHeader[size];
   }
   // Wrapper around operator delete
   void delete_TSRHeader(void *p) {
      delete ((::TSRHeader*)p);
   }
   void deleteArray_TSRHeader(void *p) {
      delete [] ((::TSRHeader*)p);
   }
   void destruct_TSRHeader(void *p) {
      typedef ::TSRHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSRHeader

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSRLayer_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(::TSRLayer*)obj));
   }
   // Wrappers around operator new
   void *new_TSRLayer(void *p) {
      return  p ? ::new((ROOT::TOperatorNewHelper*)p) ::TSRLayer : new ::TSRLayer;
   }
   void *newArray_TSRLayer(Long_t size) {
      return new ::TSRLayer[size];
   }
   // Wrapper around operator delete
   void delete_TSRLayer(void *p) {
      delete ((::TSRLayer*)p);
   }
   void deleteArray_TSRLayer(void *p) {
      delete [] ((::TSRLayer*)p);
   }
   void destruct_TSRLayer(void *p) {
      typedef ::TSRLayer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSRLayer

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSRAlignment_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(::TSRAlignment*)obj));
   }
   // Wrappers around operator new
   void *new_TSRAlignment(void *p) {
      return  p ? ::new((ROOT::TOperatorNewHelper*)p) ::TSRAlignment : new ::TSRAlignment;
   }
   void *newArray_TSRAlignment(Long_t size) {
      return new ::TSRAlignment[size];
   }
   // Wrapper around operator delete
   void delete_TSRAlignment(void *p) {
      delete ((::TSRAlignment*)p);
   }
   void deleteArray_TSRAlignment(void *p) {
      delete [] ((::TSRAlignment*)p);
   }
   void destruct_TSRAlignment(void *p) {
      typedef ::TSRAlignment current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSRAlignment

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSRSegment_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(::TSRSegment*)obj));
   }
   // Wrappers around operator new
   void *new_TSRSegment(void *p) {
      return  p ? ::new((ROOT::TOperatorNewHelper*)p) ::TSRSegment : new ::TSRSegment;
   }
   void *newArray_TSRSegment(Long_t size) {
      return new ::TSRSegment[size];
   }
   // Wrapper around operator delete
   void delete_TSRSegment(void *p) {
      delete ((::TSRSegment*)p);
   }
   void deleteArray_TSRSegment(void *p) {
      delete [] ((::TSRSegment*)p);
   }
   void destruct_TSRSegment(void *p) {
      typedef ::TSRSegment current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSRSegment

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSRTrack_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(::TSRTrack*)obj));
   }
   // Wrappers around operator new
   void *new_TSRTrack(void *p) {
      return  p ? ::new((ROOT::TOperatorNewHelper*)p) ::TSRTrack : new ::TSRTrack;
   }
   void *newArray_TSRTrack(Long_t size) {
      return new ::TSRTrack[size];
   }
   // Wrapper around operator delete
   void delete_TSRTrack(void *p) {
      delete ((::TSRTrack*)p);
   }
   void deleteArray_TSRTrack(void *p) {
      delete [] ((::TSRTrack*)p);
   }
   void destruct_TSRTrack(void *p) {
      typedef ::TSRTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSRTrack

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSRTrackSegment_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(::TSRTrackSegment*)obj));
   }
   // Wrappers around operator new
   void *new_TSRTrackSegment(void *p) {
      return  p ? ::new((ROOT::TOperatorNewHelper*)p) ::TSRTrackSegment : new ::TSRTrackSegment;
   }
   void *newArray_TSRTrackSegment(Long_t size) {
      return new ::TSRTrackSegment[size];
   }
   // Wrapper around operator delete
   void delete_TSRTrackSegment(void *p) {
      delete ((::TSRTrackSegment*)p);
   }
   void deleteArray_TSRTrackSegment(void *p) {
      delete [] ((::TSRTrackSegment*)p);
   }
   void destruct_TSRTrackSegment(void *p) {
      typedef ::TSRTrackSegment current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSRTrackSegment

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSRVertexTrack_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(::TSRVertexTrack*)obj));
   }
   // Wrappers around operator new
   void *new_TSRVertexTrack(void *p) {
      return  p ? ::new((ROOT::TOperatorNewHelper*)p) ::TSRVertexTrack : new ::TSRVertexTrack;
   }
   void *newArray_TSRVertexTrack(Long_t size) {
      return new ::TSRVertexTrack[size];
   }
   // Wrapper around operator delete
   void delete_TSRVertexTrack(void *p) {
      delete ((::TSRVertexTrack*)p);
   }
   void deleteArray_TSRVertexTrack(void *p) {
      delete [] ((::TSRVertexTrack*)p);
   }
   void destruct_TSRVertexTrack(void *p) {
      typedef ::TSRVertexTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSRVertexTrack

namespace ROOT {
   // Return the actual TClass for the object argument
   TClass *TSRVertex_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(::TSRVertex*)obj));
   }
   // Wrappers around operator new
   void *new_TSRVertex(void *p) {
      return  p ? ::new((ROOT::TOperatorNewHelper*)p) ::TSRVertex : new ::TSRVertex;
   }
   void *newArray_TSRVertex(Long_t size) {
      return new ::TSRVertex[size];
   }
   // Wrapper around operator delete
   void delete_TSRVertex(void *p) {
      delete ((::TSRVertex*)p);
   }
   void deleteArray_TSRVertex(void *p) {
      delete [] ((::TSRVertex*)p);
   }
   void destruct_TSRVertex(void *p) {
      typedef ::TSRVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class TSRVertex

/********************************************************
* Dict.cxx
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableDict();

extern "C" void G__set_cpp_environmentDict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("SySalROOT.h");
  G__cpp_reset_tagtableDict();
}
class G__DictdOcxx_tag {};

void* operator new(size_t size,G__DictdOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__DictdOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_DictdOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSRHeader */
// automatic default constructor
static int G__Dict_146_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSRHeader *p;
   if(G__getaryconstruct()) p=new TSRHeader[G__getaryconstruct()];
   else p=::new((G__DictdOcxx_tag*)G__getgvp()) TSRHeader;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRHeader);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_146_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSRHeader *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSRHeader(*(TSRHeader*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRHeader);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSRHeader G__TTSRHeader;
static int G__Dict_146_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSRHeader *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TSRHeader *)((G__getstructoffset())+sizeof(TSRHeader)*i))->~G__TTSRHeader();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TSRHeader *)(G__getstructoffset()))->~G__TTSRHeader();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSRLayer */
// automatic default constructor
static int G__Dict_147_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSRLayer *p;
   if(G__getaryconstruct()) p=new TSRLayer[G__getaryconstruct()];
   else p=::new((G__DictdOcxx_tag*)G__getgvp()) TSRLayer;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRLayer);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_147_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSRLayer *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSRLayer(*(TSRLayer*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRLayer);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSRLayer G__TTSRLayer;
static int G__Dict_147_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSRLayer *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TSRLayer *)((G__getstructoffset())+sizeof(TSRLayer)*i))->~G__TTSRLayer();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TSRLayer *)(G__getstructoffset()))->~G__TTSRLayer();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSRAlignment */
// automatic default constructor
static int G__Dict_148_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSRAlignment *p;
   if(G__getaryconstruct()) p=new TSRAlignment[G__getaryconstruct()];
   else p=::new((G__DictdOcxx_tag*)G__getgvp()) TSRAlignment;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRAlignment);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_148_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSRAlignment *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSRAlignment(*(TSRAlignment*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRAlignment);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSRAlignment G__TTSRAlignment;
static int G__Dict_148_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSRAlignment *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TSRAlignment *)((G__getstructoffset())+sizeof(TSRAlignment)*i))->~G__TTSRAlignment();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TSRAlignment *)(G__getstructoffset()))->~G__TTSRAlignment();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSRSegment */
// automatic default constructor
static int G__Dict_149_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSRSegment *p;
   if(G__getaryconstruct()) p=new TSRSegment[G__getaryconstruct()];
   else p=::new((G__DictdOcxx_tag*)G__getgvp()) TSRSegment;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRSegment);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_149_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSRSegment *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSRSegment(*(TSRSegment*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRSegment);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSRSegment G__TTSRSegment;
static int G__Dict_149_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSRSegment *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TSRSegment *)((G__getstructoffset())+sizeof(TSRSegment)*i))->~G__TTSRSegment();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TSRSegment *)(G__getstructoffset()))->~G__TTSRSegment();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSRTrack */
// automatic default constructor
static int G__Dict_150_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSRTrack *p;
   if(G__getaryconstruct()) p=new TSRTrack[G__getaryconstruct()];
   else p=::new((G__DictdOcxx_tag*)G__getgvp()) TSRTrack;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRTrack);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_150_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSRTrack *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSRTrack(*(TSRTrack*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRTrack);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSRTrack G__TTSRTrack;
static int G__Dict_150_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSRTrack *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TSRTrack *)((G__getstructoffset())+sizeof(TSRTrack)*i))->~G__TTSRTrack();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TSRTrack *)(G__getstructoffset()))->~G__TTSRTrack();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSRTrackSegment */
// automatic default constructor
static int G__Dict_151_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSRTrackSegment *p;
   if(G__getaryconstruct()) p=new TSRTrackSegment[G__getaryconstruct()];
   else p=::new((G__DictdOcxx_tag*)G__getgvp()) TSRTrackSegment;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRTrackSegment);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_151_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSRTrackSegment *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSRTrackSegment(*(TSRTrackSegment*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRTrackSegment);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSRTrackSegment G__TTSRTrackSegment;
static int G__Dict_151_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSRTrackSegment *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TSRTrackSegment *)((G__getstructoffset())+sizeof(TSRTrackSegment)*i))->~G__TTSRTrackSegment();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TSRTrackSegment *)(G__getstructoffset()))->~G__TTSRTrackSegment();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSRVertexTrack */
// automatic default constructor
static int G__Dict_152_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSRVertexTrack *p;
   if(G__getaryconstruct()) p=new TSRVertexTrack[G__getaryconstruct()];
   else p=::new((G__DictdOcxx_tag*)G__getgvp()) TSRVertexTrack;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRVertexTrack);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_152_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSRVertexTrack *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSRVertexTrack(*(TSRVertexTrack*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRVertexTrack);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSRVertexTrack G__TTSRVertexTrack;
static int G__Dict_152_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSRVertexTrack *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TSRVertexTrack *)((G__getstructoffset())+sizeof(TSRVertexTrack)*i))->~G__TTSRVertexTrack();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TSRVertexTrack *)(G__getstructoffset()))->~G__TTSRVertexTrack();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSRVertex */
// automatic default constructor
static int G__Dict_153_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSRVertex *p;
   if(G__getaryconstruct()) p=new TSRVertex[G__getaryconstruct()];
   else p=::new((G__DictdOcxx_tag*)G__getgvp()) TSRVertex;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRVertex);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_153_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSRVertex *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSRVertex(*(TSRVertex*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSRVertex);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSRVertex G__TTSRVertex;
static int G__Dict_153_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSRVertex *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TSRVertex *)((G__getstructoffset())+sizeof(TSRVertex)*i))->~G__TTSRVertex();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TSRVertex *)(G__getstructoffset()))->~G__TTSRVertex();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSySalTLG */
static int G__Dict_154_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTLG*)(G__getstructoffset()))->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTLG*)(G__getstructoffset()))->GetBaseTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTLG*)(G__getstructoffset()))->GetTopTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTLG*)(G__getstructoffset()))->GetBottomTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTLG*)(G__getstructoffset()))->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSySalTLG *p=NULL;
      p = new TSySalTLG((TFile*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSySalTLG);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TSySalTLG*)(G__getstructoffset()))->LoadTLG((char*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,103,(long)((TSySalTLG*)(G__getstructoffset()))->SaveTLG((char*)G__int(libp->para[0]),(int)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,103,(long)((TSySalTLG*)(G__getstructoffset()))->SaveTLG((char*)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TSySalTLG::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalTLG::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TSySalTLG::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TSySalTLG::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TSySalTLG*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalTLG*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalTLG*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalTLG*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalTLG::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSySalTLG::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalTLG::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_154_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSySalTLG::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_154_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSySalTLG *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSySalTLG(*(TSySalTLG*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSySalTLG);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSySalTLG G__TTSySalTLG;
static int G__Dict_154_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSySalTLG *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TSySalTLG *)((G__getstructoffset())+sizeof(TSySalTLG)*i);
   else  delete (TSySalTLG *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSySalRWD */
static int G__Dict_156_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetViews());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetTopLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetBottomLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetTopTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetBottomTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetTopGrains());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetBottomGrains());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalRWD*)(G__getstructoffset()))->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSySalRWD *p=NULL;
      p = new TSySalRWD((TFile*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSySalRWD);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TSySalRWD*)(G__getstructoffset()))->LoadRWD((char*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,103,(long)((TSySalRWD*)(G__getstructoffset()))->SaveRWD((char*)G__int(libp->para[0]),(int)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,103,(long)((TSySalRWD*)(G__getstructoffset()))->SaveRWD((char*)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TSySalRWD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalRWD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TSySalRWD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TSySalRWD::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TSySalRWD*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalRWD*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalRWD*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalRWD*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalRWD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSySalRWD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalRWD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_156_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSySalRWD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_156_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSySalRWD *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSySalRWD(*(TSySalRWD*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSySalRWD);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSySalRWD G__TTSySalRWD;
static int G__Dict_156_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSySalRWD *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TSySalRWD *)((G__getstructoffset())+sizeof(TSySalRWD)*i);
   else  delete (TSySalRWD *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSySalTSR */
static int G__Dict_159_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTSR*)(G__getstructoffset()))->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTSR*)(G__getstructoffset()))->GetLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTSR*)(G__getstructoffset()))->GetSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTSR*)(G__getstructoffset()))->GetTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTSR*)(G__getstructoffset()))->GetTrackSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTSR*)(G__getstructoffset()))->GetVertices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTSR*)(G__getstructoffset()))->GetVertexTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TSySalTSR*)(G__getstructoffset()))->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSySalTSR *p=NULL;
      p = new TSySalTSR((TFile*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSySalTSR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TSySalTSR*)(G__getstructoffset()))->LoadTSR((char*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,103,(long)((TSySalTSR*)(G__getstructoffset()))->SaveTSR((char*)G__int(libp->para[0]),(int)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,103,(long)((TSySalTSR*)(G__getstructoffset()))->SaveTSR((char*)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TSySalTSR::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalTSR::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TSySalTSR::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TSySalTSR::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TSySalTSR*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalTSR*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalTSR*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSySalTSR*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalTSR::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSySalTSR::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSySalTSR::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_159_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSySalTSR::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_159_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSySalTSR *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSySalTSR(*(TSySalTSR*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_TSySalTSR);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSySalTSR G__TTSySalTSR;
static int G__Dict_159_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSySalTSR *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TSySalTSR *)((G__getstructoffset())+sizeof(TSySalTSR)*i);
   else  delete (TSySalTSR *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSRHeader */

/* TSRLayer */

/* TSRAlignment */

/* TSRSegment */

/* TSRTrack */

/* TSRTrackSegment */

/* TSRVertexTrack */

/* TSRVertex */

/* TSySalTLG */

/* TSySalRWD */

/* TSySalTSR */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDict {
 public:
  G__Sizep2memfuncDict() {p=&G__Sizep2memfuncDict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDict::*p)();
};

size_t G__get_sizep2memfuncDict()
{
  G__Sizep2memfuncDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_TSySalTLG))) {
     TSySalTLG *G__Lderived;
     G__Lderived=(TSySalTLG*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_TSySalTLG),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_TSySalRWD))) {
     TSySalRWD *G__Lderived;
     G__Lderived=(TSySalRWD*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_TSySalRWD),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_TSySalTSR))) {
     TSySalTSR *G__Lderived;
     G__Lderived=(TSySalTSR*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_TSySalTSR),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSRHeader */
static void G__setup_memvarTSRHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSRHeader));
   { TSRHeader *p; p=(TSRHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Id0)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Id0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Id1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Id1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Id2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Id2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Id3)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Id3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MinX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MinX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MaxX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MaxX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MinY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MinY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MaxY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MaxY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MinZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MinZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MaxZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MaxZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Sheets)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Sheets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Tracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Vertices)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Vertices=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MaxTracksInSegment)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"MaxTracksInSegment=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RefCenterX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RefCenterX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RefCenterY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RefCenterY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RefCenterZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RefCenterZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Segments)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Segments=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSRLayer */
static void G__setup_memvarTSRLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSRLayer));
   { TSRLayer *p; p=(TSRLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SheetId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"SheetId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownstreamExt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DownstreamExt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownstreamInt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DownstreamInt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpstreamInt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"UpstreamInt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpstreamExt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"UpstreamExt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RefCenterX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RefCenterX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RefCenterY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RefCenterY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RefCenterZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RefCenterZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Segments)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Segments=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FirstSegment)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"FirstSegment=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSRAlignment */
static void G__setup_memvarTSRAlignment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSRAlignment));
   { TSRAlignment *p; p=(TSRAlignment*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->DeformationXX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeformationXX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeformationXY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeformationXY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeformationYX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeformationYX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeformationYY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeformationYY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TranslationX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"TranslationX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TranslationY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"TranslationY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TranslationZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"TranslationZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaSlopeX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeltaSlopeX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaSlopeY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeltaSlopeY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaShrinkX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeltaShrinkX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaShrinkY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeltaShrinkY=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSRSegment */
static void G__setup_memvarTSRSegment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSRSegment));
   { TSRSegment *p; p=(TSRSegment*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->AreaSum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"AreaSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Grains)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Grains=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->InterceptX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"InterceptX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->InterceptY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"InterceptY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->InterceptZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"InterceptZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SlopeX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SlopeX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SlopeY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SlopeY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Sigma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Sigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"TopZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BottomZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BaseTrackId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"BaseTrackId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LayerOwnerId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"LayerOwnerId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LayerId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"LayerId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackOwnerId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TrackOwnerId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TrackId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackLength)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TrackLength=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSRTrack */
static void G__setup_memvarTSRTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSRTrack));
   { TSRTrack *p; p=(TSRTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->DownstreamZeroX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DownstreamZeroX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownstreamZeroY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DownstreamZeroY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownstreamSlopeX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DownstreamSlopeX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownstreamSlopeY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DownstreamSlopeY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpstreamZeroX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"UpstreamZeroX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpstreamZeroY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"UpstreamZeroY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpstreamSlopeX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"UpstreamSlopeX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpstreamSlopeY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"UpstreamSlopeY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Segments)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Segments=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FirstSegment)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"FirstSegment=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpstreamVertexId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"UpstreamVertexId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownstreamVertexId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"DownstreamVertexId=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSRTrackSegment */
static void G__setup_memvarTSRTrackSegment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSRTrackSegment));
   { TSRTrackSegment *p; p=(TSRTrackSegment*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->LayerOwnerId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"LayerOwnerId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LayerId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"LayerId=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSRVertexTrack */
static void G__setup_memvarTSRVertexTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSRVertexTrack));
   { TSRVertexTrack *p; p=(TSRVertexTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->TrackId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TrackId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsUpstream)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"IsUpstream=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSRVertex */
static void G__setup_memvarTSRVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSRVertex));
   { TSRVertex *p; p=(TSRVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->X)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"X=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->AverageDistance)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"AverageDistance=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeltaX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DeltaY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Tracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FirstTrack)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"FirstTrack=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSySalTLG */
static void G__setup_memvarTSySalTLG(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSySalTLG));
   { TSySalTLG *p; p=(TSySalTLG*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pHeader=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pBaseTracks=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pTopTracks=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pBottomTracks=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TFile),-1,-1,2,"pFile=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalTLGcLcLTLGFormat),-1,-2,1,"tlgFmtOld=8",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalTLGcLcLTLGFormat),-1,-2,1,"tlgFmtOld2=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalTLGcLcLTLGFormat),-1,-2,1,"tlgFmtNoExtents=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalTLGcLcLTLGFormat),-1,-2,1,"tlgFmtNormal=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalTLGcLcLTLGFormat),-1,-2,1,"tlgFmtNormalWithIndex=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalTLGcLcLTLGFormat),-1,-2,1,"tlgFmtNormalDoubleWithIndex=5",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSySalRWD */
static void G__setup_memvarTSySalRWD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSySalRWD));
   { TSySalRWD *p; p=(TSySalRWD*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pHeader=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pViews=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pTopLayers=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pBottomLayers=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pTopTracks=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pBottomTracks=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pTopGrains=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pBottomGrains=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TFile),-1,-1,2,"pFile=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalRWDcLcLRWDFormat),-1,-2,1,"rwdFmtOld=1793",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalRWDcLcLRWDFormat),-1,-2,1,"rwdFmtNormal=1794",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalRWDcLcLRWDFormat),-1,-2,1,"rwdFmtNormalDouble=1795",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalRWDcLcLRWDGrainCompression),-1,-2,1,"rwdGCNull=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalRWDcLcLRWDGrainCompression),-1,-2,1,"rwdGCSuppressed=258",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSySalTSR */
static void G__setup_memvarTSySalTSR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_TSySalTSR));
   { TSySalTSR *p; p=(TSySalTSR*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pHeader=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pLayers=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pSegments=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pTracks=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pTrackSegments=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pVertices=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TTree),-1,-1,2,"pVertexTracks=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TFile),-1,-1,2,"pFile=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalTSRcLcLTSRFormat),-1,-2,1,"tsrFmtNormalDouble=1025",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DictLN_TSySalTSRcLcLTSRFormat),-1,-2,1,"tsrFmtNormal=1024",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSRHeader(void) {
   /* TSRHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSRHeader));
   // automatic default constructor
   G__memfunc_setup("TSRHeader",834,G__Dict_146_0_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRHeader),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSRHeader",834,G__Dict_146_1_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRHeader),-1,0,1,1,1,0,"u 'TSRHeader' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSRHeader",960,G__Dict_146_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSRLayer(void) {
   /* TSRLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSRLayer));
   // automatic default constructor
   G__memfunc_setup("TSRLayer",758,G__Dict_147_0_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRLayer),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSRLayer",758,G__Dict_147_1_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRLayer),-1,0,1,1,1,0,"u 'TSRLayer' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSRLayer",884,G__Dict_147_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSRAlignment(void) {
   /* TSRAlignment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSRAlignment));
   // automatic default constructor
   G__memfunc_setup("TSRAlignment",1176,G__Dict_148_0_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRAlignment),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSRAlignment",1176,G__Dict_148_1_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRAlignment),-1,0,1,1,1,0,"u 'TSRAlignment' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSRAlignment",1302,G__Dict_148_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSRSegment(void) {
   /* TSRSegment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSRSegment));
   // automatic default constructor
   G__memfunc_setup("TSRSegment",972,G__Dict_149_0_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRSegment),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSRSegment",972,G__Dict_149_1_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRSegment),-1,0,1,1,1,0,"u 'TSRSegment' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSRSegment",1098,G__Dict_149_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSRTrack(void) {
   /* TSRTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSRTrack));
   // automatic default constructor
   G__memfunc_setup("TSRTrack",750,G__Dict_150_0_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRTrack),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSRTrack",750,G__Dict_150_1_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRTrack),-1,0,1,1,1,0,"u 'TSRTrack' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSRTrack",876,G__Dict_150_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSRTrackSegment(void) {
   /* TSRTrackSegment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSRTrackSegment));
   // automatic default constructor
   G__memfunc_setup("TSRTrackSegment",1473,G__Dict_151_0_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRTrackSegment),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSRTrackSegment",1473,G__Dict_151_1_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRTrackSegment),-1,0,1,1,1,0,"u 'TSRTrackSegment' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSRTrackSegment",1599,G__Dict_151_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSRVertexTrack(void) {
   /* TSRVertexTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSRVertexTrack));
   // automatic default constructor
   G__memfunc_setup("TSRVertexTrack",1388,G__Dict_152_0_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRVertexTrack),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSRVertexTrack",1388,G__Dict_152_1_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRVertexTrack),-1,0,1,1,1,0,"u 'TSRVertexTrack' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSRVertexTrack",1514,G__Dict_152_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSRVertex(void) {
   /* TSRVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSRVertex));
   // automatic default constructor
   G__memfunc_setup("TSRVertex",887,G__Dict_153_0_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRVertex),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSRVertex",887,G__Dict_153_1_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSRVertex),-1,0,1,1,1,0,"u 'TSRVertex' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSRVertex",1013,G__Dict_153_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSySalTLG(void) {
   /* TSySalTLG */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSySalTLG));
   G__memfunc_setup("GetHeader",873,G__Dict_154_0_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBaseTracks",1283,G__Dict_154_1_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTopTracks",1211,G__Dict_154_2_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBottomTracks",1533,G__Dict_154_3_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetFile",672,G__Dict_154_4_0,85,G__get_linked_tagnum(&G__DictLN_TFile),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TSySalTLG",807,G__Dict_154_5_0,105,G__get_linked_tagnum(&G__DictLN_TSySalTLG),-1,0,1,1,1,0,"U 'TFile' - 0 - pfile",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LoadTLG",615,G__Dict_154_7_0,103,-1,-1,0,1,1,1,0,"C - - 0 - tlgfilename",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SaveTLG",630,G__Dict_154_8_0,103,-1,-1,0,2,1,1,0,
"C - - 0 - tlgfilename i - - 0 0 number",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__Dict_154_9_0,85,G__get_linked_tagnum(&G__DictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__Dict_154_0_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__Dict_154_1_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__Dict_154_2_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__Dict_154_3_1,85,G__get_linked_tagnum(&G__DictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__Dict_154_4_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__Dict_154_5_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_154_6_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_154_7_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_154_8_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_154_9_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_154_0_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSySalTLG",807,G__Dict_154_1_2,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSySalTLG),-1,0,1,1,1,0,"u 'TSySalTLG' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSySalTLG",933,G__Dict_154_2_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSySalRWD(void) {
   /* TSySalRWD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSySalRWD));
   G__memfunc_setup("GetHeader",873,G__Dict_156_0_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetViews",814,G__Dict_156_1_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTopLayers",1219,G__Dict_156_2_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBottomLayers",1541,G__Dict_156_3_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTopTracks",1211,G__Dict_156_4_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBottomTracks",1533,G__Dict_156_5_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTopGrains",1207,G__Dict_156_6_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBottomGrains",1529,G__Dict_156_7_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetFile",672,G__Dict_156_8_0,85,G__get_linked_tagnum(&G__DictLN_TFile),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TSySalRWD",813,G__Dict_156_9_0,105,G__get_linked_tagnum(&G__DictLN_TSySalRWD),-1,0,1,1,1,0,"U 'TFile' - 0 - pfile",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LoadRWD",621,G__Dict_156_1_1,103,-1,-1,0,1,1,1,0,"C - - 0 - rwdfilename",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SaveRWD",636,G__Dict_156_2_1,103,-1,-1,0,2,1,1,0,
"C - - 0 - rwdfilename i - - 0 0 number",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__Dict_156_3_1,85,G__get_linked_tagnum(&G__DictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__Dict_156_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__Dict_156_5_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__Dict_156_6_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__Dict_156_7_1,85,G__get_linked_tagnum(&G__DictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__Dict_156_8_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__Dict_156_9_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_156_0_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_156_1_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_156_2_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_156_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_156_4_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSySalRWD",813,G__Dict_156_5_2,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSySalRWD),-1,0,1,1,1,0,"u 'TSySalRWD' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSySalRWD",939,G__Dict_156_6_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSySalTSR(void) {
   /* TSySalTSR */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_TSySalTSR));
   G__memfunc_setup("GetHeader",873,G__Dict_159_0_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetLayers",912,G__Dict_159_1_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetSegments",1126,G__Dict_159_2_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTracks",904,G__Dict_159_3_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTrackSegments",1627,G__Dict_159_4_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetVertices",1125,G__Dict_159_5_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetVertexTracks",1542,G__Dict_159_6_0,85,G__get_linked_tagnum(&G__DictLN_TTree),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetFile",672,G__Dict_159_7_0,85,G__get_linked_tagnum(&G__DictLN_TFile),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TSySalTSR",825,G__Dict_159_8_0,105,G__get_linked_tagnum(&G__DictLN_TSySalTSR),-1,0,1,1,1,0,"U 'TFile' - 0 - pfile",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LoadTSR",633,G__Dict_159_0_1,103,-1,-1,0,1,1,1,0,"C - - 0 - tsrfilename",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SaveTSR",648,G__Dict_159_1_1,103,-1,-1,0,2,1,1,0,
"C - - 0 - tsrfilename i - - 0 0 number",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__Dict_159_2_1,85,G__get_linked_tagnum(&G__DictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__Dict_159_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__Dict_159_4_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__Dict_159_5_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__Dict_159_6_1,85,G__get_linked_tagnum(&G__DictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__Dict_159_7_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__Dict_159_8_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_159_9_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_159_0_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_159_1_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_159_2_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_159_3_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TSySalTSR",825,G__Dict_159_4_2,(int)('i'),G__get_linked_tagnum(&G__DictLN_TSySalTSR),-1,0,1,1,1,0,"u 'TSySalTSR' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSySalTSR",951,G__Dict_159_5_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)(&gROOT),85,0,0,G__get_linked_tagnum(&G__DictLN_TROOT),-1,-1,1,"gROOT=",0,(char*)NULL);
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__DictLN_TROOT = { "TROOT" , 99 , -1 };
G__linked_taginfo G__DictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__DictLN_TSRHeader = { "TSRHeader" , 115 , -1 };
G__linked_taginfo G__DictLN_TSRLayer = { "TSRLayer" , 115 , -1 };
G__linked_taginfo G__DictLN_TSRAlignment = { "TSRAlignment" , 115 , -1 };
G__linked_taginfo G__DictLN_TSRSegment = { "TSRSegment" , 115 , -1 };
G__linked_taginfo G__DictLN_TSRTrack = { "TSRTrack" , 115 , -1 };
G__linked_taginfo G__DictLN_TSRTrackSegment = { "TSRTrackSegment" , 115 , -1 };
G__linked_taginfo G__DictLN_TSRVertexTrack = { "TSRVertexTrack" , 115 , -1 };
G__linked_taginfo G__DictLN_TSRVertex = { "TSRVertex" , 115 , -1 };
G__linked_taginfo G__DictLN_TSySalTLG = { "TSySalTLG" , 99 , -1 };
G__linked_taginfo G__DictLN_TSySalTLGcLcLTLGFormat = { "TSySalTLG::TLGFormat" , 101 , -1 };
G__linked_taginfo G__DictLN_TSySalRWD = { "TSySalRWD" , 99 , -1 };
G__linked_taginfo G__DictLN_TSySalRWDcLcLRWDFormat = { "TSySalRWD::RWDFormat" , 101 , -1 };
G__linked_taginfo G__DictLN_TSySalRWDcLcLRWDGrainCompression = { "TSySalRWD::RWDGrainCompression" , 101 , -1 };
G__linked_taginfo G__DictLN_TSySalTSR = { "TSySalTSR" , 99 , -1 };
G__linked_taginfo G__DictLN_TSySalTSRcLcLTSRFormat = { "TSySalTSR::TSRFormat" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDict() {
  G__DictLN_TClass.tagnum = -1 ;
  G__DictLN_TBuffer.tagnum = -1 ;
  G__DictLN_TMemberInspector.tagnum = -1 ;
  G__DictLN_TObject.tagnum = -1 ;
  G__DictLN_TFile.tagnum = -1 ;
  G__DictLN_TROOT.tagnum = -1 ;
  G__DictLN_TTree.tagnum = -1 ;
  G__DictLN_TSRHeader.tagnum = -1 ;
  G__DictLN_TSRLayer.tagnum = -1 ;
  G__DictLN_TSRAlignment.tagnum = -1 ;
  G__DictLN_TSRSegment.tagnum = -1 ;
  G__DictLN_TSRTrack.tagnum = -1 ;
  G__DictLN_TSRTrackSegment.tagnum = -1 ;
  G__DictLN_TSRVertexTrack.tagnum = -1 ;
  G__DictLN_TSRVertex.tagnum = -1 ;
  G__DictLN_TSySalTLG.tagnum = -1 ;
  G__DictLN_TSySalTLGcLcLTLGFormat.tagnum = -1 ;
  G__DictLN_TSySalRWD.tagnum = -1 ;
  G__DictLN_TSySalRWDcLcLRWDFormat.tagnum = -1 ;
  G__DictLN_TSySalRWDcLcLRWDGrainCompression.tagnum = -1 ;
  G__DictLN_TSySalTSR.tagnum = -1 ;
  G__DictLN_TSySalTSRcLcLTSRFormat.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__DictLN_TClass);
   G__get_linked_tagnum(&G__DictLN_TBuffer);
   G__get_linked_tagnum(&G__DictLN_TMemberInspector);
   G__get_linked_tagnum(&G__DictLN_TObject);
   G__get_linked_tagnum(&G__DictLN_TFile);
   G__get_linked_tagnum(&G__DictLN_TROOT);
   G__get_linked_tagnum(&G__DictLN_TTree);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSRHeader),sizeof(TSRHeader),-1,0,(char*)NULL,G__setup_memvarTSRHeader,G__setup_memfuncTSRHeader);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSRLayer),sizeof(TSRLayer),-1,0,(char*)NULL,G__setup_memvarTSRLayer,G__setup_memfuncTSRLayer);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSRAlignment),sizeof(TSRAlignment),-1,0,(char*)NULL,G__setup_memvarTSRAlignment,G__setup_memfuncTSRAlignment);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSRSegment),sizeof(TSRSegment),-1,0,(char*)NULL,G__setup_memvarTSRSegment,G__setup_memfuncTSRSegment);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSRTrack),sizeof(TSRTrack),-1,0,(char*)NULL,G__setup_memvarTSRTrack,G__setup_memfuncTSRTrack);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSRTrackSegment),sizeof(TSRTrackSegment),-1,0,(char*)NULL,G__setup_memvarTSRTrackSegment,G__setup_memfuncTSRTrackSegment);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSRVertexTrack),sizeof(TSRVertexTrack),-1,0,(char*)NULL,G__setup_memvarTSRVertexTrack,G__setup_memfuncTSRVertexTrack);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSRVertex),sizeof(TSRVertex),-1,0,(char*)NULL,G__setup_memvarTSRVertex,G__setup_memfuncTSRVertex);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSySalTLG),sizeof(TSySalTLG),-1,324608,(char*)NULL,G__setup_memvarTSySalTLG,G__setup_memfuncTSySalTLG);
   G__get_linked_tagnum(&G__DictLN_TSySalTLGcLcLTLGFormat);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSySalRWD),sizeof(TSySalRWD),-1,324608,(char*)NULL,G__setup_memvarTSySalRWD,G__setup_memfuncTSySalRWD);
   G__get_linked_tagnum(&G__DictLN_TSySalRWDcLcLRWDFormat);
   G__get_linked_tagnum(&G__DictLN_TSySalRWDcLcLRWDGrainCompression);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_TSySalTSR),sizeof(TSySalTSR),-1,324608,(char*)NULL,G__setup_memvarTSySalTSR,G__setup_memfuncTSySalTSR);
   G__get_linked_tagnum(&G__DictLN_TSySalTSRcLcLTSRFormat);
}
extern "C" void G__cpp_setupDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDict()");
  G__set_cpp_environmentDict();
  G__cpp_setup_tagtableDict();

  G__cpp_setup_inheritanceDict();

  G__cpp_setup_typetableDict();

  G__cpp_setup_memvarDict();

  G__cpp_setup_memfuncDict();
  G__cpp_setup_globalDict();
  G__cpp_setup_funcDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDict();
  return;
}
class G__cpp_setup_initDict {
  public:
    G__cpp_setup_initDict() { G__add_setup_func("Dict",(G__incsetup)(&G__cpp_setupDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDict() { G__remove_setup_func("Dict"); }
};
G__cpp_setup_initDict G__cpp_setup_initializerDict;

