// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "axemudisplay.h"

/////////////////////////////////////////////////////////////////////////////
// CAxEmuDisplay

IMPLEMENT_DYNCREATE(CAxEmuDisplay, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CAxEmuDisplay properties

unsigned long CAxEmuDisplay::GetBkgndColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CAxEmuDisplay::SetBkgndColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CAxEmuDisplay::GetBoundColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CAxEmuDisplay::SetBoundColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CAxEmuDisplay::GetMouseEnabled()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CAxEmuDisplay::SetMouseEnabled(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CAxEmuDisplay::GetUseRightMouseButton()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CAxEmuDisplay::SetUseRightMouseButton(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

float CAxEmuDisplay::GetMouseRotationMultiplier()
{
	float result;
	GetProperty(0x5, VT_R4, (void*)&result);
	return result;
}

void CAxEmuDisplay::SetMouseRotationMultiplier(float propVal)
{
	SetProperty(0x5, VT_R4, propVal);
}

float CAxEmuDisplay::GetMouseZoomMultiplier()
{
	float result;
	GetProperty(0x6, VT_R4, (void*)&result);
	return result;
}

void CAxEmuDisplay::SetMouseZoomMultiplier(float propVal)
{
	SetProperty(0x6, VT_R4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CAxEmuDisplay operations

BOOL CAxEmuDisplay::SetBounds(float MinX, float MaxX, float MinY, float MaxY, float MinZ, float MaxZ)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		MinX, MaxX, MinY, MaxY, MinZ, MaxZ);
	return result;
}

void CAxEmuDisplay::Clear()
{
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CAxEmuDisplay::AddPlane(float Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Z);
	return result;
}

BOOL CAxEmuDisplay::AddPoint(float X, float Y, float Z, float R, float G, float B)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z, R, G, B);
	return result;
}

BOOL CAxEmuDisplay::AddPointAutoColor(float X, float Y, float Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL CAxEmuDisplay::AddSegment(float StartX, float StartY, float StartZ, float StartR, float StartG, float StartB, float EndX, float EndY, float EndZ, float EndR, float EndG, float EndB)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		StartX, StartY, StartZ, StartR, StartG, StartB, EndX, EndY, EndZ, EndR, EndG, EndB);
	return result;
}

BOOL CAxEmuDisplay::AddSegmentAutoColor(float StartX, float StartY, float StartZ, float EndX, float EndY, float EndZ)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		StartX, StartY, StartZ, EndX, EndY, EndZ);
	return result;
}

BOOL CAxEmuDisplay::StartNewSegment()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CAxEmuDisplay::EndNewSegment()
{
	BOOL result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CAxEmuDisplay::AddVertexToSegment(float X, float Y, float Z, float R, float G, float B)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z, R, G, B);
	return result;
}

BOOL CAxEmuDisplay::AddVertexToSegmentAutoColor(float X, float Y, float Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

void CAxEmuDisplay::SetMouseFunction(short Function)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Function);
}

short CAxEmuDisplay::GetMouseFunction()
{
	short result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CAxEmuDisplay::SetCameraPos(float X, float Y, float Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

float CAxEmuDisplay::GetCameraPosX()
{
	float result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetCameraPosY()
{
	float result;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetCameraPosZ()
{
	float result;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

BOOL CAxEmuDisplay::SetInterestingPoint(float X, float Y, float Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

float CAxEmuDisplay::GetInterestingPointX()
{
	float result;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetInterestingPointY()
{
	float result;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetInterestingPointZ()
{
	float result;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

BOOL CAxEmuDisplay::SetCameraDist(float Distance)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Distance);
	return result;
}

float CAxEmuDisplay::GetCameraDist()
{
	float result;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

BOOL CAxEmuDisplay::SetCameraDirNorm(float DX, float DY, float DZ, float NX, float NY, float NZ)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		DX, DY, DZ, NX, NY, NZ);
	return result;
}

float CAxEmuDisplay::GetCameraDirX()
{
	float result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetCameraDirY()
{
	float result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetCameraDirZ()
{
	float result;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetCameraNormX()
{
	float result;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetCameraNormY()
{
	float result;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

float CAxEmuDisplay::GetCameraNormZ()
{
	float result;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

BOOL CAxEmuDisplay::SetZoom(float Zoom)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Zoom);
	return result;
}

float CAxEmuDisplay::GetZoom()
{
	float result;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

void CAxEmuDisplay::SetDefaultView()
{
	InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CAxEmuDisplay::Render()
{
	BOOL result;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CAxEmuDisplay::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
